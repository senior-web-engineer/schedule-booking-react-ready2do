[{"/home/khoa/devjin/fe-react/src/ClientApp/src/index.js":"1","/home/khoa/devjin/fe-react/src/ClientApp/src/registerServiceWorker.js":"2","/home/khoa/devjin/fe-react/src/ClientApp/src/App.js":"3","/home/khoa/devjin/fe-react/src/ClientApp/src/store/reduxStore.js":"4","/home/khoa/devjin/fe-react/src/ClientApp/src/Theme.js":"5","/home/khoa/devjin/fe-react/src/ClientApp/src/authProvider.js":"6","/home/khoa/devjin/fe-react/src/ClientApp/src/store/reducers/strutture.reducer.js":"7","/home/khoa/devjin/fe-react/src/ClientApp/src/store/reducers/user.reducer.js":"8","/home/khoa/devjin/fe-react/src/ClientApp/src/store/sagas/root.sagas.js":"9","/home/khoa/devjin/fe-react/src/ClientApp/src/components/pages/HomePage.js":"10","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaRouter.js":"11","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtenteRouter.js":"12","/home/khoa/devjin/fe-react/src/ClientApp/src/components/registrazione/RegistrazioneStruttura.js":"13","/home/khoa/devjin/fe-react/src/ClientApp/src/store/sagas/strutture.sagas.js":"14","/home/khoa/devjin/fe-react/src/ClientApp/src/store/sagas/users.sagas.js":"15","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEvento.js":"16","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaProvider.js":"17","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaLayout.js":"18","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditDati.js":"19","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditImages.js":"20","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditCalendari.js":"21","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaHome.js":"22","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaListaUtenti.js":"23","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEventoPrenotazione.js":"24","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaListaLocations.js":"25","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditLocation.js":"26","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaListaTipologiaLezioni.js":"27","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditTipologiaLezione.js":"28","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaListaTipologiaAbbonamenti.js":"29","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditTipologiaAbbonamento.js":"30","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtenteLayout.js":"31","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtenteProfilo.js":"32","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtentePrenotazioni.js":"33","/home/khoa/devjin/fe-react/src/ClientApp/src/components/registrazione/RegisterStrutturaStep1.js":"34","/home/khoa/devjin/fe-react/src/ClientApp/src/components/registrazione/RegisterStrutturaStep2.js":"35","/home/khoa/devjin/fe-react/src/ClientApp/src/components/registrazione/RegisterStrutturaStep3.js":"36","/home/khoa/devjin/fe-react/src/ClientApp/src/store/actions/strutture.actions.js":"37","/home/khoa/devjin/fe-react/src/ClientApp/src/store/actions/user.actions.js":"38","/home/khoa/devjin/fe-react/src/ClientApp/src/store/selectors/strutture.selectors.js":"39","/home/khoa/devjin/fe-react/src/ClientApp/src/store/selectors/user.selectors.js":"40","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/StrutturaDettaglioUtente.js":"41","/home/khoa/devjin/fe-react/src/ClientApp/src/components/commons/R2DHeader.js":"42","/home/khoa/devjin/fe-react/src/ClientApp/src/store/sagas/sagas.utils.js":"43","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/R2DClienteEditItem.js":"44","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/IndirizzoEdit.js":"45","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/OrarioAperturaEdit.js":"46","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/ImageGalleryEdit.js":"47","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaCalendarAdmin.js":"48","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaOrarioView.js":"49","/home/khoa/devjin/fe-react/src/ClientApp/src/components/commons/R2DLoader.js":"50","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtenteStruttureSeguite.js":"51","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtentePrenotazioneFilter.js":"52","/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.api.js":"53","/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.images.api.js":"54","/home/khoa/devjin/fe-react/src/ClientApp/src/api/users.api.js":"55","/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.eventi.api.js":"56","/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.utenti.api.js":"57","/home/khoa/devjin/fe-react/src/ClientApp/src/components/editEvento/R2DEditEventoForm.js":"58","/home/khoa/devjin/fe-react/src/ClientApp/src/components/commons/sidenav/R2DSideNav.js":"59","/home/khoa/devjin/fe-react/src/ClientApp/src/config.js":"60","/home/khoa/devjin/fe-react/src/ClientApp/src/api/apiUtils.js":"61","/home/khoa/devjin/fe-react/src/ClientApp/src/components/commons/sidenav/R2DSideNavHeader.js":"62","/home/khoa/devjin/fe-react/src/ClientApp/src/applicationInsights.js":"63","/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.images.api.mock.js":"64","/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.api.mock.js":"65","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/GiornoAperturaEdit.js":"66","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/PrenotazioniUtenteSection.js":"67","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/CertificatiUtenteSection.js":"68","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/AbbonamentiUtenteSection.js":"69","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaContattiView.js":"70","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaMap.js":"71","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtenteProfiloEdit.js":"72","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/R2DCalendariContainer.js":"73","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/PrenotazioniUtenteList.js":"74","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/AbbonamentoUtenteAdd.js":"75","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/CertificatoUtenteAdd.js":"76","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/AbbonamentiUtenteList.js":"77","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/CertificatiUtenteList.js":"78","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/PrenotazioneUtenteAdd.js":"79","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaCalendarView.js":"80","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtentePrenotazioniList.js":"81"},{"size":1339,"mtime":1626792420275,"results":"82","hashOfConfig":"83"},{"size":4021,"mtime":1626792420275,"results":"84","hashOfConfig":"83"},{"size":1451,"mtime":1626792420191,"results":"85","hashOfConfig":"83"},{"size":1512,"mtime":1626792420335,"results":"86","hashOfConfig":"83"},{"size":724,"mtime":1626792420191,"results":"87","hashOfConfig":"83"},{"size":1914,"mtime":1626792420271,"results":"88","hashOfConfig":"83"},{"size":6166,"mtime":1626792420335,"results":"89","hashOfConfig":"83"},{"size":2533,"mtime":1626792420335,"results":"90","hashOfConfig":"83"},{"size":785,"mtime":1626792420335,"results":"91","hashOfConfig":"83"},{"size":3132,"mtime":1627934750656,"results":"92","hashOfConfig":"83"},{"size":6815,"mtime":1626792420275,"results":"93","hashOfConfig":"83"},{"size":1351,"mtime":1626792420275,"results":"94","hashOfConfig":"83"},{"size":4738,"mtime":1626792420271,"results":"95","hashOfConfig":"83"},{"size":8381,"mtime":1626792420335,"results":"96","hashOfConfig":"83"},{"size":5391,"mtime":1627997841739,"results":"97","hashOfConfig":"83"},{"size":4323,"mtime":1627045761393,"results":"98","hashOfConfig":"83"},{"size":1562,"mtime":1626792420275,"results":"99","hashOfConfig":"83"},{"size":763,"mtime":1626792420271,"results":"100","hashOfConfig":"83"},{"size":2082,"mtime":1627941749184,"results":"101","hashOfConfig":"83"},{"size":2884,"mtime":1627400670830,"results":"102","hashOfConfig":"83"},{"size":2812,"mtime":1626792420271,"results":"103","hashOfConfig":"83"},{"size":10429,"mtime":1628004974148,"results":"104","hashOfConfig":"83"},{"size":7718,"mtime":1626792420271,"results":"105","hashOfConfig":"83"},{"size":11016,"mtime":1627314814677,"results":"106","hashOfConfig":"83"},{"size":4374,"mtime":1626792420271,"results":"107","hashOfConfig":"83"},{"size":8909,"mtime":1626792420271,"results":"108","hashOfConfig":"83"},{"size":4663,"mtime":1626792420271,"results":"109","hashOfConfig":"83"},{"size":12859,"mtime":1626792420271,"results":"110","hashOfConfig":"83"},{"size":4577,"mtime":1626792420271,"results":"111","hashOfConfig":"83"},{"size":9275,"mtime":1626792420271,"results":"112","hashOfConfig":"83"},{"size":763,"mtime":1626792420275,"results":"113","hashOfConfig":"83"},{"size":1008,"mtime":1627134777498,"results":"114","hashOfConfig":"83"},{"size":7639,"mtime":1627942841956,"results":"115","hashOfConfig":"83"},{"size":8017,"mtime":1626792420271,"results":"116","hashOfConfig":"83"},{"size":11874,"mtime":1626792420271,"results":"117","hashOfConfig":"83"},{"size":4058,"mtime":1626792420271,"results":"118","hashOfConfig":"83"},{"size":5622,"mtime":1626792420275,"results":"119","hashOfConfig":"83"},{"size":3088,"mtime":1626792420275,"results":"120","hashOfConfig":"83"},{"size":1503,"mtime":1626792420335,"results":"121","hashOfConfig":"83"},{"size":1521,"mtime":1626792420335,"results":"122","hashOfConfig":"83"},{"size":7169,"mtime":1626902514326,"results":"123","hashOfConfig":"83"},{"size":6446,"mtime":1626875645029,"results":"124","hashOfConfig":"83"},{"size":454,"mtime":1626792420335,"results":"125","hashOfConfig":"83"},{"size":4682,"mtime":1626792420271,"results":"126","hashOfConfig":"83"},{"size":4471,"mtime":1627315232849,"results":"127","hashOfConfig":"83"},{"size":9799,"mtime":1628076158216,"results":"128","hashOfConfig":"83"},{"size":9983,"mtime":1627941749184,"results":"129","hashOfConfig":"83"},{"size":6241,"mtime":1627040835136,"results":"130","hashOfConfig":"83"},{"size":4636,"mtime":1628018540049,"results":"131","hashOfConfig":"83"},{"size":1115,"mtime":1627935399892,"results":"132","hashOfConfig":"83"},{"size":7228,"mtime":1627936860991,"results":"133","hashOfConfig":"83"},{"size":4192,"mtime":1626792420275,"results":"134","hashOfConfig":"83"},{"size":3548,"mtime":1626792420271,"results":"135","hashOfConfig":"83"},{"size":2356,"mtime":1626792420271,"results":"136","hashOfConfig":"83"},{"size":6330,"mtime":1627999140320,"results":"137","hashOfConfig":"83"},{"size":9605,"mtime":1626792420271,"results":"138","hashOfConfig":"83"},{"size":3310,"mtime":1626792420271,"results":"139","hashOfConfig":"83"},{"size":27807,"mtime":1626792420271,"results":"140","hashOfConfig":"83"},{"size":4058,"mtime":1626792420271,"results":"141","hashOfConfig":"83"},{"size":1065,"mtime":1626792420275,"results":"142","hashOfConfig":"83"},{"size":1373,"mtime":1626792420271,"results":"143","hashOfConfig":"83"},{"size":1974,"mtime":1626792420271,"results":"144","hashOfConfig":"83"},{"size":477,"mtime":1626792420271,"results":"145","hashOfConfig":"83"},{"size":925,"mtime":1626792420271,"results":"146","hashOfConfig":"83"},{"size":4529,"mtime":1626792420271,"results":"147","hashOfConfig":"83"},{"size":8442,"mtime":1628089817478,"results":"148","hashOfConfig":"83"},{"size":5473,"mtime":1626966301865,"results":"149","hashOfConfig":"83"},{"size":3501,"mtime":1626962984465,"results":"150","hashOfConfig":"83"},{"size":3450,"mtime":1626961228537,"results":"151","hashOfConfig":"83"},{"size":1099,"mtime":1626792420271,"results":"152","hashOfConfig":"83"},{"size":1586,"mtime":1627314814677,"results":"153","hashOfConfig":"83"},{"size":10642,"mtime":1627936860991,"results":"154","hashOfConfig":"83"},{"size":3141,"mtime":1626792420271,"results":"155","hashOfConfig":"83"},{"size":6172,"mtime":1626969732129,"results":"156","hashOfConfig":"83"},{"size":11615,"mtime":1626956193170,"results":"157","hashOfConfig":"83"},{"size":5706,"mtime":1626792420275,"results":"158","hashOfConfig":"83"},{"size":13559,"mtime":1626968662059,"results":"159","hashOfConfig":"83"},{"size":12769,"mtime":1626968662059,"results":"160","hashOfConfig":"83"},{"size":15905,"mtime":1626964748646,"results":"161","hashOfConfig":"83"},{"size":6288,"mtime":1626792420271,"results":"162","hashOfConfig":"83"},{"size":6333,"mtime":1627936720104,"results":"163","hashOfConfig":"83"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},"wqbz00",{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"166"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"166"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"166"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"166"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"166"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"166"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"166"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"166"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"166"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"166"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"166"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"166"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"166"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"166"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"166"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"166"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"166"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"166"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"166"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"166"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"166"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"166"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"166"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"166"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"166"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"166"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"166"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"166"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"166"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"277","usedDeprecatedRules":"166"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"166"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"287","messages":"288","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"166"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"166"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"166"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"166"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"166"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"166"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"166"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"166"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"166"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"166"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"166"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"166"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"339","messages":"340","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"166"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"166"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"166"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"166"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"166"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"166"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"166"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"166"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"166"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"166"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":"375","usedDeprecatedRules":"166"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"166"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"166"},"/home/khoa/devjin/fe-react/src/ClientApp/src/index.js",[],["382","383"],"/home/khoa/devjin/fe-react/src/ClientApp/src/registerServiceWorker.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/App.js",["384"],"import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { ThemeProvider } from '@material-ui/styles';\nimport HomePage from './components/pages/HomePage';\nimport StrutturaRouter from './components/struttura/StrutturaRouter'\nimport Theme from './Theme';\n\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport itLocale from \"date-fns/locale/it\";\nimport UtenteRouter from './components/utente/UtenteRouter'\n\nimport AzureAD from 'react-aad-msal';\nimport { authProvider } from './authProvider'\nimport { getStore } from './store/reduxStore'\nimport RegistrazioneStruttura from './components/registrazione/RegistrazioneStruttura';\n\n\nexport default () => (\n  <ThemeProvider theme={Theme}>\n    <MuiPickersUtilsProvider utils={DateFnsUtils} locale={itLocale}>\n      {/* Primo livello di Routing per distinguere la Home (landing) dalle pagine delle struttura */}\n      <Switch>\n        <Route exact path='/'>\n          <HomePage />\n        </Route>\n        <Route exact path='/registrazione'>\n          <AzureAD forceLogin provider={authProvider} reduxStore={getStore()}>\n            <RegistrazioneStruttura />\n          </AzureAD>\n        </Route>\n        <Route path='/me/'>\n          <UtenteRouter />\n        </Route>\n        <Route path='/:nomeStruttura' >\n          <StrutturaRouter />\n        </Route>\n      </Switch>\n    </MuiPickersUtilsProvider>\n  </ThemeProvider>\n);\n","/home/khoa/devjin/fe-react/src/ClientApp/src/store/reduxStore.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/Theme.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/authProvider.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/store/reducers/strutture.reducer.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/store/reducers/user.reducer.js",["385"],"import produce from \"immer\"\nimport * as log from 'loglevel';\n\n// import {USER_CHANGE_STRUTTURA_CORRENTE_PENDING, USER_CHANGE_STRUTTURA_CORRENTE_SUCCESS, USER_CHANGE_STRUTTURA_CORRENTE_ERROR} from '../actions/user.actions'\nimport {\n\tR2D_LOGIN_STARTED, R2D_USER_LOOKUPS_COMPLETED, R2D_LOGOUT_SUCCESS,\n\tR2D_FOLLOW_STRUTTURA_SUCCESS, R2D_UNFOLLOW_STRUTTURA_SUCCESS\n} from '../actions/user.actions'\n\nconst _logger = log.getLogger('UserReducer');\n\n/*\nREDUCER per la gestione dello stato dell'utente\n*/\nconst initialState = {\n\tcurrentUser: null,\n\tuserIsAuthenticated: false,\n\tlookupInProgress: false,\n\t//idStrutturaAttiva: 10, //Rappresenta la struttura selezionata nella SideNav (non è detto che sia quella attualmente caricata) (per ora gestiamo una sola struttura)\n}\n\nfunction UserReducer(state = initialState, action) {\n\t//_logger.debug(`UserReduce - state: ${JSON.stringify(state)} - action: ${JSON.stringify(action)}`);\n\tswitch (action.type) {\n\t\tcase R2D_LOGIN_STARTED: {\n\t\t\treturn produce(state, draftState => {\n\t\t\t\tdraftState.userIsAuthenticated = true;\n\t\t\t\tdraftState.lookupInProgress = true;\n\t\t\t\tdraftState.currentUser = action.payload;\n\t\t\t});\n\t\t}\n\t\tcase R2D_USER_LOOKUPS_COMPLETED: {\n\t\t\treturn produce(state, draftState => {\n\t\t\t\tdraftState.lookupInProgress = false;\n\t\t\t\tdraftState.currentUser = action.payload;\n\t\t\t});\n\t\t}\n\t\tcase R2D_LOGOUT_SUCCESS: {\n\t\t\treturn produce(state, draftState => {\n\t\t\t\tdraftState.userIsAuthenticated = false;\n\t\t\t\tdraftState.lookupInProgress = false;\n\t\t\t\tdraftState.currentUser = null;\n\t\t\t\t//draftState.idStrutturaAttiva = -1;\n\t\t\t});\n\t\t}\n\t\tcase R2D_FOLLOW_STRUTTURA_SUCCESS: {\n\t\t\tif (state?.currentUser?.struttureSeguite) {\n\t\t\t\treturn produce(state, draftState => {\n\t\t\t\t\tdraftState.currentUser.struttureSeguite.push(action.payload);\n\t\t\t\t})\n\t\t\t} else return state; //se non esiste la struttura base c'è qualcosa di anomale, non mutiamo lo stato\n\t\t}\n\t\tcase R2D_UNFOLLOW_STRUTTURA_SUCCESS: {\n\t\t\tif (state?.currentUser?.struttureSeguite) {\n\t\t\t\tlet index = state.currentUser.struttureSeguite.indexOf(e => e.IdCliente === action.payload.idStruttura);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\treturn produce(state, draftState => {\n\t\t\t\t\t\tdraftState.currentUser.struttureSeguite.splice(index, 1); //rimuoviamo la struttura seguita dall'array\n\t\t\t\t\t});\n\t\t\t\t} else return state; //se non troviamo la struttura  c'è qualcosa di anomale, non mutiamo lo stato\n\t\t\t} else return state; //se non esiste la struttura base c'è qualcosa di anomale, non mutiamo lo stato\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default UserReducer","/home/khoa/devjin/fe-react/src/ClientApp/src/store/sagas/root.sagas.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/pages/HomePage.js",["386","387"],"import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TextField, Typography, Box, Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: \"center\",\n    display: \"block\",\n    padding: \"10px\",\n    width: \"450px\",\n    backgroundColor: \"white\",\n  },\n  boxPadding: {\n    padding: \"0px 25px\",\n  },\n  logo: {\n    width: \"310px\",\n    // height: '180px',\n    // margin: \"70px 0\",\n    marginBottom: \"20px\",\n  },\n  typo: {\n    // margin: \"30px 0\",\n  },\n  typobold: {\n    fontWeight: \"500\",\n  },\n  form: {\n    display: \"inline-grid\",\n    width: \"70%\",\n    marginBottom: \"20px\",\n  },\n  button: {\n    color: \"white\",\n    backgroundColor: \"#8ac543\",\n  },\n}));\n\nexport default (props) => {\n  const classes = useStyles();\n\n  const handleFormSubmmit = async (event) => {\n    event.preventDefault();\n    // console.log(event.target[0].value);\n  };\n\n  return (\n    <Container className={classes.root}>\n      <Box justifyContent=\"space-between\">\n        <img className={classes.logo} src=\"/images/logo.png\" alt=\"logo\" />\n      </Box>\n      <Box className={classes.boxPadding}>\n        <Typography className={classes.typobold} variant=\"h5\" gutterBottom>\n          Benvenuto!\n        </Typography>\n        <Typography className={classes.typo} variant=\"body2\" gutterBottom>\n          Ready2Do è il nuovissimo sistema di prenotazione online per la tua\n          struttura sportiva con 3 punti di forza principali:\n        </Typography>\n        <br />\n        <Typography className={classes.typo} variant=\"body2\" gutterBottom>\n          1 - Puoi utilizzarlo in maniera gratuita senza limiti di tempo o\n          iscritti.\n        </Typography>\n        <br />\n        <Typography className={classes.typo} variant=\"body2\" gutterBottom>\n          2- Il suo funzionamento è tutto Web Based, non dovrai installare alcun\n          complicato Softrawe, funziona tutto da Browser\n        </Typography>\n        <br />\n        <Typography className={classes.typo} variant=\"body2\" gutterBottom>\n          3- È l'unico sistema di prenotazione che aumenta la visibilità della\n          tua attività mentre ti fa risparmiare tempo e personale.\n        </Typography>\n        <br />\n        <Typography className={classes.typobold} variant=\"body2\" gutterBottom>\n          Inserisci la tua Email per essere avvisato appena sarà possibile\n          iscriversi!\n        </Typography>\n        <br />\n        <form\n          className={classes.form}\n          onSubmit={handleFormSubmmit}\n          noValidate\n          autoComplete=\"off\"\n        >\n          <TextField\n            className={classes.typo}\n            variant=\"outlined\"\n            label=\"Email\"\n          ></TextField>\n          <br />\n          <Button\n            className={classes.button}\n            size=\"large\"\n            variant=\"contained\"\n            type=\"submit\"\n          >\n            Accedi\n          </Button>\n        </form>\n      </Box>\n    </Container>\n  );\n};\n//export default connect()(HomePage);\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaRouter.js",["388"],"import log from 'loglevel';\nimport React from 'react'\nimport { Switch, Route, useRouteMatch, useParams } from 'react-router-dom'\nimport AzureAD from 'react-aad-msal';\nimport { useSelector } from 'react-redux'\nimport { getStore } from '../../store/reduxStore'\nimport { StruttureSelectors } from '../../store/selectors/strutture.selectors'\nimport { authProvider } from '../../authProvider'\nimport StrutturaEvento from './StrutturaEvento';\nimport StrutturaProvider from '../struttura/StrutturaProvider'\nimport StrutturaLayout from './StrutturaLayout';\nimport StrutturaEditDati from './StrutturaEditDati';\nimport StrutturaEditImages from './StrutturaEditImages';\nimport StrutturaEditCalendari from './StrutturaEditCalendari';\nimport StrutturaHome from './StrutturaHome';\nimport StrutturaListaUtenti from './StrutturaListaUtenti';\nimport StrutturaDettaglioUtente from './dettaglio-utente/StrutturaDettaglioUtente';\nimport StrutturaEventoPrenotazione from './StrutturaEventoPrenotazione';\nimport StrutturaListaLocations from './StrutturaListaLocations';\nimport StrutturaEditLocation from './StrutturaEditLocation';\nimport StrutturaListaTipologiaLezioni from './StrutturaListaTipologiaLezioni'\nimport StrutturaEditTipologiaLezione from './StrutturaEditTipologiaLezione'\nimport StrutturaListaTipologiaAbbonamenti from './StrutturaListaTipologiaAbbonamenti'\nimport StrutturaEditTipologiaAbbonamento from './StrutturaEditTipologiaAbbonamento'\n\n\nconst _logger = log.getLogger('StrutturaRouter');\n\n\nconst StrutturaRouter = (props) => {\n\n    _logger.debug(`StrutturaRouter props: ${JSON.stringify(props)}`);\n    let { path, url } = useRouteMatch();\n    let { nomeStruttura } = useParams();\n    _logger.debug(`StrutturaRouter - path: ${path}, nomeStruttura: ${JSON.stringify(nomeStruttura)}`);\n\n    //const nomeStruttura = routeParams.nomeStruttura;\n    const anagraficaStruttura = useSelector(StruttureSelectors.getAnagrafica);\n    const orarioAperturaStruttura = useSelector(StruttureSelectors.getOrarioApertura);\n    const idStruttura = useSelector(StruttureSelectors.getIdStrutturaCorrente);\n\n    return (\n        <StrutturaLayout urlStruttura={nomeStruttura}>\n            <StrutturaProvider nomeStruttura={nomeStruttura}>\n                <Switch>\n                    <Route exact path={`${path}/eventi/:idEvento/prenotezione`}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaEventoPrenotazione idStruttura={idStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={`${path}/eventi/:idEvento`}>\n                        <StrutturaEvento idStruttura={idStruttura} />\n                    </Route>\n                    <Route exact path={[`${path}/edit`, `${path}/dati`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaEditDati anagraficaStruttura={anagraficaStruttura} orarioAperturaStruttura={orarioAperturaStruttura}/>\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={[`${path}/images`, `${path}/immagini`, `${path}/gallery`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaEditImages idStruttura={idStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={[`${path}/calendari`, `${path}/schedules`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaEditCalendari idStruttura={idStruttura} urlRoute={nomeStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={[`${path}/utenti/:idUtente`, `${path}/users/:idUtente`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaDettaglioUtente idStruttura={idStruttura} urlRoute={nomeStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={[`${path}/utenti`, `${path}/users`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaListaUtenti idStruttura={idStruttura} urlRoute={nomeStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={[`${path}/locations/:idLocation`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaEditLocation idStruttura={idStruttura} urlRoute={nomeStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={[`${path}/locations`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaListaLocations idStruttura={idStruttura} urlRoute={nomeStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={[`${path}/lezioni/:idTipoLezione`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaEditTipologiaLezione idStruttura={idStruttura} urlRoute={nomeStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={[`${path}/lezioni`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaListaTipologiaLezioni idStruttura={idStruttura} urlRoute={nomeStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={[`${path}/abbonamenti/:idTipoAbonamento`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaEditTipologiaAbbonamento idStruttura={idStruttura} urlRoute={nomeStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route exact path={[`${path}/abbonamenti`]}>\n                        <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                            <StrutturaListaTipologiaAbbonamenti idStruttura={idStruttura} urlRoute={nomeStruttura} />\n                        </AzureAD>\n                    </Route>\n                    <Route>\n                        <StrutturaHome anagraficaStruttura={anagraficaStruttura}></StrutturaHome>\n                    </Route>\n                </Switch>\n            </StrutturaProvider>\n        </StrutturaLayout>\n    )\n}\n\n\nexport default StrutturaRouter;","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtenteRouter.js",["389","390","391"],"import log from 'loglevel';\nimport React from 'react'\nimport { Switch, Route, useRouteMatch, useParams } from 'react-router-dom'\nimport AzureAD from 'react-aad-msal';\nimport { getStore } from '../../store/reduxStore'\nimport { authProvider } from '../../authProvider'\nimport UtenteLayout from './UtenteLayout';\nimport UtenteProfilo from './UtenteProfilo';\nimport {UtentePrenotazioni} from './UtentePrenotazioni';\n\nconst _logger = log.getLogger('UtenteRouter');\n\n\nexport default (props) => {\n\n    _logger.debug(`UtenteRouter props: ${JSON.stringify(props)}`);\n    //let { path, url } = useRouteMatch();\n    // let { nomeStruttura } = useParams();\n    // _logger.debug(`UtenteRouter - path: ${path}, nomeStruttura: ${JSON.stringify(nomeStruttura)}`);\n\n    return (\n        <UtenteLayout >\n            <Switch>\n                <Route exact path={`/me/profilo`}>\n                    <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                        <UtenteProfilo />\n                    </AzureAD>\n                </Route>\n                <Route exact path={`/me/prenotazioni`}>\n                    <AzureAD forceLogin provider={authProvider} reduxStore={getStore()} >\n                        <UtentePrenotazioni />\n                    </AzureAD>\n                </Route>\n            </Switch>\n        </UtenteLayout>\n    )\n}\n\n\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/registrazione/RegistrazioneStruttura.js",["392"],"import { CircularProgress, Container, Paper, StepLabel, Typography } from '@material-ui/core';\nimport Step from '@material-ui/core/Step';\nimport Stepper from '@material-ui/core/Stepper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport log from 'loglevel';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect, useHistory } from 'react-router';\nimport { UserSelectors } from '../../store/selectors/user.selectors';\nimport R2DHeader from '../commons/R2DHeader';\nimport RegisterStrutturaStep1 from './RegisterStrutturaStep1';\nimport RegisterStrutturaStep2 from './RegisterStrutturaStep2';\nimport RegisterStrutturaStep3 from './RegisterStrutturaStep3';\n\n\nconst _logger = log.getLogger('RegistrazioneStruttura');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    rootPaper: {\n        padding: 30\n    },\n    title: {\n        textAlign: \"center\",\n        fontSize: '1.5rem',\n        fontWeight: 500\n    },\n    backButton: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\nexport default (props) => {\n    const classes = useStyles();\n    const history = useHistory();\n\n    const idStruttureGestite = useSelector(UserSelectors.getIdStruttureOwned);\n    const struttureGestite = useSelector(UserSelectors.getStruttureOwned);\n    const [currentStep, setCurrentStep] = React.useState(0);\n    const [datiStruttura, setDatiStruttura] = React.useState({});\n    const titles = ['Benvenuto! Completa la tua registrazione in pochi semplice passi',\n        'Gli ultimi dati ed abbiamo finito',\n        'Controlla i dati inseriti, clicca SALVA ed inizia subito ad usare Ready2Do!'];\n\n    // React.useEffect(() => {\n    //     counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\n    //   }, [counter]);\n\n\n    const handleNext = (step, data) => {\n        _logger.debug(`Handling step ${step} submit. Data: ${JSON.stringify(data)}`);\n        if (step === 0 || step === 1) {\n            let newState = { ...datiStruttura, ...data };\n            setDatiStruttura(newState);\n            setCurrentStep(step + 1);\n            _logger.debug(`Current state: ${JSON.stringify(newState)}`);\n        } else if (step === 2) {\n            //TODO: Gestire la conferma\n        }\n    }\n\n    const handleBack = (step) => {\n        // eslint-disable-next-line default-case\n        switch (step) {\n            case 0:\n                history.push('/');\n                break;\n            case 1:\n                setCurrentStep(0);\n                break;\n            case 2:\n                setCurrentStep(1);\n                break;\n        }\n    }\n\n    const renderCurrentStep = () => {\n        // eslint-disable-next-line default-case\n        switch (currentStep) {\n            case 0:\n                return (<RegisterStrutturaStep1 onDataSubmittedHandler={handleNext} onBack={handleBack} datiStruttura={datiStruttura}/>);\n            case 1:\n                return (<RegisterStrutturaStep2 onDataSubmittedHandler={handleNext} onBack={handleBack} datiStruttura={datiStruttura}/>);\n            case 2:\n                return (<RegisterStrutturaStep3 onDataSubmittedHandler={handleNext} onBack={handleBack} datiStruttura={datiStruttura}/>);\n        }\n    }\n\n    const renderRegistrationPage = () => {\n        return (\n            <Container width=\"900\">\n                <R2DHeader urlStruttura={props.urlStruttura}></R2DHeader>\n                <Paper className={classes.rootPaper}>\n                    <Typography className={classes.title}>{titles[currentStep]}</Typography>\n                    <Stepper activeStep={currentStep} alternativeLabel>\n                        <Step key={0}>\n                            <StepLabel>Dati identificativi della Struttura</StepLabel>\n                        </Step>\n                        <Step key={1}>\n                            <StepLabel>Recapiti della Struttura</StepLabel>\n                        </Step>\n                        <Step key={2}>\n                            <StepLabel>Riepilogo e conferma</StepLabel>\n                        </Step>\n                    </Stepper>\n                    {renderCurrentStep()}\n                </Paper>\n            </Container>\n        )\n    }\n\n    const renderRedirectToStruttura = () => {\n        return (\n\n            Array.isArray(struttureGestite) && struttureGestite.length > 0 ?\n                <Redirect to={`/${struttureGestite[0].urlRoute}`} push={false} /> :\n                <CircularProgress />\n        )\n    }\n\n    return (\n        (Array.isArray(idStruttureGestite) && idStruttureGestite.length > 0) ? renderRedirectToStruttura() : renderRegistrationPage()\n    )\n\n}\n","/home/khoa/devjin/fe-react/src/ClientApp/src/store/sagas/strutture.sagas.js",["393"],"import { call, put, takeEvery, select } from 'redux-saga/effects'\nimport * as log from 'loglevel';\nimport {StruttureAPI} from '../../api/strutture.api'\nimport {StruttureImagesAPI} from '../../api/strutture.images.api'\nimport {StruttureSelectors} from '../selectors/strutture.selectors'\nimport {UserSelectors} from '../selectors/user.selectors'\nimport {StuttureActionTypes, StruttureActionsCreator} from \"../actions/strutture.actions\";\nimport {getAccessToken} from './sagas.utils'\n\nconst _logger = log.getLogger(\"strutture.sagas\");\n\n\nexport function* watchFetchStruttura(){\n    //NOTA: take every passa l'action al worker\n    yield takeEvery(StuttureActionTypes.FETCH_STRUTTURA_BYNAME, fetchStrutturaByName);\n}\n\nexport function* watchUpdateStrutturaAnagraficaProp(){\n    //NOTA: take every passa l'action al worker\n    yield takeEvery(StuttureActionTypes.STRUTTURA_CHANGE_ANAGRAFICA_PROP, updateStrutturaAnagraficaProp);\n}\n\nexport function* watchUpdateStrutturaOrarioApertura(){\n    //NOTA: take every passa l'action al worker\n    yield takeEvery(StuttureActionTypes.STRUTTURA_CHANGE_ORARIO_APERTURA, updateStrutturaOrarioApertura);\n}\n\nexport function* watchUpdateStrutturaImage(){\n    yield takeEvery(StuttureActionTypes.STRUTTURA_CHANGE_IMAGE, updateStrutturaImage);\n}\n\nexport function* watchRemoveStrutturaImage(){\n    yield takeEvery(StuttureActionTypes.STRUTTURA_REMOVE_IMAGE, removeStrutturaImage);\n}\n\nexport function* watchFetchStrutturaImages(){\n    yield takeEvery(StuttureActionTypes.STRUTTURA_FETCH_IMAGES, fetchStrutturaImages);\n}\n\n\nexport function* fetchStrutturaByName(action){\n    //Nota: il parametro action viene valorizzato con l'action catturata dal watcher (dal metodo takeEvery)\n    try{\n        const nomeStruttura = action.payload;\n        //Se è già stata caricata l'anagrafica per la struttura non invochiamo l'API\n        const anagrafica = yield select(StruttureSelectors.getAnagrafica);\n        if(!anagrafica || !anagrafica.nome || anagrafica.nome !== nomeStruttura){\n            _logger.debug(`fetchStrutturaByName(${nomeStruttura}) - Invocazione API per recupero Anagrafica`);\n            const response = yield call(StruttureAPI.GetStrutturaByName, nomeStruttura);\n            _logger.debug(`fetchStrutturaByName(${nomeStruttura}) - returned: ${JSON.stringify(response.data)}`);\n            if(response){\n                yield put(StruttureActionsCreator.fetchStrutturaSuccess(response.data));\n            }else{\n                yield put(StruttureActionsCreator.fetchStrutturaError(response.data));\n            }\n        }else{\n            _logger.debug(`fetchStrutturaByName(${nomeStruttura}) - Anagrafica già risolta, API non invocata`);\n        }    \n    }catch(error)\n    {\n        _logger.error(error);\n        yield put(StruttureActionsCreator.fetchStrutturaError(error));\n    }\n}\n\n/* */\nexport function* updateStrutturaAnagraficaProp(action){\n    _logger.debug(`BEGIN updateStrutturaAnagraficaProp. Action: ${JSON.stringify(action)}`);\n    const propName = action.payload.propName;\n    const propValue = action.payload.propValue;\n    try{        \n        //Recuperiamo l'anagrafica corrente (pre modifica dallo store Redux)\n        const anagrafica  = yield select(StruttureSelectors.getAnagrafica);\n        const token = getAccessToken();\n        _logger.debug(`Recuperata anagrafica struttura dallo store. ${JSON.stringify(anagrafica)}`);\n        //Applichiamo la modifica alla specifica proprietà modificata\n        anagrafica[propName] = propValue;\n        _logger.debug(`Anagrafica patched con il nuovo valore per la proprieta [${propName}]. ${JSON.stringify(anagrafica)}`);\n        _logger.debug(`Invocazione StruttureAPI.UpdateStrutturaAnagrafica per update prop: ${propName} -newValue: ${propValue}`);\n        //Invochiamo l'API per aggiornare l'intera anagrafica\n        const response = yield call(StruttureAPI.UpdateStrutturaAnagrafica, anagrafica, token)\n        return response;\n    }catch(error){\n        _logger.error(`Errore durante l'invocazione di updateStrutturaAnagraficaProp. action: ${action} - ERROR: ${error}`);\n        yield put(StruttureActionsCreator.updateStrutturaPropError, propName, propValue, error);\n    }\n}\n\nexport function* updateStrutturaOrarioApertura(action){\n    _logger.debug(`BEGIN updateStrutturaOrarioApertura. Action: ${JSON.stringify(action)}`);\n    const newOrario = action.payload.value;\n    try{\n        const idStruttura  = yield select(StruttureSelectors.getIdStrutturaCorrente);\n        const token = getAccessToken();\n        //Invochiamo l'API per aggiornare l'orario\n        yield call(StruttureAPI.UpdateStrutturaOrarioApertura, idStruttura, newOrario, token);\n        yield put(StruttureActionsCreator.updateStrutturaOrarioAperturaSuccess(newOrario));\n    }catch(error){\n        _logger.error(`Errore durante l'invocazione di updateStrutturaOrarioApertura. action: ${action} - ERROR: ${error}`);\n        yield put(StruttureActionsCreator.updateStrutturaOrarioAperturaError(newOrario, error));\n    }\n}\n\n\nexport function* updateStrutturaImage(action){\n    _logger.debug(`BEGIN updateStrutturaImage. Action: ${JSON.stringify(action)}`);\n    try{\n        const idStruttura  = yield select(StruttureSelectors.getIdStrutturaCorrente);\n        _logger.debug(`IdStruttura: ${idStruttura}`);\n        const token = yield select(UserSelectors.getAccessToken);\n        const tipoImmagine = action.payload.imageType;\n        const file = action.payload.file;\n        const imageId = action.payload.imageKey ?? -1;\n        const ordinamento = action.payload.imageOrder ?? -1;\n        //Invochiamo l'API per caricare l'immagine\n        const response = yield call(StruttureImagesAPI.UpdateStrutturaImage, idStruttura, tipoImmagine, file, imageId, ordinamento, token);\n        yield put(StruttureActionsCreator.updateStrutturaImmagineSuccess(response.data));\n        _logger.debug(`Caricata immagine. Response: ${JSON.stringify(response)}`);\n    }catch(error){\n        _logger.error(`Errore durante l'invocazione di updateStrutturaImage. action: ${action} - ERROR: ${error}`);\n        yield put(StruttureActionsCreator.updateStrutturaImmagineError(error));\n    }\n}\n\nexport function* removeStrutturaImage(action){\n    _logger.debug(`BEGIN removeStrutturaImage. Action: ${JSON.stringify(action)}`);\n    const imageId = action.payload.idImage;\n    try{\n        const idStruttura  = yield select(StruttureSelectors.getIdStrutturaCorrente);\n        const token = yield select(UserSelectors.getAccessToken);\n        _logger.debug(`IdStruttura: ${idStruttura} - imageId: ${imageId} - token: ${token}`);\n        yield call(StruttureImagesAPI.RemoveStrutturaImage, idStruttura, imageId, token);\n        yield put(StruttureActionsCreator.removeStrutturaImmagineSuccess(imageId));\n    }catch(error){\n        _logger.error(`Errore durante l'invocazione di removeStrutturaImage. action: ${action} - ERROR: ${error}`);\n        yield put(StruttureActionsCreator.removeStrutturaImmagineError(imageId, imageId));\n    }\n}\n\nexport function* fetchStrutturaImages(action){\n    _logger.debug(`BEGIN fetchStrutturaImages. Action: ${JSON.stringify(action)}`);\n    try{\n        const idStruttura  = action.payload.idStruttura;\n        _logger.debug(`IdStruttura: ${idStruttura}`);\n        // if(!idStruttura){\n        //     _logger.debug(`fetchStrutturaImages -> non è ancora stata caricata l'anagrafica, la carichiamo. Action: ${JSON.stringify(action)}`);\n        //     //Se non è ancora stata caricata l'anagrafica, la carichiamo\n        //     yield call(fetchStrutturaByName, StruttureActionsCreator.fetchStrutturaByName(action.payload.nomeStruttura));\n        // }\n        const token = yield select(UserSelectors.getAccessToken);\n        let state = yield select();\n        const tipoImmagine = action.payload ? action.payload.imageType || null : null;\n        //Invochiamo l'API per caricare le immagini\n        const response = yield call(StruttureImagesAPI.FetchStrutturaImages, idStruttura, tipoImmagine, token);\n        yield put(StruttureActionsCreator.fetchStrutturaImmaginiSuccess(response.data));\n        _logger.debug(`Recuperate immagine. Response: ${JSON.stringify(response)}`);\n    }catch(error){\n        _logger.error(`Errore durante l'invocazione di fetchStrutturaImages. action: ${action} - ERROR: ${error}`);\n        yield put(StruttureActionsCreator.fetchStrutturaImmaginiError(error));\n    }\n\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/store/sagas/users.sagas.js",["394","395"],"import { call, put, takeEvery, all } from 'redux-saga/effects'\nimport * as log from 'loglevel';\nimport { AuthenticationActions } from 'react-aad-msal';\nimport { UserActionsCreator, R2D_LOGOUT_REQUESTED, R2D_FOLLOW_STRUTTURA_REQUESTED, R2D_UNFOLLOW_STRUTTURA_REQUESTED } from '../actions/user.actions';\nimport { StruttureAPI } from '../../api/strutture.api';\nimport { UsersAPI } from '../../api/users.api';\n\nconst _logger = log.getLogger(\"users.sagas\");\n\n/**\n * Intercetta le Action di tipo AAD_LOGIN_SUCCESS\n */\nexport function* watchLoginSucces() {\n    //NOTA: take every passa l'action al worker\n    yield takeEvery(AuthenticationActions.LoginSuccess, handleLoginSuccess);\n}\n\n// export function* watchLogoutRequest() {\n//     //NOTA: take every passa l'action al worker\n//     yield takeEvery(R2D_LOGOUT_REQUESTED, handleLogoutRequest);\n// }\n\nexport function* watchFollowStrutturaRequest(){\n    yield takeEvery(R2D_FOLLOW_STRUTTURA_REQUESTED, handleFollowStrutturaRequest)\n}\n\nexport function* watchUnFollowStrutturaRequest(){\n    yield takeEvery(R2D_UNFOLLOW_STRUTTURA_REQUESTED, handleUnFollowStrutturaRequest)\n}\n\n/**\n * Riceve l'action contenente i dati dell'account ritornati da Azure AD B2C e li rimappa in un oggetto di tipo R2DUserInfo \n * dopo aver integrato le informazioni con i dati recuperati tramite chiamate alle API\n * @param {*} action : il payload è di tipo IAccountInfo\n */\nexport function* handleLoginSuccess(action) {\n    _logger.debug(`user.sagas->handleLoginSuccess(${JSON.stringify(action)})`);\n    const account = action.payload.account;\n    //Iniziamo a costruire l'oggetto R2DUserInfo\n    //ATTENZIONE: le strutture gestite le recuperiamo dall' IdToken e non dalle API\n    const strutture = account.idTokenClaims?.extension_struttureOwned?.split(\",\") ?? [];\n    let struttureOwned = [];\n    const isNewUser = account.idTokenClaims?.isNewUser ?? false;\n\n    let userInfo = {\n        id: account.accountIdentifier,\n        name: account.name,\n        givenName: account.idTokenClaims?.given_name,\n        familyName: account.idTokenClaims?.family_name,\n        email: account.idTokenClaims.emails[0],\n        isGlobalAdmin: account.idTokenClaims?.extension_isGlobalAdmin,\n        dataConfermaEmail: account.idTokenClaims?.extension_emailConfirmationDate,\n        idStruttureOwned: account.idToken.extension_struttureOwned?.split(\",\"),\n        idToken: action.payload.jwtIdToken,\n        struttureOwned: [],\n        details: {}\n    }\n    //Generiamo l'action R2D_LOGIN_STARTED\n    yield put(UserActionsCreator.r2dLoginStarted(userInfo));\n    //Se è un nuovo utente, chimiamo l'API di backend per gestire l'evento di registrazione\n    call(UsersAPI.NotifyNewUser, userInfo.accountIdentifier, userInfo.email);\n    \n    //Recuperiamo le informazioni per l'utente e le integriamo nell'oggeto userInfo\n    //1. Se l'utente è owner di almeno una struttura facciamo il lookup delle strutture\n    if (strutture && strutture.length > 0) {\n        //Facciamo il lookup di tutte le strutture gestite in parallelo\n        struttureOwned = yield all(strutture.map(idStruttura=>call(StruttureAPI.GetStrutturaById, idStruttura)));\n        // for (let idx = 0; idx < strutture.length; idx++) {\n        //     let response = yield call(StruttureAPI.GetStrutturaById, strutture[idx]);\n        //     if (response) {\n        //         struttureOwned.push({\n        //             id: strutture[idx],\n        //             nome: response.data.nome,\n        //             urlRoute: response.data.urlRoute,\n        //             ragSociale: response.data.ragSociale,\n        //             logoUrl: response.data.logoUrl\n        //         });\n        //     }\n        // }\n    }\n    //Carichiamo le strutture seguite dall'utente e gli appuntamenti futuri esistenti in parallelo\n    const [struttureSeguite, appuntamenti] = yield all([call(UsersAPI.GetCurrentUserClientiFollowedAsync), call(UsersAPI.GetCurrentUserAppuntamentiAsync) ])\n    userInfo = Object.assign({}, userInfo, { struttureOwned: struttureOwned.map(so=>so.data), struttureSeguite, appuntamenti });\n    // let response = yield call(UsersAPI.GetCurrentUserDetailsAsync, { incAppDaConf: true, incCerts: true })\n    // userInfo = Object.assign({}, userInfo, { struttureOwned, details: response.data });\n    //Generiamo un action di tipo R2D_USER_LOOKUPS_COMPLETED\n    yield put(UserActionsCreator.r2dUserLookupsCompleted(userInfo));\n}\n\n// export function* handleLogoutRequest(action){\n//     yield call(UsersAPI.lo)\n\n// }\n\n\nexport function* handleFollowStrutturaRequest(action){\n    _logger.debug(`Usersagas->handleFollowStrutturaRequest->${JSON.stringify(action)}`);\n    //Invichiamo l'API per l'associazione\n    let associazione = yield call(StruttureAPI.FollowStruttura,action.payload.idStruttura);\n    //Generiamo l'action di completamento con il dettaglio dell'associazione come payload\n    yield put(UserActionsCreator.r2dFollowStrutturaSuccess(associazione));\n}\n\n\n\nexport function* handleUnFollowStrutturaRequest(action){\n    _logger.debug(`Usersagas->handleUnFollowStrutturaRequest->${JSON.stringify(action)}`);\n    //Invichiamo l'API per l'associazione\n    yield call(StruttureAPI.UnFollowStruttura,action.payload.idStruttura);\n    //Generiamo l'action di completamento con il dettaglio dell'associazione come payload\n    yield put(UserActionsCreator.r2dUnFollowStrutturaSuccess(action.payload.idStruttura));\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEvento.js",["396"],"import log from \"loglevel\";\nimport React, { useEffect, useState } from \"react\";\nimport R2DEditEventoForm from \"../editEvento/R2DEditEventoForm\";\nimport * as qs from \"query-string\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { Paper } from \"@material-ui/core\";\nimport { authProvider } from \"../../authProvider\";\nimport { getStore } from \"../../store/reduxStore\";\n\nimport { UserSelectors } from \"../../store/selectors/user.selectors\";\nimport AzureAD, { AuthenticationState } from \"react-aad-msal\";\nimport StrutturaEventoPrenotazione from \"./StrutturaEventoPrenotazione\";\nimport { useSelector } from \"react-redux\";\nimport { StruttureEventiAPI } from \"../../api/strutture.eventi.api\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\nimport parseISO from \"date-fns/parseISO\";\n\nconst _logger = log.getLogger(\"StrutturaEvento\");\n\nexport default (props) => {\n  const idStruttura = props.idStruttura;\n  const struttureOwned = useSelector(UserSelectors.getStruttureOwned) ?? [];\n  //Recuperiamo i parametri dall'url\n  let { idEvento } = useParams();\n  const [evento, setEvento] = useState(null);\n  idEvento = isNaN(idEvento) ? -1 : idEvento;\n  //Recuperiamo la querystring\n  let { search } = useLocation();\n  const queryString = qs.parse(search) ?? {};\n  _logger.debug(\n    `StrutturaEvento -> idStruttura: ${idStruttura}, idEvento: ${idEvento}, querystring: ${JSON.stringify(\n      queryString\n    )}`\n  );\n\n  const isOwnerStruttura = () => {\n    const result = struttureOwned.findIndex((s) => s.id === idStruttura) >= 0;\n    _logger.debug(\n      `StrutturaEvento->isOwnerStruttura()->Return: ${result} - struttureOwned: ${JSON.stringify(\n        struttureOwned\n      )}`\n    );\n    return result;\n  };\n\n  useEffect(() => {\n    async function fetchEvento() {\n      _logger.debug(\n        `StrutturaEvento->useEffect()->fetchEvento() - Fetching Event (${idStruttura}, ${idEvento})`\n      );\n      let data = await StruttureEventiAPI.FetchEventoAsync(\n        idStruttura,\n        idEvento\n      );\n      _logger.debug(\n        `StrutturaEvento->useEffect->fetchEvento(): Event Fetched: ${JSON.stringify(\n          data\n        )}`\n      );\n      setEvento(data);\n    }\n    if (idStruttura > 0 && idEvento > 0) {\n      fetchEvento();\n    }\n  }, [idStruttura, idEvento]);\n\n  const renderEvento = () => {\n    // if(!evento) return null;\n    if (isOwnerStruttura()) {\n      if (\n        evento &&\n        differenceInMinutes(parseISO(new Date(), evento.dataOraInizio)) > -5\n      ) {\n        // 5 minuti\n      } else {\n        return (\n          <R2DEditEventoForm\n            idStruttura={idStruttura}\n            idEvento={idEvento} //TODO: Passare direttamente l'evento\n            dataEvento={queryString?.date}\n            idLocation={queryString?.lid ?? -1}\n            allDay={queryString?.allDay ?? false}\n          />\n        );\n      }\n    } else {\n      return (\n        <StrutturaEventoPrenotazione\n          idStruttura={idStruttura}\n          idEvento={idEvento}\n        />\n      );\n    }\n  };\n\n  /**\n   *  Il componente da visualizzare viene determinato in base alla seguente logica:\n   *  - se l'utente è autenticato ed è un gestore:\n   *      -> se siamo a meno di 10 minuti dall'inizio dell'evento viene visualizzata la form di presenza\n   *      -> se siamo ancora \"lontani\" dall'inizio viene visualizzata la form di edit dell'evento\n   *  - se l'utente non è autenticato oppure non è un gestore della struttura, viene visualizzata la pagina di registrazione / cancellazione\n   */\n  return (\n    <Paper>\n      <AzureAD provider={authProvider} reduxStore={getStore()}>\n        {({ login, logout, authenticationState, error, accountInfo }) => {\n          switch (authenticationState) {\n            case AuthenticationState.Authenticated:\n              _logger.debug(\n                `StrutturaEvento->AuthenticationState.Authenticated`\n              );\n              return renderEvento();\n            default:\n              _logger.debug(\n                `StrutturaEvento->NOT AuthenticationState.Authenticated`\n              );\n              return (\n                <StrutturaEventoPrenotazione\n                  idStruttura={idStruttura}\n                  idEvento={idEvento}\n                />\n              );\n          }\n        }}\n      </AzureAD>\n    </Paper>\n  );\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaProvider.js",["397","398","399"],"import React, { useState, useEffect, Fragment } from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {StruttureActionsCreator} from '../../store/actions/strutture.actions'\nimport * as log from 'loglevel';\n\n/*\nImplementa la logica di caricamento dei dati di una Struttura\n*/\nexport default function  StrutturaProvider(props){\n    const _logger = log.getLogger('StrutturaProvider');\n    const nomeStruttura = props.nomeStruttura;\n    const dispatch = useDispatch();\n    const struttura  = useSelector((state) =>{ return state.struttura.struttura});\n    \n    //Rimappiamo i children aggiungendo il nome della struttura come Props\n    const children = React.Children.map(props.children, (child, index) => {\n        return React.cloneElement(child, {\n            ...props,\n            index,\n            nomeStruttura: nomeStruttura,\n            struttura: struttura\n        });\n    });\n\n    useEffect(()=>{\n        //Carichiamo i dati della struttura se non già presenti nello store \n        if(!struttura || struttura.name !== nomeStruttura){\n            _logger.debug(`StrutturaProvider->Dispatch StruttureActionsCreator.fetchStrutturaByName(${nomeStruttura})`);\n            dispatch(StruttureActionsCreator.fetchStrutturaByName(nomeStruttura));\n        }else{\n            _logger.debug(`StrutturaProvider->NO Dispatch StruttureActionsCreator.fetchStrutturaByName(${nomeStruttura}) - struttura alrerady fetched.`);\n        }\n    },[nomeStruttura]);\n\n    return(\n        <Fragment>\n            {props.children}\n        </Fragment>\n    )\n    \n} ","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaLayout.js",["400"],"import React, { Fragment } from 'react';\nimport Container from '@material-ui/core/Container';\nimport R2DHeader from '../commons/R2DHeader'\nimport R2DSideNav from '../commons/sidenav/R2DSideNav';\nimport { useSelector } from 'react-redux';\nimport {UserSelectors} from '../../store/selectors/user.selectors'\n\n\nexport default props => {\n    const struttureOwned = useSelector(UserSelectors.getStruttureOwned);\n\n    return (\n        <Fragment>\n            {struttureOwned && struttureOwned.length > 0 ? <R2DSideNav urlStruttura={props.urlStruttura} /> : ''}            \n            <Container width=\"900\" >\n                <R2DHeader urlStruttura={props.urlStruttura}></R2DHeader>\n                {props.children}\n            </Container>\n        </Fragment>\n    );\n}\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditDati.js",["401"],"/* eslint-disable import/no-anonymous-default-export */\nimport * as log from \"loglevel\";\nimport React /*, { useState }*/ from \"react\";\nimport R2DClienteEditItem from \"./R2DClienteEditItem\";\nimport OrarioAperturaEdit from \"./OrarioAperturaEdit\";\nimport IndirizzoEdit from \"./IndirizzoEdit\";\nimport { Container } from \"@material-ui/core\";\n\nexport default (props) => {\n  const anagraficaStruttura = props.anagraficaStruttura;\n  //const orarioAperturaStruttura = props.orarioAperturaStruttura;\n\n  return (\n    <React.Fragment>\n      <R2DClienteEditItem\n        title=\"Nome\"\n        tooltip=\"Nome della struttura\"\n        propName=\"nome\"\n        propValue={anagraficaStruttura.nome}\n      ></R2DClienteEditItem>\n      <R2DClienteEditItem\n        title=\"Descrizione\"\n        tooltip=\"Descrizione della struttura\"\n        propName=\"descrizione\"\n        multiline={true}\n        lineNumbers={5}\n        propValue={anagraficaStruttura.descrizione}\n      ></R2DClienteEditItem>\n      <R2DClienteEditItem\n        title=\"Identificativo Web\"\n        tooltip=\"Identificativo Web della struttura\"\n        propName=\"urlRoute\"\n        propValue={anagraficaStruttura.urlRoute}\n      ></R2DClienteEditItem>\n      <R2DClienteEditItem\n        title=\"Telefono\"\n        tooltip=\"Numero di telefono della struttura\"\n        propName=\"numTelefono\"\n        propValue={anagraficaStruttura.numTelefono}\n      ></R2DClienteEditItem>\n      <R2DClienteEditItem\n        title=\"Ragione Sociale\"\n        tooltip=\"Numero di telefono della struttura\"\n        propName=\"ragSociale\"\n        propValue={anagraficaStruttura.nome}\n      ></R2DClienteEditItem>\n      <OrarioAperturaEdit tooltip=\"Orari di apertura della struttura\"></OrarioAperturaEdit>\n      <IndirizzoEdit\n        indirizzo={anagraficaStruttura.indirizzo}\n        coordinate={{\n          lat: anagraficaStruttura.latitudine,\n          lng: anagraficaStruttura.longitudine,\n        }}\n      ></IndirizzoEdit>\n      <Container>\n        <img style={{ width: \"inherit\" }} src=\"/images/tinto.png\" alt=\"tinto\" />\n      </Container>\n    </React.Fragment>\n  );\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditImages.js",["402"],"import * as log from 'loglevel';\nimport React, { useEffect } from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\nimport GridList from '@material-ui/core/GridList'\nimport { makeStyles } from '@material-ui/core/styles';\nimport ImageUploader from 'react-images-upload';\nimport ImageGalleryEdit from './ImageGalleryEdit';\nimport {StruttureSelectors} from '../../store/selectors/strutture.selectors'\nimport {StruttureActionsCreator} from '../../store/actions/strutture.actions'\nconst _logger = log.getLogger('StrutturaEditImages');\n\nconst useStyles = makeStyles(theme=>({\n\troot:{\n\t\tdisplay: 'flex',\n\t\tflexWrap: 'wrap',\n\t\tjustifyContent: 'space-around',\n\t\toverflow: 'hidden',\n\t\tbackgroundColor: theme.palette.background.paper,\n\t  },\t\n\tgridList:{\n\t\twidth: '100%',\n\t\theight: '100%'\n\t},\n}));\n\nexport default (props) =>{\n    _logger.debug(\"StrutturaEditImages....\")\n\tconst images =  useSelector(StruttureSelectors.getImages);\n\tconst idStruttura = props.idStruttura;\n\tconst dispatch = useDispatch();\n\tconst classes = useStyles();\n\n\tfunction onDrop(){\n\t\t_logger.debug(arguments);\n\t}\n\n\tuseEffect(()=>{\n\t\t_logger.debug(\"StrutturaEditImages->useEffect()\");\n\t\tasync function fetchData(){\n\t\t\t_logger.debug(\"StrutturaEditImages->fetchData()\");\n\t\t\t//if(!images || (Array.isArray(images) && images.length === 0)){\n\t\t\t\t if(idStruttura && idStruttura > 0){\n\t\t\t\t\t_logger.debug(`StrutturaEditImages->useEffect() - Dispatching action fetchStrutturaImmagini(${idStruttura})`);\n\t\t\t\t\tconst action = StruttureActionsCreator.fetchStrutturaImmagini({idStruttura});\n\t\t\t\t\tdispatch(action);\n\t\t\t\t }else{\n\t\t\t\t \t_logger.debug(`images already popolated, loading not needed. idStruttura: ${idStruttura} - images: ${JSON.stringify(images)}`);\n\t\t\t\t }\n\t\t\t};\n\t\t\tfetchData();\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t},[idStruttura])\n\n\tconst resolveTipoImmagine = (idTipo)=>{\n\t\tswitch(idTipo){\t\t\n\t\t\tcase 1: return \"sfondo\";\n\t\t\tcase 2: return \"logo\";\n\t\t\tdefault: return \"gallery\";\n\t\t}\n\t}\n\tconst renderImages = ()=>{\n\t\tif(!images) return (<div></div>);\n\t\t//Solo immagini della gallery\n\t\tlet filtered = images.filter((img)=>img.idTipoImmagine === 3);\n\t\t_logger.debug(`Iamges filtered: ${JSON.stringify(filtered)}`);\n\n\t\treturn(\n\t\t\t<GridList cellHeight={'auto'} cols={2.5} spacing={10} className={classes.gridList}>\n\t\t\t{\n\t\t\t\tfiltered.map((item, idx)=>{return (<ImageGalleryEdit key={item.id} order={idx} imageKey={item.id} imageType={resolveTipoImmagine(item.idTipoImmagine)} imageUrl={item.url}></ImageGalleryEdit>)})\n\t\t\t}\n\t\t\t<ImageGalleryEdit ></ImageGalleryEdit>\n\t\t\t</GridList>\n\t\t\t);\n}\n\n    return (\n        <React.Fragment>\n\t\t\t <ImageUploader\n\t\t\t\twithIcon={true}\n\t\t\t\tbuttonText='Choose images'\n\t\t\t\tonChange={onDrop}\n\t\t\t\timgExtension={['.jpg', '.gif', '.png', '.gif']}\n\t\t\t\tmaxFileSize={5242880}\n\t\t\t/>\n\t\t\t<div className={classes.root}>\n\t\t\t\t{renderImages()}\n\t\t\t</div>\n        </React.Fragment>\n    )\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditCalendari.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaHome.js",["403","404"],"/* eslint-disable import/no-anonymous-default-export */\nimport * as log from \"loglevel\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Grid,\n  Box,\n  Paper,\n  Typography,\n  makeStyles,\n  Button,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { Container } from \"@material-ui/core\";\n\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport { UserSelectors } from \"../../store/selectors/user.selectors\";\nimport { StruttureSelectors } from \"../../store/selectors/strutture.selectors\";\nimport { StruttureActionsCreator } from \"../../store/actions/strutture.actions\";\nimport { UserActionsCreator } from \"../../store/actions/user.actions\";\n\nimport R2DCalendariContainer from \"./R2DCalendariContainer\";\nimport StrutturaMap from \"./StrutturaMap\";\n\nimport { Carousel } from \"react-responsive-carousel\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport StrutturaContattiView from \"./StrutturaContattiView\";\nimport StrutturaOrarioView from \"./StrutturaOrarioView\";\n\nconst _logger = log.getLogger(\"StrutturaHome\");\n\nconst useStyles = makeStyles((theme) => ({\n  logoContainer: {\n    //display:\"inline\",\n    width: \"297px\",\n    height: \"100%\",\n    // height: \"300px\",\n    float: \"left\",\n  },\n  logo: {\n    //display:\"inline\",\n    // maxWidth: \"296px\",\n    // maxHeight: \"296px\"\n    width: \"100%\",\n    height: \"100%\",\n  },\n  descriptionBox: {\n    //display:\"inline\"\n    marginLeft: \"310px\",\n    minHeight: \"270px\",\n    // paddingLeft: \"15px\"\n    padding: \"15px\",\n  },\n  image: {\n    marginTop: \"8px\",\n    marginBottom: \"8px\",\n    width: \"inherit\",\n  },\n  descriptionBoxHeader: {\n    // paddingTop: \"20px\",\n    paddingBottom: \"20px\",\n    marginBottom: \"20px\",\n\n    \"& .descriptionBoxTitle\": {\n      // marginRight: \"110px\",\n      // display: \"inline\",\n      float: \"left\",\n    },\n\n    \"& .followButton\": {\n      float: \"right\",\n      backgroundColor: \"#E31F4F\",\n      color: \"white\",\n      width: \"100px\",\n      // marginRight: \"4px\",\n      // marginTop: \"-15px\"\n    },\n\n    \"& .unFollowButton\": {\n      float: \"right\",\n      backgroundColor: \"#636363\",\n      color: \"white\",\n      width: \"100px\",\n      // marginRight: \"4px\",\n      // marginTop: \"-15px\"\n    },\n  },\n\n  descriptionBoxText: {\n    marginTop: \"30px\",\n  },\n\n  galleryContainer: {\n    marginTop: \"10px\",\n    height: \"400px\",\n    position: \"relative\",\n\n    \"& .galleryCarousel\": {\n      height: \"100%\",\n    },\n\n    \"& .bannerGrid\": {\n      height: \"100%\",\n    },\n\n    \"& .galleryMedia\": {\n      height: \"400px\",\n      \"&:hover\": {\n        opacity: \"0.8\",\n      },\n    },\n  },\n\n  calendarContainer: {\n    marginTop: \"10px\",\n  },\n\n  mapContainer: {\n    marginTop: \"10px\",\n    width: \"672px\",\n    height: \"400px\",\n    float: \"left\",\n  },\n\n  addressContainer: {\n    marginLeft: \"692px\",\n    marginTop: \"10px\",\n    paddingLeft: \"10px\",\n    height: \"400px\",\n  },\n\n  addressContainerBox: {\n    minHeight: \"400px\",\n  },\n}));\n\nexport default (props) => {\n  const anagraficaStruttura = props.anagraficaStruttura;\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  // const defaultLogo = \"./images/icon_handover.png\"\n  const defaultLogo = \"./images/home.png\";\n  const images = useSelector(StruttureSelectors.getImages);\n  const struttureSeguite = useSelector(UserSelectors.getStruttureSeguite) ?? [];\n  const [locationsIsLoading, setLocationsIsLoading] = useState(true);\n  const description = `GYROTONIC® EUR è un’oasi di benessere dove combattere lo stress del lavoro e della vita quotidiana\n    ottenendo la perfetta forma fisica. Rilassati e goditi un’ora di allenamento personalizzato in un ambiente\n    sano e confortevole1`;\n  const description2 = `\n    Il Gyrotonic consiste in una serie di esercizi basati sui principi chiave di yoga, nuoto, danza e tai-chi.\n    Questi esercizi vengono eseguiti con il supporto di speciali attrezzature (Pulley Tower, Jumping Stretching\n    Board, Leg Extension Unit, Archway, Gyrotoner) e la guida costante di un Personal Trainer.\n    Corpo tonico, pancia piatta, postura corretta, gambe leggere e allungate, miglioramento della capacità\n    polmonare, della circolazione sanguigna e delle capacità motorie sono solo alcuni dei benefici che il\n    metodo dona alla persona.`;\n  //NOTA: Ho il sospetto che le immagini vengano scaricate più volte del necessario\n  useEffect(() => {\n    _logger.debug(\"StrutturaHome->useEffect()\");\n    async function fetchData() {\n      _logger.debug(\n        `StrutturaHome->fetchData() - Struttura: ${JSON.stringify(\n          anagraficaStruttura\n        )}`\n      );\n\n      if (!images || images.length === 0) {\n        _logger.debug(\n          `StrutturaHome->useEffect() - Dispatching action fetchStrutturaImmagini(${anagraficaStruttura.id})`\n        );\n        const action = StruttureActionsCreator.fetchStrutturaImmagini({\n          idStruttura: anagraficaStruttura.id,\n        });\n        dispatch(action);\n      } else {\n        _logger.debug(\n          `images already popolated, loading not needed. idStruttura: ${\n            anagraficaStruttura.id\n          } - images: ${JSON.stringify(images)}`\n        );\n      }\n    }\n    if (anagraficaStruttura && anagraficaStruttura.id) {\n      fetchData();\n    } else {\n      _logger.debug(\n        `struttura non ancora caricata, impossibile recuperare le immagini.`\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [anagraficaStruttura, images]);\n\n  function isStrutturaSeguita() {\n    const result =\n      struttureSeguite?.findIndex(\n        (v) => v.idCliente === anagraficaStruttura?.id\n      ) >= 0;\n    _logger.debug(\n      `StrutturaHome->isStrutturaSeguita()-> return: ${result} - struttureSeguite: ${struttureSeguite}`\n    );\n    // console.log(struttureSeguite);\n    return result;\n  }\n\n  function handleUnfollowStruttura() {\n    const action = UserActionsCreator.r2dUnFollowStrutturaRequested(\n      anagraficaStruttura.id\n    );\n    dispatch(action);\n  }\n\n  function handleFollowStruttura() {\n    const action = UserActionsCreator.r2dFollowStrutturaRequested(\n      anagraficaStruttura.id\n    );\n    _logger.debug(\n      `StrutturaHome->handleFollowStruttura()-> Dispatch action r2dFollowStrutturaRequested(${anagraficaStruttura.id})`\n    );\n    dispatch(action);\n  }\n\n  return (\n    <Grid container>\n      <Container>\n        <img className={classes.image} src=\"/images/tinto.png\" alt=\"tinto\" />\n      </Container>\n      <Grid item xs={12}>\n        <Paper md={2} className={classes.logoContainer}>\n          <img\n            className={classes.logo}\n            alt=\"logo\"\n            src={anagraficaStruttura.logoUrl ?? defaultLogo}\n          ></img>\n        </Paper>\n        <Paper md={9} className={classes.descriptionBox}>\n          <Box className={classes.descriptionBoxHeader}>\n            {/* <Typography className=\"descriptionBoxTitle\" variant=\"h5\">Benvenuti a {anagraficaStruttura.nome}</Typography> */}\n            <Typography className=\"descriptionBoxTitle\" variant=\"h5\">\n              Benvenuti a GYROTONIC ® EUR\n            </Typography>\n\n            {/* TODO: Gestire il pulsane segui / non seguire in base allo stato dell'utente*/}\n            {isStrutturaSeguita() ? (\n              <Button\n                variant=\"contained\"\n                startIcon={<FavoriteIcon />}\n                className=\"unFollowButton\"\n                onClick={handleUnfollowStruttura}\n              >\n                SEGUITO\n              </Button>\n            ) : (\n              <Button\n                variant=\"contained\"\n                startIcon={<FavoriteIcon />}\n                className=\"followButton\"\n                onClick={handleFollowStruttura}\n              >\n                SEGUI\n              </Button>\n            )}\n          </Box>\n          <Box className={classes.descriptionBoxText}>\n            {/* <Typography variant=\"body1\">{anagraficaStruttura.descrizione}</Typography> */}\n            <Typography variant=\"body2\" gutterBottom>\n              {description}\n            </Typography>\n            <br />\n            <Typography variant=\"body2\" gutterBottom>\n              {description2}\n            </Typography>\n          </Box>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Paper className={classes.galleryContainer}>\n          <Carousel\n            className=\"galleryCarousel\"\n            autoPlay={true}\n            interval={5000}\n            infiniteLoop={true}\n            showThumbs={false}\n          >\n            {images.map((item, index) => {\n              return (\n                <Box key={index}>\n                  <img\n                    key={index}\n                    src={item.url}\n                    className=\"galleryMedia\"\n                    alt={item.alt}\n                  />\n                </Box>\n              );\n            })}\n          </Carousel>\n        </Paper>\n      </Grid>\n      <Container>\n        <img className={classes.image} src=\"/images/tinto.png\" alt=\"tinto\" />\n      </Container>\n      <Grid item xs={12}>\n        <Paper className={classes.calendarContainer}>\n          <R2DCalendariContainer\n            idStruttura={anagraficaStruttura.id}\n            urlRoute={anagraficaStruttura.urlRoute}\n            renderMode=\"view\"\n          ></R2DCalendariContainer>\n        </Paper>\n      </Grid>\n      {anagraficaStruttura.latitudine === undefined ? (\n            <CircularProgress></CircularProgress>\n          ) : (\n      <Grid item xs={12}>\n\n        <Paper className={classes.mapContainer}>\n\n            <StrutturaMap\n              lat={anagraficaStruttura.latitudine}\n              lng={anagraficaStruttura.longitudine}\n            ></StrutturaMap>\n         \n        </Paper>\n        <Paper className={classes.addressContainer}>\n          <Box\n            display=\"flex\"\n            className={classes.addressContainerBox}\n            flexDirection=\"column\"\n            alignItems=\"stretch\"\n            alignContent=\"space-between\"\n          >\n            <StrutturaOrarioView\n              flex={1}\n              struttura={anagraficaStruttura}\n            ></StrutturaOrarioView>\n            <StrutturaContattiView\n              struttura={anagraficaStruttura}\n            ></StrutturaContattiView>\n          </Box>\n        </Paper>\n\n      </Grid>         )}\n      <Container>\n        <img className={classes.image} src=\"/images/tinto.png\" alt=\"tinto\" />\n      </Container>\n    </Grid>\n  );\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaListaUtenti.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEventoPrenotazione.js",["405","406"],"import log from \"loglevel\";\nimport React, { useEffect, useState } from \"react\";\nimport * as qs from \"query-string\";\nimport {\n  Paper,\n  Grid,\n  Typography,\n  Box,\n  CircularProgress,\n  Button,\n} from \"@material-ui/core\";\nimport format from \"date-fns/format\";\nimport { it } from \"date-fns/locale\";\nimport parseISO from \"date-fns/parseISO\";\nimport { StruttureEventiAPI } from \"../../api/strutture.eventi.api\";\nimport { StruttureUtentiAPI } from \"../../api/strutture.utenti.api\";\nimport AzureAD, { AuthenticationState } from \"react-aad-msal\";\nimport { authProvider } from \"../../authProvider\";\nimport { getStore } from \"../../store/reduxStore\";\nimport { useSelector } from \"react-redux\";\nimport { UserSelectors } from \"../../store/selectors/user.selectors\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst _logger = log.getLogger(\"StrutturaEventoPrenotazione\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"10px\",\n  },\n  eventLoadBox: {\n    minHeight: \"300px\",\n  },\n}));\n\nexport default (props) => {\n  const idStruttura = props.idStruttura;\n  const idEvento = props.idEvento;\n  const [evento, setEvento] = useState(null);\n  const [isLoadingEvento, setIsLoadingEvento] = useState(true);\n  const [appuntamento, setAppuntamento] = useState(null);\n  const [appuntamentoChanged, setAppuntamentoChanged] = useState(new Date());\n  const [isLoadingAppuntamento, setIsLoadingAppuntamento] = useState(true);\n  const [abbonamentiUtente, setAbbonamentiUtente] = useState(null);\n  const [isLoadingAbbonamenti, setIsLoadingAbbonamenti] = useState(true);\n  const currentUser = useSelector(UserSelectors.getUserInfo);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    async function fetchEvento() {\n      _logger.debug(\n        `StrutturaEventoPrenotazione->useEffect()->fetchEvento() - Fetching Event (${idStruttura}, ${idEvento})`\n      );\n      let data = await StruttureEventiAPI.FetchEventoAsync(\n        idStruttura,\n        idEvento\n      );\n      _logger.debug(\n        `StrutturaEventoPrenotazione->useEffect->fetchEvento(): Event Fetched: ${JSON.stringify(\n          data\n        )}`\n      );\n      setEvento(data);\n      setIsLoadingEvento(false);\n    }\n    if (idStruttura > 0 && idEvento > 0) {\n      fetchEvento();\n    }\n  }, [idStruttura, idEvento]);\n\n  /**\n   * Leggiamo gli abbonamenti dell'utente\n   */\n  useEffect(() => {\n    async function fetchAbbonamenti(userId) {\n      _logger.debug(\n        `StrutturaEventoPrenotazione->useEffect()->fetchAbbonamenti() - Fetching Abbonamenti (${idStruttura}, ${userId})`\n      );\n      const data = await StruttureUtentiAPI.FetchAbbonamentiUtenteAsync(\n        idStruttura,\n        userId\n      );\n      _logger.debug(\n        `StrutturaEventoPrenotazione->useEffect->fetchAbbonamenti(): Abbonamenti Fetched: ${JSON.stringify(\n          data\n        )}`\n      );\n      setAbbonamentiUtente(data);\n      setIsLoadingAbbonamenti(false);\n    }\n\n    if (idStruttura > 0 && idEvento > 0 && currentUser) {\n      if (!isLoadingAbbonamenti) {\n        setIsLoadingAbbonamenti(true);\n      }\n      fetchAbbonamenti(currentUser.id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentUser, idEvento, idStruttura]);\n\n  useEffect(() => {\n    async function fetchAppuntamento() {\n      _logger.debug(\n        `StrutturaEventoPrenotazione->useEffect()->fetchAppuntamento() - Fetching Appuntamento (${idStruttura}, ${idEvento})`\n      );\n      let data = await StruttureEventiAPI.FetchAppuntamentiAsync(\n        idStruttura,\n        idEvento\n      );\n      _logger.debug(\n        `StrutturaEventoPrenotazione->useEffect->fetchAppuntamento(): Appuntamento Fetched: ${JSON.stringify(\n          data\n        )}`\n      );\n      setAppuntamento(data);\n      setIsLoadingAppuntamento(false);\n    }\n    if (idStruttura > 0 && idEvento > 0) {\n      fetchAppuntamento();\n    }\n  }, [idStruttura, idEvento, appuntamentoChanged]);\n\n  function isLoading() {\n    return isLoadingEvento || isLoadingAbbonamenti || isLoadingAppuntamento;\n  }\n\n  function getIdFirstAbbonamentoValido() {\n    _logger.debug(\n      `StrutturaEventoPrenotazione->getIdFirstAbbonamentoValido() - abbonamentiUtente: ${JSON.stringify(\n        abbonamentiUtente\n      )} - evento: ${JSON.stringify(evento)}`\n    );\n    function findAbbonamentoValido(abbonamento) {\n      if (\n        abbonamento.ingressiResidui > 0\n        //&& (abbonamento.tipoAbbonamento.maxLivCorsi >= evento.tipologiaLezione.livello) &&\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    let idAbbonamento = -1;\n    if (abbonamentiUtente && abbonamentiUtente.length > 0) {\n      idAbbonamento = abbonamentiUtente.find(findAbbonamentoValido)?.id ?? -1;\n    }\n    _logger.debug(\n      `StrutturaEventoPrenotazione->getIdFirstAbbonamentoValido() - return: ${idAbbonamento}`\n    );\n    return idAbbonamento;\n  }\n\n  async function handlePrenotazioneAsync(e) {\n    _logger.debug(`StrutturaEventoPrenotazione->handlePrenotazioneAsync()`);\n    const idAbbonamento = getIdFirstAbbonamentoValido();\n    if (idAbbonamento >= 0) {\n      const newAppuntamento = {\n        user: currentUser.id,\n        idAbbonamento: idAbbonamento,\n        evento: idEvento,\n        note: \"\", //Al momento non gestiamo le note\n      };\n      await StruttureEventiAPI.PrenotaEventoAsync(\n        idStruttura,\n        idEvento,\n        newAppuntamento\n      );\n      setAppuntamentoChanged(new Date());\n    }\n  }\n\n  async function handleDeletePrenotazione(e) {\n    _logger.debug(`StrutturaEventoPrenotazione->handlePrenotazioneAsync()`);\n    await StruttureEventiAPI.AnnullaPrenotazioneAsync(idStruttura, idEvento);\n    setAppuntamento(null);\n    setAppuntamentoChanged(new Date());\n  }\n\n  function renderEventDetails() {\n    return (\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Grid\n            container\n            alignItems=\"center\"\n            justify=\"center\"\n            direction=\"column\"\n          >\n            <Grid item xs={12}>\n              <Typography variant=\"h5\" fontWeight=\"Bold\">\n                Prenotazione lezione\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item fontWeight=\"fontWeightBold\" xs={12}>\n          <Typography variant=\"h6\">{evento.title}</Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Typography component=\"div\">\n            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n              Tipo lezione:\n            </Box>\n            <Box component=\"span\">{evento.tipologiaLezione?.nome}</Box>\n          </Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography component=\"div\">\n            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n              Data:\n            </Box>\n            <Box component=\"span\">\n              {format(parseISO(evento.dataOraInizio), \"d MMMM yyyy\", {\n                locale: it,\n              })}\n            </Box>\n          </Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography component=\"div\">\n            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n              Ora inizio:\n            </Box>\n            <Box component=\"span\">\n              {format(parseISO(evento.dataOraInizio), \"p\", { locale: it })}\n            </Box>\n          </Typography>\n        </Grid>\n\n        <Grid item xs={6}>\n          <Typography component=\"div\">\n            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n              Location:\n            </Box>\n            <Box component=\"span\">{evento.location?.nome}</Box>\n          </Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography component=\"div\">\n            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n              Posti disponibili:\n            </Box>\n            <Box component=\"span\">\n              {evento.postiResidui} / {evento.postiDisponibili}\n            </Box>\n          </Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography component=\"div\">\n            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n              Durata:\n            </Box>\n            <Box component=\"span\">{evento.durata} min.</Box>\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography component=\"div\">\n            <Box component=\"div\" fontWeight=\"fontWeightBold\" mr={1}>\n              Note:\n            </Box>\n            <Box component=\"span\">{evento.note}</Box>\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid\n            container\n            alignItems=\"center\"\n            justify=\"center\"\n            direction=\"column\"\n          >\n            <Grid item xs={12}>\n              <AzureAD provider={authProvider} reduxStore={getStore()}>\n                {({\n                  login,\n                  logout,\n                  authenticationState,\n                  error,\n                  accountInfo,\n                }) => {\n                  switch (authenticationState) {\n                    case AuthenticationState.Authenticated:\n                      if (appuntamento) {\n                        return (\n                          <Button\n                            size=\"large\"\n                            variant=\"contained\"\n                            onClick={handleDeletePrenotazione}\n                          >\n                            Annulla Prenotazione\n                          </Button>\n                        );\n                      } else {\n                        return getIdFirstAbbonamentoValido() >= 0 ? (\n                          <Button\n                            size=\"large\"\n                            variant=\"contained\"\n                            onClick={handlePrenotazioneAsync}\n                          >\n                            Prenota Lezione\n                          </Button>\n                        ) : (\n                          <Typography>Nessun abbonamento valido</Typography>\n                        );\n                      }\n                    default:\n                      return (\n                        //TODO: trasformare in un\n                        <Button\n                          size=\"large\"\n                          variant=\"contained\"\n                          onClick={login}\n                        >\n                          Accedi\n                        </Button>\n                        // <Button size=\"small\" variant=\"contained\" component={Link} to={`/${urlRoute}/utenti/${userId}`}>Accedi</Button>\n                      );\n                  }\n                }}\n              </AzureAD>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  function renderEventLoading() {\n    return (\n      <Box className={classes.eventLoadBox}>\n        <CircularProgress></CircularProgress>\n      </Box>\n    );\n  }\n\n  return (\n    <Paper className={classes.root}>\n      {isLoading() ? renderEventLoading() : renderEventDetails()}\n    </Paper>\n  );\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaListaLocations.js",["407","408","409","410"],"import log from 'loglevel';\nimport React, { useEffect, useState, Fragment } from 'react'\n\nimport { StruttureEventiAPI } from '../../api/strutture.eventi.api'\nimport {\n    makeStyles, Grid, Box, Typography, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Button,\n    IconButton, Paper, Fab\n} from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport R2DLoader from '../commons/R2DLoader';\n\nconst _logger = log.getLogger('StrutturaListaLocations');\n\nconst useStyles = makeStyles({\n    root: {\n        minHeight: \"600px\",\n        position: \"relative\"\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n\nexport default (props) => {\n    const idStruttura = props.idStruttura;\n    const urlRoute = props.urlRoute;\n\n    const [isLoading, setIsLoading] = useState(true);\n    const [locations, setLocations] = useState(null);\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        async function fetchLocations() {\n            _logger.debug(`StrutturaListaLocations->useEffect()->fetchLocations(idStruttura: ${idStruttura})`);            \n            const data = await StruttureEventiAPI.FetchLocationsAsync(idStruttura);\n            _logger.debug(`StrutturaListaLocations->useEffect()->fetchLocations(data: ${JSON.stringify(data)})`);\n            setLocations(data ?? []);\n            setIsLoading(false);\n        }\n\n        if (idStruttura && idStruttura > 0) {\n            fetchLocations();\n        }\n    }, [idStruttura])\n\n    function renderLoading() {\n        return (\n            <R2DLoader />\n        )\n    }\n\n    function renderNoData() {\n        return (\n            <Typography variant=\"h6\">Nessuna location</Typography>\n        )\n    }\n\n    function renderComponent() {\n        return (\n            <Box>\n                <Box>\n                    <Typography variant=\"h5\">Gestione Locations</Typography>\n                    <Fab color=\"primary\" aria-label=\"add\" style={{ float: \"right\", marginRight: \"20px\", marginTop: \"-10px\" }} component={Link} to={`/${urlRoute}/locations/new`}>\n                        <AddIcon />\n                    </Fab>\n                </Box>\n                {locations && locations.length > 0 ?\n                    <TableContainer>\n                        <Table className={classes.table} aria-label=\"Elenco locations\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Nome</TableCell>\n                                    <TableCell align=\"center\">Capienza</TableCell>\n                                    {/* <TableCell align=\"center\">Colore</TableCell> */}\n                                    <TableCell align=\"center\"></TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {locations.map(l => (\n                                    <TableRow key={l.id}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {l.nome}\n                                        </TableCell>\n                                        <TableCell align=\"center\">{l.capienzaMax ?? '-'}</TableCell>\n                                        {/* <TableCell align=\"center\"><Box style={{ margin: 'auto', width: '30px', height: '30px', backgroundColor: l.colore }}></Box></TableCell> */}\n                                        <TableCell align=\"right\">\n                                            <Button startIcon={<EditIcon />} size=\"small\" variant=\"outlined\" component={Link} to={`/${urlRoute}/locations/${l.id}`} >\n                                                Edit\n                                            </Button>\n\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    :\n                    renderNoData()\n                }\n            </Box>\n        )\n    }\n\n    return (\n        <Paper className={classes.root}>\n            {isLoading ? renderLoading() : (locations.length > 0 ? renderComponent() : renderNoData())}\n        </Paper>\n    )\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditLocation.js",["411","412","413","414","415"],"import log from 'loglevel';\nimport React, { useState, useEffect, Fragment } from 'react'\nimport { Formik, Form, Field, ErrorMessage, FieldArray } from 'formik';\nimport { makeStyles, Grid, TextField, InputAdornment, FormControl, InputLabel, Button, Paper } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport { StruttureEventiAPI } from '../../api/strutture.eventi.api'\nimport { CirclePicker } from 'react-color';\nimport R2DLoader from '../commons/R2DLoader'\nimport { useHistory } from \"react-router-dom\";\nimport { useSnackbar } from 'notistack';\n\nconst _logger = log.getLogger('StrutturaEditLocation');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        minHeight: '400px',\n        position: \"relative\"\n    },\n    form: {\n        padding: '20px'\n    },\n    colorePickerLabel: {\n        transform: 'translate(0, 1.5px) scale(0.75)',\n        transformOrigin: 'top left'\n    },\n    colorePicker: {\n        marginTop: '24px'\n    },\n    btnSalva: {\n        backgroundColor: \"#E31F4F\",\n        color: \"white\",\n        margin: 'auto',\n    },\n    errorMessage: {\n        color: \"red\",\n        fontSize: \"0.7rem\"\n    }\n}));\n\n\nexport default (props) => {\n    const idStruttura = props.idStruttura;\n    let { idLocation } = useParams(); //Leggiamo l'idLocation dall'url\n    const [locationIsLoading, setLocationIsLoading] = useState(true);\n    const [location, setLocation] = useState(null);\n\n    const classes = useStyles();\n    let history = useHistory();\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n    useEffect(() => {\n        async function fetchLocation(idStruttura, idLocation) {\n            const data = await StruttureEventiAPI.FetchLocationSingleAsync(idStruttura, idLocation);\n            _logger.debug(`StrutturaEditLocation->useEffect()->fetchedLocation(${idStruttura}, ${idLocation}) => ${JSON.stringify(data)}`);\n            //facciamo l'override dei campi null per esigenze di Formik \n            if (data && (!data?.colore || data?.colore === '')) {\n                data.colore = 'transparent';\n                data.capienzaMax = data.capienzaMax ?? '';\n                data.descrizione = data.descrizione ?? '';\n                data.urlImage = data.urlImage ?? '';\n                data.urlIcon = data.urlIcon ?? '';\n            }\n            setLocation(data)\n            setLocationIsLoading(false);\n        }\n        if (idStruttura > 0 && !isNaN(idLocation) && idLocation > 0) {\n            fetchLocation(idStruttura, idLocation);\n        } else if (idStruttura > 0 && isNaN(idLocation)) {\n            //Inizializiamo un oggetto vuoto per gestire il caso di nuova location\n            setLocation({\n                id: -1,\n                idCliente: idStruttura,\n                nome: '',\n                descrizione: '',\n                capienzaMax: '',\n                colore: 'transparent',\n                urlImage: '',\n                urlIcon: ''\n            });\n            setLocationIsLoading(false);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [idStruttura, idLocation]);\n\n    const handleFormSubmmit = async (values, actions) => {\n        _logger.debug(`StrutturaEditLocation->FormSubmit() - values: ${JSON.stringify(values)}`);\n        let payload = Object.assign({}, values);\n        if (payload.capienzaMax === '') { payload.capienzaMax = null; }\n        await StruttureEventiAPI.SaveLocationAsync(idStruttura, payload);\n        actions.setSubmitting(false); //NOTA: essendo async non è tecnicamente necessaria questa chiamata, la fa Formik implicitamente\n        enqueueSnackbar('Sala salvata', {variant:'success'});\n        history.goBack();\n    }\n\n\n    function isFetchingInProgress() {\n        return locationIsLoading;\n    }\n\n    async function formValidateAsync(values) {\n        const errors = {}\n        if (!values.nome) {\n            errors.nome = \"E' necessario specificare il nome\";\n        }\n\n        _logger.debug(`StrutturaEditLocation->formValidateAsync() - errors: ${JSON.stringify(errors)}`);\n        return errors;\n    }\n\n     /**\n   * Stop enter submitting the form.\n   * @param keyEvent Event triggered when the user presses a key.\n   */\n  function onKeyDown(keyEvent) {\n    if ((keyEvent.charCode || keyEvent.keyCode) === 13) {\n      keyEvent.preventDefault();\n    }\n  }\n\n    function renderForm() {\n        return (\n            <Formik\n                initialValues={location}\n                enableReinitialize={true}\n                onSubmit={handleFormSubmmit}\n                validate={formValidateAsync}\n            >\n                {\n                    (props, form) => (\n                        <Form onSubmit={props.handleSubmit} autoComplete=\"off\" className={classes.form} onKeyDown={onKeyDown}>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <TextField name='nome'\n                                        label='Nome Location'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.nome}\n                                        fullWidth\n                                        margin='normal'\n                                    />\n                                    <ErrorMessage className={classes.errorMessage} component=\"span\" name=\"nome\" />\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <TextField name='capienzaMax'\n                                        label='Capienza'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.capienzaMax}\n                                        fullWidth\n                                        margin='normal'\n                                        type=\"number\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Field name='colore'\n                                        label='Colore Location'\n                                    >\n                                        {({ field, form }) =>\n                                            (\n                                                <FormControl fullWidth margin='normal'>\n                                                    <InputLabel className={classes.colorePickerLabel}>{'Colore Location'}</InputLabel>\n                                                    <CirclePicker className={classes.colorePicker} name={field.name}\n                                                        color={field.value}\n                                                        minDate={new Date()}\n                                                        label='Colore Sala'\n                                                        value={field.value}\n                                                        width=\"100%\"\n                                                        onChangeComplete={(colore, event) => form.setFieldValue(field.name, colore.hex, true)}\n                                                    />\n                                                </FormControl>\n                                            )\n                                        }\n                                    </Field>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField name='descrizione'\n                                        label='Descrizione'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.descrizione}\n                                        fullWidth\n                                        margin='normal'\n                                        multiline\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                                    <Button size=\"large\" variant=\"contained\"\n                                        type=\"submit\"\n                                        className={classes.btnSalva}>Salva</Button>\n                                </Grid>\n                            </Grid>\n                        </Form>\n                    )\n                }\n            </Formik>\n        )\n    }\n\n    function renderLoading() {\n        return (\n            <R2DLoader />\n        )\n    }\n\n    return (\n        <Paper className={classes.root}>\n            {!isFetchingInProgress() ? renderForm() : renderLoading()}\n        </Paper>\n    );\n\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaListaTipologiaLezioni.js",["416","417","418","419","420"],"import log from 'loglevel';\nimport React, { useEffect, useState, Fragment } from 'react'\n\nimport { StruttureEventiAPI } from '../../api/strutture.eventi.api'\nimport { makeStyles, Grid, Box, Typography, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Button, IconButton, Paper, CircularProgress, Fab } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport R2DLoader from '../commons/R2DLoader'\n\nconst _logger = log.getLogger('StrutturaListaTipologiaLezioni');\n\nconst useStyles = makeStyles({\n    root: {\n        minHeight: '600px',\n        position: \"relative\"\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n\nexport default (props) => {\n    const idStruttura = props.idStruttura;\n    const urlRoute = props.urlRoute;\n\n    const [isLoading, setIsLoading] = useState(true);\n    const [tipologieLezioni, setTipologieLezioni] = useState(null);\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        async function fetchTipologieLezioni(page, pageSize) {\n            _logger.debug(`StrutturaListaTipologiaLezioni->useEffect()->fetchTipologieLezioni(idStruttura: ${idStruttura})`);\n            const data = await StruttureEventiAPI.FetchTipologieLezioniAsync(idStruttura, page, pageSize);\n            setTipologieLezioni(data ?? []);\n            setIsLoading(false);\n        }\n\n        if (idStruttura && idStruttura > 0) {\n            //TODO: Gestire la paginazione\n            fetchTipologieLezioni(1, 500);\n        }\n    }, [idStruttura])\n\n    function renderLoading() {\n        return (\n            <R2DLoader height={250} width={250} />\n        )\n    }\n\n\n    function renderNoData() {\n        return (\n            <Typography variant=\"h6\">Nessuna Tipologia Lezione</Typography>\n        )\n    }\n\n    function renderComponent() {\n        return (\n            <Box>\n                <Box>\n                    <Typography variant=\"h5\" align=\"center\" >Gestione Tipologie Lezioni</Typography>\n                    <Fab color=\"primary\" aria-label=\"add\" style={{ float: \"right\", marginRight: \"20px\", marginTop: \"-10px\" }} component={Link} to={`/${urlRoute}/lezioni/new`}>\n                        <AddIcon />\n                    </Fab>\n                </Box>\n                {tipologieLezioni && tipologieLezioni.length > 0 ?\n                    <TableContainer>\n                        <Table className={classes.table} aria-label=\"Elenco tipologie lezioni\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Nome</TableCell>\n                                    {/* <TableCell align=\"center\">Livello</TableCell> */}\n                                    <TableCell align=\"center\">Prezzo</TableCell>\n                                    <TableCell align=\"center\">Durata</TableCell>\n                                    <TableCell align=\"center\"></TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {tipologieLezioni.map(l => (\n                                    <TableRow key={l.id}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {l.nome}\n                                        </TableCell>\n                                        {/* <TableCell align=\"right\">{l.livello}</TableCell> */}\n                                        <TableCell align=\"center\">{(l.prezzo || l.prezzo === 0) ? `${l.prezzo.toLocaleString()}\\u00A0€` : '-'}</TableCell>\n                                        <TableCell align=\"center\">{l.durata ? `${l.durata}\\u00A0minuti` : '-'} </TableCell>\n                                        <TableCell align=\"right\">\n                                            <Button startIcon={<EditIcon />} size=\"small\" variant=\"outlined\" component={Link} to={`/${urlRoute}/lezioni/${l.id}`} >\n                                                Edit\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    :\n                    renderNoData()\n                }\n            </Box>\n        )\n    }\n\n    return (\n        <Paper className={classes.root}>\n            {isLoading ? renderLoading() : (tipologieLezioni.length > 0 ? renderComponent() : renderNoData())}\n        </Paper>\n    )\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditTipologiaLezione.js",["421","422","423"],"import log from 'loglevel';\nimport React, { useState, useEffect } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { makeStyles, Grid, TextField, Button, Paper, InputAdornment, Select, MenuItem } from '@material-ui/core';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { StruttureEventiAPI } from '../../api/strutture.eventi.api'\nimport R2DLoader from '../commons/R2DLoader'\nimport { useSnackbar } from 'notistack';\n\nconst _logger = log.getLogger('StrutturaEditTipologiaLezione');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        minHeight: '400px',\n        position: \"relative\"\n    },\n    form: {\n        padding: '20px'\n    },\n    colorePickerLabel: {\n        transform: 'translate(0, 1.5px) scale(0.75)',\n        transformOrigin: 'top left'\n    },\n    colorePicker: {\n        marginTop: '24px'\n    },\n    btnSalva: {\n        marginTop: \"50px\",\n        backgroundColor: \"#E31F4F\",\n        color: \"white\",\n        margin: 'auto',\n    },\n    errorMessage: {\n        color: \"red\",\n        fontSize: \"0.7rem\"\n    }\n}));\n\n\nexport default (props) => {\n    const idStruttura = props.idStruttura;\n    const urlRoute = props.urlRoute;\n\n    let { idTipoLezione } = useParams(); //Leggiamo l'idLocation dall'url\n    let history = useHistory();\n    const [tipoLezioneIsLoading, setTipoLezioneIsLoading] = useState(true);\n    const [tipoLezione, setTipoLezione] = useState(null);\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n    const classes = useStyles();\n    _logger.debug(`StrutturaEditTipologiaLezione - idStruttura:${idStruttura}, idTipoLezione: ${idTipoLezione}`);\n\n    useEffect(() => {\n        async function fetchLocation(idStruttura, idLocation) {\n            const data = await StruttureEventiAPI.FetchTipologiaLezioneSingleAsync(idStruttura, idLocation);\n            _logger.debug(`StrutturaEditTipologiaLezione->useEffect()->fetchedLocation(${idStruttura}, ${idLocation}) => ${JSON.stringify(data)}`);\n            //facciamo l'override dei campi null per esigenze di Formik \n            if (data && (!data?.colore || data?.colore === '')) {\n                data.maxPartecipanti = data.maxPartecipanti ?? '';\n                data.limiteCancellazioneMinuti = data.limiteCancellazioneMinuti ?? '';\n                data.prezzo = data.prezzo ?? '';\n                data.descrizione = data.descrizione ?? '';\n            }\n            if (data.limiteCancellazioneMinuti >= 1440 &&\n                Number.isInteger(data.limiteCancellazioneMinuti / (60 * 24))) {\n                data.limiteCancellazioneUM = 'd';\n                data.limiteCancellazioneMinuti = data.limiteCancellazioneMinuti / (60 * 24);\n            }\n            else if ((data.limiteCancellazioneMinuti > 60) &&\n                Number.isInteger(data.limiteCancellazioneMinuti / 60)) {\n                data.limiteCancellazioneUM = 'h';\n                data.limiteCancellazioneMinuti = data.limiteCancellazioneMinuti / 60;\n            } else {\n                data.limiteCancellazioneUM = 'm';\n            }\n            setTipoLezione(data)\n            setTipoLezioneIsLoading(false);\n        }\n        if (idStruttura > 0 && !isNaN(idTipoLezione) && idTipoLezione > 0) {\n            fetchLocation(idStruttura, idTipoLezione);\n        } else if (idStruttura > 0 && isNaN(idTipoLezione)) {\n            //Inizializiamo un oggetto vuoto per gestire il caso di nuova location\n            setTipoLezione({\n                id: -1,\n                idCliente: idStruttura,\n                nome: '',\n                descrizione: '',\n                durata: '',\n                maxPartecipanti: '',\n                limiteCancellazioneMinuti: '',\n                limiteCancellazioneUM: 'h', //Campo fittizio \n                livello: '',\n                prezzo: ''\n            });\n            setTipoLezioneIsLoading(false);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [idStruttura, idTipoLezione]);\n\n    const handleFormSubmmit = async (values, actions) => {\n        _logger.debug(`StrutturaEditTipologiaLezione->FormSubmit() - values: ${JSON.stringify(values)}`);\n        let payload = Object.assign({}, values);\n        if (payload.maxPartecipanti === '') { payload.maxPartecipanti = null; }\n        if (payload.limiteCancellazioneMinuti === '') { payload.limiteCancellazioneMinuti = null; }\n        if (payload.prezzo === '') { payload.prezzo = null; }\n        if (payload.livello === '') { payload.livello = 0; }\n        if (payload.limiteCancellazioneMinuti > 0) {\n            switch (payload.limiteCancellazioneUM) {\n                case 'h':\n                    payload.limiteCancellazioneMinuti = payload.limiteCancellazioneMinuti * 60;\n                    break;\n                case 'd':\n                    payload.limiteCancellazioneMinuti = payload.limiteCancellazioneMinuti * 60 * 24;\n                    break;\n                default: // Già minuti\n                    break;\n            }\n        }\n        delete payload.limiteCancellazioneUM;\n        delete payload.dataCreazione;\n\n        const esito = await StruttureEventiAPI.SaveTipologiaLezioneAsync(idStruttura, payload);\n        actions.setSubmitting(false); //NOTA: essendo async non è tecnicamente necessaria questa chiamata, la fa Formik implicitamente\n        if (esito) {\n            enqueueSnackbar('Tipologia lezione salvata', {variant:'success'});\n            history.goBack(`/${urlRoute}/locations`);\n        }else{\n            enqueueSnackbar('Errore nel salvataggio', {variant:'error'});\n        }\n    }\n\n\n    function isFetchingInProgress() {\n        return tipoLezioneIsLoading;\n    }\n\n    async function formValidateAsync(values) {\n        const errors = {}\n        if (!values.nome) {\n            errors.nome = \"E' necessario specificare il nome\";\n        }\n        else if (!await StruttureEventiAPI.TipologiaLezioneCheckNomeAsync(idStruttura, values.id, values.nome)) {\n            errors.nome = \"Esiste già una tipologia lezione con questo nome\";\n        }\n        if (!values.durata && values.durata !== 0) {\n            errors.durata = \"Campo obbligatorio\";\n        } else if (values.durata <= 0) {\n            errors.durata = \"Durata non valida\"\n        }\n\n        if (values.maxPartecipanti === 0 || values.maxPartecipanti < 0) {\n            errors.maxPartecipanti = \"Valore non valido\"\n        }\n        _logger.debug(`StrutturaEditTipologiaLezione->formValidateAsync() - errors: ${JSON.stringify(errors)}`);\n        return errors;\n    }\n\n    function renderForm() {\n        return (\n            <Formik\n                initialValues={tipoLezione}\n                enableReinitialize={true}\n                validateOnChange={false}\n                onSubmit={handleFormSubmmit}\n                validate={formValidateAsync}\n            >\n                {\n                    (props, form) => (\n                        <Form onSubmit={props.handleSubmit} autoComplete=\"off\" className={classes.form}>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <TextField name='nome'\n                                        label='Tipologia lezione *'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.nome}\n                                        fullWidth\n                                        margin='normal'\n                                    />\n                                    <ErrorMessage className={classes.errorMessage} component=\"div\" name=\"nome\" />\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <TextField name='durata'\n                                        label='Durata *'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.durata}\n                                        InputProps={{ endAdornment: <InputAdornment position=\"end\">(minuti)</InputAdornment> }}\n                                        margin='normal'\n                                        type=\"number\"\n                                    />\n                                    <ErrorMessage className={classes.errorMessage} component=\"div\" name=\"durata\" />\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <TextField name='maxPartecipanti'\n                                        label='Limite partecipanti'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.maxPartecipanti}\n\n                                        margin='normal'\n                                        type=\"number\"\n                                    />\n                                    <ErrorMessage className={classes.errorMessage} component=\"div\" name=\"maxPartecipanti\" />\n                                </Grid>\n                                <Grid item xs={4} />\n                                <Grid item xs={4}>\n                                    <TextField name='limiteCancellazioneMinuti'\n                                        label='Preavviso Cancellazione'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.limiteCancellazioneMinuti}\n                                        InputProps={{\n                                            endAdornment: <InputAdornment position=\"end\">\n                                                <Select name='limiteCancellazioneUM'\n                                                    value={props.values.limiteCancellazioneUM}\n                                                    onChange={props.handleChange}\n                                                >\n                                                    <MenuItem value=\"m\">Minuti</MenuItem>\n                                                    <MenuItem value=\"h\">Ore</MenuItem>\n                                                    <MenuItem value=\"d\">Giorni</MenuItem>\n                                                </Select>\n                                            </InputAdornment>\n                                        }}\n                                        margin='normal'\n                                        type=\"number\"\n                                    />\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <TextField name='prezzo'\n                                        label='Prezzo'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.prezzo}\n                                        InputProps={{ endAdornment: <InputAdornment position=\"end\">(€)</InputAdornment> }}\n                                        margin='normal'\n                                        type=\"number\"\n                                    />\n                                </Grid>\n                                <Grid item xs={4} />\n                                <Grid item xs={12}>\n                                    <TextField name='descrizione'\n                                        label='Descrizione'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.descrizione}\n                                        fullWidth\n                                        margin='normal'\n                                        multiline\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                                    <Button size=\"large\" variant=\"contained\"\n                                        type=\"submit\"\n                                        className={classes.btnSalva}>Salva</Button>\n                                </Grid>\n                            </Grid>\n                        </Form>\n                    )\n                }\n            </Formik>\n        )\n    }\n\n    function renderLoading() {\n        return (\n            <R2DLoader/>\n        )\n    }\n\n    return (\n        <Paper className={classes.root}>\n            {!isFetchingInProgress() ? renderForm() : renderLoading()}\n        </Paper>\n    );\n\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaListaTipologiaAbbonamenti.js",["424","425","426","427"],"import log from 'loglevel';\nimport React, { useEffect, useState, Fragment } from 'react'\n\nimport { StruttureEventiAPI } from '../../api/strutture.eventi.api'\nimport { makeStyles, Grid, Box, Typography, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Button, IconButton, Paper, CircularProgress, Fab } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst _logger = log.getLogger('StrutturaListaTipologiaAbbonamenti');\n\nconst useStyles = makeStyles({\n    root: {\n        minHeight: '600px'\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n\nexport default (props) => {\n    const idStruttura = props.idStruttura;\n    const urlRoute = props.urlRoute;\n\n    const [isLoading, setIsLoading] = useState(true);\n    const [tipologieAbbonamenti, setTipologieAbbonamenti] = useState(null);\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        async function fetchTipologieAbbonamenti(page, pageSize) {\n            _logger.debug(`StrutturaListaTipologiaAbbonamenti->useEffect()->fetchTipologieAbbonamenti(idStruttura: ${idStruttura})`);\n            const data = await StruttureEventiAPI.FetchTipologieAbbonamentiAsync(idStruttura, page, pageSize);\n            setTipologieAbbonamenti(data ?? []);\n            setIsLoading(false);\n        }\n\n        if (idStruttura && idStruttura > 0) {\n            //TODO: Gestire la paginazione\n            fetchTipologieAbbonamenti(1, 500);\n        }\n    }, [idStruttura])\n\n    function renderLoading() {\n        return (\n            <CircularProgress />\n        )\n    }\n\n    function renderNoData() {\n        return (\n            <Typography variant=\"h6\">Nessuna Tipologia Abbonamento</Typography>\n        )\n    }\n\n    function renderComponent() {\n        return (\n            <Box>\n                <Box>\n                    <Typography variant=\"h5\" align=\"center\" >Gestione Tipologie Abbonamenti</Typography>\n                    <Fab color=\"primary\" aria-label=\"add\" style={{float:\"right\", marginRight:\"20px\", marginTop:\"-10px\"}} component={Link} to={`/${urlRoute}/abbonamenti/new`}>\n                        <AddIcon />\n                    </Fab>\n                </Box>\n                {tipologieAbbonamenti && tipologieAbbonamenti.length > 0 ?\n                    <TableContainer>\n                        <Table className={classes.table} aria-label=\"Elenco tipologie abbonamenti\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Nome</TableCell>\n                                    <TableCell align=\"center\">Durata (mesi)</TableCell>\n                                    <TableCell align=\"center\">Prezzo</TableCell>\n                                    <TableCell align=\"center\">Num. Ingressi</TableCell>\n                                    <TableCell align=\"center\"></TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {tipologieAbbonamenti.map(l => (\n                                    <TableRow key={l.id}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {l.nome}\n                                        </TableCell>\n                                        <TableCell align=\"center\">{l.durataMesi}</TableCell>\n                                        <TableCell align=\"center\">{(l.costo || l.costo === 0) ? `${l.costo.toLocaleString()}\\u00A0€` : '-'}</TableCell>\n                                        <TableCell align=\"center\">{l.numIngressi}</TableCell>\n                                        <TableCell align=\"right\">\n                                            <IconButton aria-label=\"edit\" component={Link} to={`/${urlRoute}/lezioni/${l.id}`} >\n                                                <EditIcon />\n                                            </IconButton>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    :\n                    renderNoData()\n                }\n            </Box>\n        )\n    }\n\n    return (\n        <Paper className={classes.root}>\n            {isLoading ? renderLoading() : (tipologieAbbonamenti.length > 0 ? renderComponent() : renderNoData())}\n        </Paper>\n    )\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaEditTipologiaAbbonamento.js",["428","429","430","431","432"],"import log from \"loglevel\";\nimport React, { useState, useEffect } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { makeStyles, CircularProgress, Grid, TextField, Button, Paper, InputAdornment } from \"@material-ui/core\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { StruttureEventiAPI } from \"../../api/strutture.eventi.api\";\nimport { DateTimePicker, DatePicker } from \"@material-ui/pickers\";\nimport { useSnackbar } from \"notistack\";\n\nconst _logger = log.getLogger(\"StrutturaEditTipologiaAbbonamento\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"400px\",\n  },\n  form: {\n    padding: \"20px\",\n  },\n  colorePickerLabel: {\n    transform: \"translate(0, 1.5px) scale(0.75)\",\n    transformOrigin: \"top left\",\n  },\n  colorePicker: {\n    marginTop: \"24px\",\n  },\n  btnSalva: {\n    marginTop: \"50px\",\n    backgroundColor: \"#E31F4F\",\n    color: \"white\",\n    margin: \"auto\",\n  },\n  errorMessage: {\n    color: \"red\",\n    fontSize: \"0.7rem\",\n  },\n}));\n\nexport default (props) => {\n  const idStruttura = props.idStruttura;\n  let { idTipoAbbonamento } = useParams(); //Leggiamo l'idLocation dall'url\n  let history = useHistory();\n  const [tipoAbbonamentoIsLoading, setTipoAbbonamentoIsLoading] = useState(true);\n  const [tipoAbbonamento, setTipoAbbonamento] = useState(null);\n\n  const classes = useStyles();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  _logger.debug(`StrutturaEditTipologiaAbbonamento - idStruttura:${idStruttura}, idTipoAbbonamento: ${idTipoAbbonamento}`);\n\n  useEffect(() => {\n    async function fetchAbbonamento(idStruttura, idTipoAbbonamento) {\n      const data = await StruttureEventiAPI.FetchTipologiaAbbonamentoSingleAsync(idStruttura, idTipoAbbonamento);\n      _logger.debug(`StrutturaEditTipologiaAbbonamento->useEffect()->fetchedAbbonamento(${idStruttura}, ${idTipoAbbonamento}) => ${JSON.stringify(data)}`);\n      //facciamo l'override dei campi null per esigenze di Formik\n      if (data) {\n        data.durataMesi = data.durataMesi ?? \"\";\n        data.numIngressi = data.numIngressi ?? \"\";\n        data.costo = data.costo ?? \"\";\n        data.maxLivCorsi = data.maxLivCorsi ?? \"\";\n      }\n      setTipoAbbonamento(data);\n      setTipoAbbonamentoIsLoading(false);\n    }\n    if (idStruttura > 0 && !isNaN(idTipoAbbonamento) && idTipoAbbonamento > 0) {\n      fetchAbbonamento(idStruttura, idTipoAbbonamento);\n    } else if (idStruttura > 0 && isNaN(idTipoAbbonamento)) {\n      //Inizializiamo un oggetto vuoto per gestire il caso di nuova location\n      setTipoAbbonamento({\n        id: -1,\n        idCliente: idStruttura,\n        nome: \"\",\n        durataMesi: \"\",\n        numIngressi: \"\",\n        costo: \"\",\n        maxLivCorsi: \"\",\n      });\n      setTipoAbbonamentoIsLoading(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [idStruttura, idTipoAbbonamento]);\n\n  const handleFormSubmmit = async (values, actions) => {\n    _logger.debug(`StrutturaEditTipologiaAbbonamento->FormSubmit() - values: ${JSON.stringify(values)}`);\n    let payload = Object.assign({}, values);\n    if (payload.durataMesi === \"\") {\n      payload.durataMesi = null;\n    }\n    if (payload.numIngressi === \"\") {\n      payload.numIngressi = null;\n    }\n    if (payload.costo === \"\") {\n      payload.costo = null;\n    }\n    if (payload.maxLivCorsi === \"\") {\n      payload.maxLivCorsi = 0;\n    }\n    const esito = await StruttureEventiAPI.SaveTipologiaAbbonamentoAsync(idStruttura, payload);\n    actions.setSubmitting(false); //NOTA: essendo async non è tecnicamente necessaria questa chiamata, la fa Formik implicitamente\n    if (esito) {\n      enqueueSnackbar(\"Sala salvata\", { variant: \"success\" });\n      history.goBack();\n    } else {\n      enqueueSnackbar(\"Errore nel salvataggio\", { variant: \"error\" });\n    }\n  };\n\n  function isFetchingInProgress() {\n    return tipoAbbonamentoIsLoading;\n  }\n\n  async function formValidateAsync(values) {\n    const errors = {};\n    if (!values.nome) {\n      errors.nome = \"E' necessario specificare il nome\";\n    }\n    if (!(await StruttureEventiAPI.TipologiaAbbonamentoCheckNomeAsync(idStruttura, values.id, values.nome))) {\n      errors.nome = \"Esiste già un abbonamento con questo nome\";\n    }\n\n    if ((!values.durataMesi || values.durataMesi <= 0) && (!values.numIngressi || values.numIngressi <= 0)) {\n      errors.durataMesi = \"E' necessario specificare almeno uno tra Durata e Numero Ingressi\";\n      errors.numIngressi = \"E' necessario specificare almeno uno tra Durata e Numero Ingressi\";\n    }\n\n    _logger.debug(`StrutturaEditTipologiaAbbonamento->formValidateAsync() - errors: ${JSON.stringify(errors)}`);\n    return errors;\n  }\n\n  function renderForm() {\n    return (\n      <Formik initialValues={tipoAbbonamento} enableReinitialize={true} onSubmit={handleFormSubmmit} validateOnChange={false} validate={formValidateAsync}>\n        {(props, form) => (\n          <Form onSubmit={props.handleSubmit} autoComplete=\"off\" className={classes.form}>\n            <Grid container>\n              <Grid item xs={8}>\n                <TextField name=\"nome\" label=\"Tipologia abbonamento\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.nome} fullWidth margin=\"normal\" />\n                <ErrorMessage className={classes.errorMessage} component=\"span\" name=\"nome\" />\n              </Grid>\n              <Grid item xs={4} />\n\n              <Grid item xs={4}>\n                <TextField name=\"durataMesi\" label=\"Durata mesi\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.durataMesi} margin=\"normal\" type=\"number\" />\n                <ErrorMessage className={classes.errorMessage} component=\"span\" name=\"durataMesi\" />\n              </Grid>\n              <Grid item xs={4}>\n                <TextField name=\"numIngressi\" label=\"Numero Ingressi\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.numIngressi} margin=\"normal\" type=\"number\" />\n              </Grid>\n              <Grid item xs={4} />\n              {/* <Grid item xs={4}>\n                                    <TextField name='maxLivCorsi'\n                                        label='Livello Massimo Corsi'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.maxLivCorsi}\n                                        // InputProps={{endAdornment:<InputAdornment position=\"end\">(minuti)</InputAdornment>}}\n                                        margin='normal'\n                                        type=\"number\"\n                                    />\n                                </Grid> */}\n              <Grid item xs={4}>\n                <TextField\n                  name=\"costo\"\n                  label=\"Prezzo\"\n                  onChange={props.handleChange}\n                  onBlur={props.handleBlur}\n                  value={props.values.costo}\n                  InputProps={{ endAdornment: <InputAdornment position=\"end\">(€)</InputAdornment> }}\n                  margin=\"normal\"\n                  type=\"number\"\n                />\n              </Grid>\n              {/* <Grid item xs={4}>\n                                    <Field name='validoDal'>\n                                        {({ field, form }) =>\n                                            (\n                                                <DatePicker name={field.name}\n                                                    margin=\"normal\"\n                                                    fullWidth\n                                                    //minDate={new Date()}\n                                                    label='Valido dal'\n                                                    value={field.value}\n                                                    onChange={dateTime => form.setFieldValue(field.name, dateTime, true)}\n                                                    format=\"dd MMMM yyyy\" />\n                                            )}\n                                    </Field>\n                                </Grid> */}\n              {/* <Grid item xs={12}>\n                                    <TextField name='descrizione'\n                                        label='Descrizione'\n                                        onChange={props.handleChange}\n                                        onBlur={props.handleBlur}\n                                        value={props.values.descrizione}\n                                        fullWidth\n                                        margin='normal'\n                                        multiline\n                                    />\n                                </Grid> */}\n\n              <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                <Button size=\"large\" variant=\"contained\" type=\"submit\" className={classes.btnSalva}>\n                  Salva\n                </Button>\n              </Grid>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    );\n  }\n\n  function renderLoading() {\n    return <CircularProgress />;\n  }\n\n  return <Paper className={classes.root}>{!isFetchingInProgress() ? renderForm() : renderLoading()}</Paper>;\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtenteLayout.js",["433"],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtenteProfilo.js",["434","435","436"],"import log from \"loglevel\";\nimport React, { Fragment } from \"react\";\nimport { Paper, makeStyles } from \"@material-ui/core\";\nimport UtenteProfiloEdit from \"./UtenteProfiloEdit\";\nimport UtenteStruttureSeguite from \"./UtenteStruttureSeguite\";\nimport UtentePrenotazioniList from \"./UtentePrenotazioniList\";\nimport { Container } from \"@material-ui/core\";\n\nconst _logger = log.getLogger(\"UtenteProfiloEdit\");\n\nconst useStyles = makeStyles((theme) => ({\n  image: {\n    marginTop: \"8px\",\n    marginBottom: \"8px\",\n    width: \"inherit\",\n  },\n}));\n\nexport default (props) => {\n  const classes = useStyles();\n\n  return (\n    <Fragment>\n      {/* ads */}\n      <Container>\n        <img className={classes.image} src=\"/images/tinto.png\" alt=\"tinto\" />\n      </Container>\n      <UtenteProfiloEdit />\n      <UtenteStruttureSeguite />\n      <UtentePrenotazioniList />\n      {/* ads */}\n      <Container>\n        <img className={classes.image} src=\"/images/tinto.png\" alt=\"tinto\" />\n      </Container>\n    </Fragment>\n  );\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtentePrenotazioni.js",["437","438","439","440","441","442","443","444","445"],"import log from 'loglevel'\nimport React, { Fragment } from 'react'\nimport { makeStyles, Paper, Typography, Button, Grid } from '@material-ui/core'\nimport addYears from 'date-fns/addYears'\nimport formatISO from 'date-fns/formatISO'\nimport parseISO from 'date-fns/parseISO'\nimport format from 'date-fns/format'\nimport { it as itLocal } from 'date-fns/locale'\nimport MUIDataTable from \"mui-datatables\";\nimport R2DLoader from '../commons/R2DLoader';\nimport { UsersAPI } from '../../api/users.api'\nimport PageviewIcon from '@material-ui/icons/Pageview';\nimport { Link } from 'react-router-dom'\nimport { DatePicker } from \"@material-ui/pickers\";\nimport startOfDay from 'date-fns/startOfDay'\nimport { UtentePrenotazioniFilter } from './UtentePrenotazioneFilter'\n\nconst _logger = log.getLogger('UtentePrenotazioni')\n\nconst useStyles = makeStyles(theme => ({\n    root:{\n        minHeight: '600px',\n    },\n    dataTable:{\n        minHeight: '600px',\n    },\n    datePickerFilter: {\n        paddingRight: \"5px\",\n        paddingLeft: \"5px\",\n        fontSize: \"0.7rem\"\n    },\n    dtPickerInput: {\n        fontSize: \"0.5rem\"\n    }\n}));\n\nexport const UtentePrenotazioni = (props) => {\n    const classes = useStyles();\n    //Destinato a contenere la lista dei valori per cui filtrare per ciascuna colonna \n    const [filters, setFilters] = React.useState({\n        from: startOfDay(new Date()),\n        to: null,\n        text: null\n    })\n    const [serverSideFilterList, setServerSideFilterList] = React.useState([]);\n\n    const [isLoading, setIsLoading] = React.useState(true);\n    const [appuntamenti, setAppuntamenti] = React.useState(null);\n    const [gridData, setGridData] = React.useState([]); //Dati renderizzati dalla griglia\n    const [columnsSortDirection, setColumnsSortDirection] = React.useState(['none', 'none', 'none', 'none']);\n    const [totalRows, setTotalRows] = React.useState(0);\n    const [currentPage, setCurrentPage] = React.useState(1);\n    const [rowsPerPage, setRowsPerPage] = React.useState(20);\n    const [fetchInProgress, setFetchInProgress] = React.useState(false);\n\n    React.useEffect(() => {\n        async function fetchAppuntamenti() {\n            const startDateISO = formatISO(filters.from);\n            const endDateISO = filters.to ? formatISO(filters.to) : '9999-12-31';\n\n            const data = await UsersAPI.GetCurrentUserAppuntamentiAsync(startDateISO, endDateISO, rowsPerPage, currentPage);\n            if (data && Array.isArray(data)) {\n                const tmp = data.map(v => [format(parseISO(v.schedule.dataOraInizio), 'P p', { locale: itLocal }),\n                v.nomeCliente,\n                v.schedule.title,\n                v.schedule.tipologiaLezione.nome,\n                v.urlRouteCliente\n                ]);\n                setGridData(tmp);\n                console.log(tmp);\n            }\n            setAppuntamenti(data);\n            setFetchInProgress(false)\n        }\n        setFetchInProgress(true);\n        fetchAppuntamenti();\n    }, [columnsSortDirection, currentPage, rowsPerPage, filters])\n\n    const gridColumns = [\n        {\n            name: \"DataEvento\",\n            label: \"Data Evento\",\n            options: {\n                filter: false,\n                sortDirection: columnsSortDirection[0],\n            },\n        },\n        {\n            name: \"Struttura\",\n            label: \"Struttura\",\n            options: {\n                filter: false,\n                sort: true,\n                sortDirection: columnsSortDirection[1]\n            },\n        },\n        {\n            name: \"Evento\",\n            label: \"Evento\",\n            options: {\n                filter: false,\n                sort: true,\n                sortDirection: columnsSortDirection[2],\n            }\n        },\n        {\n            name: \"TipoLezione\",\n            label: \"Tipo Lezione\",\n            options: {\n                filter: false,\n                sort: true,\n                sortDirection: columnsSortDirection[3],\n            }\n        },\n        {\n            name: \"Azioni\",\n            label: \" \",\n            options: {\n                viewColumns: false,\n                filter: false,\n                sort: false,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    // console.log('tableMeta');\n                    // console.log(tableMeta);\n                    let urlRoute = tableMeta.rowData[4];\n                    return (\n                        <Button size=\"small\" variant=\"outlined\"\n                            style={{ float: \"right\" }}\n                            startIcon={<PageviewIcon />}\n                            component={Link}\n                            to={`/${urlRoute}/`}>Vai a Struttura</Button>\n                    )\n                }\n            }\n        }\n    ]\n\n    const sortGrid = (column, order) => {\n        const newColumnsSortDirection = ['none', 'none', 'none', 'none'];\n        switch (column) {\n            case 'DataEvento':\n                newColumnsSortDirection[0] = order;\n                break;\n            case 'Struttura':\n                newColumnsSortDirection[1] = order;\n                break;\n            case 'Evento':\n                newColumnsSortDirection[2] = order;\n                break;\n            case 'TipoLezione':\n                newColumnsSortDirection[3] = order;\n                break;\n            default:\n                _logger.warn(`StrutturaListaUtenti->sortGrid(${column}, ${order}) - UNMANAGED COLUMN!`);\n                break;\n        }\n        setColumnsSortDirection(newColumnsSortDirection);\n    }\n\n    const gridOptions = {\n        responsive: 'stacked',\n        serverSide: true,\n        count: totalRows,\n        page: currentPage,\n        selectableRows: 'none',\n        rowsPerPage: rowsPerPage,\n        filter: false,\n        search:false,\n        print: false,\n        viewColumns:false,\n        elevation: 0,\n        //serverSideFilterList: serverSideFilterList,\n        onChangeRowsPerPage: (numberOfRows) => {\n            _logger.debug(`StrutturaListaUtenti->onChangeRowsPerPage(${numberOfRows})`)\n            setRowsPerPage(numberOfRows);\n        },\n        rowsPerPageOptions: [20, 50, 100],\n        onChangePage: (currentPage) => {\n            setCurrentPage(currentPage);\n        },\n        onColumnSortChange: (changedColumns, order) => {\n            _logger.debug(`StrutturaListaUtenti->onColumnSortChange(${changedColumns}, ${order})`)\n            sortGrid(changedColumns, order);\n        },\n        onFilterChange: (column, filterList, type) => {\n            _logger.debug(`StrutturaListaUtenti->onFilterChange(column: ${column}, filterList:${JSON.stringify(filterList)}, type: ${type})`)\n            _logger.debug(`filter:${filterList}`)\n            setFilters(filterList);\n        }\n    }\n\n    const handleFilterChanged = (newFilter) => {\n        console.log(\"Filter changed, need to refresh data\");\n        setFilters(newFilter);\n        return;\n    }\n\n    function renderLoading() {\n        return (\n            <R2DLoader />\n        )\n    }\n\n    function renderData() {\n        return (\n            <Fragment>\n                <Typography variant=\"h6\">Le mie Prenotazioni</Typography>\n                \n                <MUIDataTable className={classes.dataTable} \n                title={<UtentePrenotazioniFilter onFilterChange={handleFilterChanged} filters={filters} />}\n                    data={gridData} columns={gridColumns} options={gridOptions} />\n            </Fragment>\n        )\n    }\n\n    return (\n        <Paper className={classes.root}>\n            {fetchInProgress ? renderLoading() : renderData()}\n        </Paper>\n    )\n\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/registrazione/RegisterStrutturaStep1.js",["446","447","448","449"],"import React from 'react'\nimport { Paper, Typography, makeStyles, TextField, Grid, Card, Tooltip, Box, Button } from '@material-ui/core'\nimport InfoIcon from '@material-ui/icons/Info';\nimport { StruttureAPI } from '../../api/strutture.api';\nimport log from 'loglevel';\n\nconst _logger = log.getLogger('RegistrazioneStrutturaStep1');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: 15,\n        padding: 20\n    },\n    registrationField: {\n        width: '90%'\n    },\n    tooltipIcon: {\n        float: \"right\",\n        color: '#6b6c6e',\n        // paddingTop: 5,\n        margin: 'auto',\n        height: '100%'\n    },\n    actionsRow: {\n        textAlign: \"center\"\n    },\n    buttonBack: {\n        minWidth: '120px',\n        minHeight: '50px',\n        marginTop: '60px',\n        float:'left'\n    },\n    buttonNext: {\n        minWidth: '320px',\n        minHeight: '50px',\n        marginTop: '60px',\n        float:'right'\n    }\n\n}));\n\nexport default (props) => {\n    const MIN_URLROUTE_LENGTH = 4;\n    const MIN_NOME_STRUTTURA_LENGTH = 3;\n    const MIN_DESCRIZIONE_LENGTH = 30;\n\n    const classes = useStyles();\n\n    const onDataSubmittedHandler = props.onDataSubmittedHandler;\n    const onBack = props.onBack;\n\n    const [nomeStruttura, setNomeStruttura] = React.useState(props?.datiStruttura?.nomeStruttura ?? '');\n    const [urlRoute, seturlRoute] = React.useState(props?.datiStruttura?.urlRoute ?? '');\n    const [descrizione, setDescrizione] = React.useState(props?.datiStruttura?.descrizione ?? '');\n\n    const [urlRouteValid, seturlRouteValid] = React.useState(true);\n    const [urlRouteErrorMessage, seturlRouteErrorMessage] = React.useState('');\n    const [nomeStrutturaValid, setNomeStrutturaValid] = React.useState(true);\n    const [nomeStrutturaErrorMessage, setNomeStrutturaErrorMessage] = React.useState('');\n    const [descrizioneValid, setDescrizioneValid] = React.useState(true);\n    const [descrizioneErrorMessage, setDescrizioneErrorMessage] = React.useState('');\n\n    React.useEffect(() => {\n        async function checkurlRoute(urlRoute) {\n            _logger.debug(`Verifica Url: ${urlRoute}`);\n            const esito = await StruttureAPI.CheckUrlStruttura(urlRoute);\n            _logger.debug(`Esito verifica Url: ${urlRoute} = ${esito}`);\n            seturlRouteValid(esito);\n            if (!esito) {\n                _logger.debug(`Esito non valido, imposto il messaggio di errore`);\n                seturlRouteErrorMessage(\"L'identitificativo inserito non è valido oppure risulta già utilizzato\");\n            } else {\n                _logger.debug(`Esito valido.`);\n                seturlRouteErrorMessage(\"\"); //reset messaggio d'errore\n            }\n        }\n        if (urlRoute && urlRoute.length >= MIN_URLROUTE_LENGTH) {\n            checkurlRoute(urlRoute);\n        }\n    }, [urlRoute]);\n\n\n    const handleChange = async (syntEvent, fieldName) => {\n        const newValue = syntEvent.target.value;\n        switch (fieldName) {\n            case 'NOME_STRUTTURA':\n                setNomeStruttura(newValue);\n                break;\n            case 'urlRoute_STRUTTURA':\n                seturlRoute(newValue);\n                break;\n            case 'DESCRIZIONE_STRUTTURA':\n                setDescrizione(newValue);\n                break;\n            default:\n                throw new Error('INVALID FIELD NAME');\n        }\n        ValidateFields();\n    }\n\n    const ValidateFields = () => {\n        _logger.debug(`Inizio validazione form. urlRouteValid: ${urlRouteValid}, nomeStrutturaValid: ${nomeStrutturaValid}, descrizioneValid: ${descrizioneValid}`)\n        if (!(nomeStruttura && nomeStruttura.length >= MIN_NOME_STRUTTURA_LENGTH)) {\n            setNomeStrutturaValid(false);\n            setNomeStrutturaErrorMessage(`Inserire un nome di almento ${MIN_NOME_STRUTTURA_LENGTH} caratteri`);\n            return false;\n        }else{\n            setNomeStrutturaValid(true);\n            setNomeStrutturaErrorMessage(null);\n        }\n        if (!(urlRoute && urlRoute.length >= MIN_URLROUTE_LENGTH)) {\n            seturlRouteValid(false);\n            seturlRouteErrorMessage(`Inserire un identificativo di almeno ${MIN_URLROUTE_LENGTH} caratteri`);\n            return false;\n        }else{\n            seturlRouteValid(true);\n            seturlRouteErrorMessage(null);\n        }\n        if (!(descrizione && descrizione.length >= MIN_DESCRIZIONE_LENGTH)) {\n            setDescrizioneValid(false);\n            setDescrizioneErrorMessage(\"La descrizione della struttura risulta troppo breve\")\n            return false;\n        }else{\n            setDescrizioneValid(true);\n            setDescrizioneErrorMessage(null)\n        }\n\n        return true;\n    }\n\n    const handleOnNext = async (syntEvent) => {\n        if (!ValidateFields()) { return; }\n        if (onDataSubmittedHandler) {\n            onDataSubmittedHandler(0, \n                {\n                nome: nomeStruttura,\n                urlRoute,\n                descrizione\n            });\n        }\n    }\n\n    const handleOnBack = (e) => {\n        if (onBack) { onBack(0); }\n    }\n\n    return (\n        <Box className={classes.root}>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <TextField\n                        className={classes.registrationField}\n                        label=\"Nome della Struttura\"\n                        error={!nomeStrutturaValid}\n                        helperText={nomeStrutturaErrorMessage}\n                        value={nomeStruttura}\n                        onChange={(e) => { handleChange(e, 'NOME_STRUTTURA') }}\n                    />\n                    <Tooltip title=\"Inserire il nome della struttura così come sarà visualizzato nel profilo\">\n                        <InfoIcon className={classes.tooltipIcon} fontSize=\"large\" />\n                    </Tooltip>\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        className={classes.registrationField}\n                        label=\"Identificativo WEB della Struttura\"\n                        error={!urlRouteValid}\n                        helperText={urlRouteErrorMessage}\n                        value={urlRoute}\n                        onChange={(e) => { handleChange(e, 'urlRoute_STRUTTURA') }}\n                    />\n                    <Tooltip title=\"Inserire l'identificativo utilizzato per costrutire l'indirizzo web a cui sarà raggiungibile la struttura. Ad esempio, inserendo l'identificato palestra-prova, l'indirizzo della struttura sarà https://www.ready2do/palestra-prova\">\n                        <InfoIcon className={classes.tooltipIcon} fontSize=\"large\" />\n                    </Tooltip>\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        className={classes.registrationField}\n                        label=\"Descrizione della Struttura\"\n                        error={!descrizioneValid}\n                        helperText={descrizioneErrorMessage}\n                        value={descrizione}\n                        multiline\n                        rows= {4}\n                        onChange={(e) => { handleChange(e, 'DESCRIZIONE_STRUTTURA') }}\n                    />\n                    <Tooltip title=\"Inserire un testo descrittivo della struttura che sarà visulizzato nel profilo.\">\n                        <InfoIcon className={classes.tooltipIcon} fontSize=\"large\" />\n                    </Tooltip>\n                </Grid>\n                <Grid item xs={12} className={classes.actionsRow}>\n                <Button variant=\"contained\" color=\"secondary\" className={classes.buttonBack}\n                        onClick={handleOnBack}\n                    >Annulla</Button>\n                    <Button variant=\"contained\" color=\"primary\" className={classes.buttonNext}\n                        onClick={handleOnNext}\n                    >Avanti</Button>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/registrazione/RegisterStrutturaStep2.js",["450","451","452","453","454","455","456"],"import {\n  Box,\n  Button,\n  CircularProgress,\n  Grid,\n  makeStyles,\n  TextField,\n  Tooltip,\n  Input,\n  FormControl,\n  InputLabel,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport {\n  Autocomplete,\n  GoogleMap,\n  useLoadScript,\n  Marker,\n} from \"@react-google-maps/api\";\nimport * as EmailValidator from \"email-validator\";\nimport log from \"loglevel\";\nimport React, { useState } from \"react\";\nimport config from \"../../config\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { pl } from \"date-fns/locale\";\n\nconst _logger = log.getLogger(\"RegistrazioneStrutturaStep1\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: 15,\n    padding: 20,\n  },\n  registrationField: {\n    width: \"90%\",\n  },\n  tooltipIcon: {\n    float: \"right\",\n    color: \"#6b6c6e\",\n    // paddingTop: 5,\n    margin: \"auto\",\n    height: \"100%\",\n  },\n  actionsRow: {\n    textAlign: \"center\",\n  },\n  buttonBack: {\n    minWidth: \"120px\",\n    minHeight: \"50px\",\n    marginTop: \"60px\",\n    float: \"left\",\n  },\n  buttonNext: {\n    float: \"right\",\n    minWidth: \"320px\",\n    minHeight: \"50px\",\n    marginTop: \"60px\",\n  },\n  googleAutocomplete: {\n    display: \"inline\",\n  },\n  googleAutocompleteInput: {\n    \"&::placeholder\": {\n      color: \"red\",\n      opacity: 1,\n    },\n    \"&::-ms-input-placeholder\": {\n      color: \"red\",\n    },\n  },\n}));\n\nexport default (props) => {\n  const MIN_NOME_STRUTTURA_LENGTH = 3;\n  const MIN_DESCRIZIONE_LENGTH = 30;\n\n  const onDataSubmittedHandler = props.onDataSubmittedHandler;\n  const onBack = props.onBack;\n\n  const classes = useStyles();\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: config.GoogleAPI.MapsKey,\n    language: \"it-IT\",\n    libraries: config.GoogleAPI.Libraries,\n  });\n\n  const [email, setEmail] = React.useState(props?.datiStruttura?.email ?? \"\");\n  const [phone, setPhone] = React.useState(props?.datiStruttura?.phon ?? \"\");\n  const [ragSociale, setRagSociale] = React.useState(\n    props?.datiStruttura?.ragSociale ?? \"\"\n  );\n  const [indirizzo, setIndirizzo] = React.useState(\n    props?.datiStruttura?.indirizzo ?? \"\"\n  );\n\n  const [emailValid, setEmailValid] = React.useState(true);\n  const [emailErrorMsg, setEmailErrorMsg] = React.useState(\"\");\n  const [telefonoValid, setTelefonoValid] = React.useState(true);\n  const [telefonoErrorMsg, setTelefonoErrorMsg] = React.useState(\"\");\n  const [ragioneSocialeValid, setRagioneSocialeValid] = React.useState(true);\n  const [ragioneSocialeErrorMsg, setRagioneSocialeErrorMsg] = React.useState(\n    \"\"\n  );\n  const [indirizzoValid, setIndirizzoValid] = React.useState(true);\n  const [indirizzoErrorMsg, setIndirizzoErrorMsg] = React.useState(\"\");\n  const [autocomplete, setAutocomplete] = useState(null);\n\n  const [lat, setLat] = React.useState(null);\n  const [lng, setLng] = React.useState(null);\n\n  const randomName = uuidv4();\n\n  const handleChange = async (syntEvent, fieldName) => {\n    const newValue = syntEvent.target.value;\n    switch (fieldName) {\n      case \"EMAIL_STRUTTURA\":\n        setEmail(newValue);\n        break;\n      case \"TELEFONO_STRUTTURA\":\n        setPhone(newValue);\n        break;\n      case \"RAGIONE_SOCIALE_STRUTTURA\":\n        setRagSociale(newValue);\n        break;\n      case \"INDIRIZZO_STRUTTURA\":\n        setIndirizzo(newValue);\n        break;\n      default:\n        throw new Error(\"INVALID FIELD NAME\");\n    }\n    ValidateFields();\n  };\n\n  const ValidateFields = () => {\n    if (!email) {\n      setEmailValid(false);\n      setEmailErrorMsg(\"E' necessario inserire l'email\");\n    } else if (!EmailValidator.validate(email)) {\n      setEmailValid(false);\n      setEmailErrorMsg(\"Indirizzo email non valido\");\n    } else {\n      setEmailValid(true);\n      setEmailErrorMsg(null);\n    }\n\n    if (!phone) {\n      setTelefonoValid(false);\n      setTelefonoErrorMsg(\n        \"E' necessario specificare il numero telefonico della struttura\"\n      );\n    } else if (phone.length < 6 || !phone.match(/[+0-9]+/g)) {\n      setTelefonoValid(false);\n      setTelefonoErrorMsg(\n        \"Il numero telefonico della struttura non è in un formato valido\"\n      );\n      return false;\n    } else {\n      setTelefonoValid(true);\n      setTelefonoErrorMsg(null);\n    }\n\n    if (!ragSociale) {\n      setRagioneSocialeValid(false);\n      setRagioneSocialeErrorMsg(\n        \"E' necessario specificare la ragione sociale della struttura\"\n      );\n    } else if (ragSociale.length < 3) {\n      setRagioneSocialeValid(false);\n      setRagioneSocialeErrorMsg(\"La ragione sociale specificata non è valida\");\n      return false;\n    } else {\n      setRagioneSocialeValid(true);\n      setRagioneSocialeErrorMsg(null);\n    }\n\n    if (!indirizzo) {\n      setIndirizzoValid(false);\n      setRagioneSocialeErrorMsg(\n        \"E' necessario specificare la ragione sociale della struttura\"\n      );\n    } else if (indirizzo.length < 3) {\n      setIndirizzoValid(false);\n      setRagioneSocialeErrorMsg(\"La ragione sociale specificata non è valida\");\n      return false;\n    } else {\n      setIndirizzoValid(true);\n      setRagioneSocialeErrorMsg(null);\n    }\n\n    return true;\n  };\n\n  const handleOnNext = async (syntEvent) => {\n    if (!ValidateFields()) {\n      return;\n    }\n    if (onDataSubmittedHandler) {\n     _logger.log(`RegisterStrutturaStep2 - handleOnNext -> RAW indirizzo: ${JSON.stringify(indirizzo)}`)\n      const dati = {\n        email,\n        phone,\n        ragSociale,\n        indirizzo: indirizzo?.indirizzo,\n        citta: indirizzo?.citta?.short_name,\n        cap: indirizzo?.zipOrPostalCode?.short_name,\n        country: indirizzo?.contry?.long_name,\n        coordinate: {\n            lat:lat,\n            long: lng\n        },\n      };\n      _logger.log(`RegisterStrutturaStep2 - handleOnNext -> dati: ${JSON.stringify(dati)}`)\n      onDataSubmittedHandler(1, dati);\n    }\n  };\n\n  const handleOnBack = (e) => {\n    if (onBack) {\n      onBack(1);\n    }\n  };\n\n  const onGoogleAutocompleteLoad = (a) => {\n    _logger.log(`Google Autocomplete loaded - ${a}`);\n    setAutocomplete(a);\n  };\n\n  const onGoogleAutocompletePlaceChanged = () => {\n    if (autocomplete !== null) {\n      let place = autocomplete.getPlace();\n      console.log(`Place: ${JSON.stringify(place)}`);\n      //Se l'utente non ha selezionato una voce dalla lista proposta viene valorizzato solo il campo name (che altrimenti non esiste)\n      if (!place || place.name) {\n        setIndirizzoValid(false);\n        setIndirizzoErrorMsg(\"Selezionare un indirizzo tra quelli proposti\");\n        setIndirizzo(null);\n        return;\n      } else {\n        setIndirizzoValid(true);\n        setIndirizzoErrorMsg(null);\n        setIndirizzo({\n          indirizzo: place.formatted_address,\n          citta: place?.address_components?.find((c) =>\n            c.types.find((t) => t === \"administrative_area_level_3\")\n          ),\n          zipOrPostalCode: place?.address_components?.find((c) =>\n            c.types.find((t) => t === \"postal_code\")\n          ),\n          country: place?.address_components?.find((c) =>\n            c.types.find((t) => t === \"country\")\n          ),\n          location: {\n            lat: place?.geometry?.location?.lat,\n            long: place?.geometry?.location?.lng,\n          },\n        });\n        setLat(place?.geometry?.location?.lat);\n        setLng(place?.geometry?.location?.lng);\n      }\n    }\n    console.log(`Indirizzo: ${JSON.stringify(indirizzo)}`);\n  };\n\n  return (\n    <Box className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.registrationField}\n            label=\"Indirizzo email della Struttura\"\n            error={!emailValid}\n            helperText={emailErrorMsg}\n            value={email}\n            onChange={(e) => {\n              handleChange(e, \"EMAIL_STRUTTURA\");\n            }}\n          />\n          <Tooltip title=\"Inserire l'indirizzo email della struttura; sarà visualizzato nella sezione contatti del profilo\">\n            <InfoIcon className={classes.tooltipIcon} fontSize=\"large\" />\n          </Tooltip>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.registrationField}\n            label=\"Numero di telefono della Struttura\"\n            error={!telefonoValid}\n            helperText={telefonoErrorMsg}\n            value={phone}\n            onChange={(e) => {\n              handleChange(e, \"TELEFONO_STRUTTURA\");\n            }}\n          />\n          <Tooltip title=\"Inserire il numero di telefono della struttura; sarà visualizzato nella sezione contatti del profilo\">\n            <InfoIcon className={classes.tooltipIcon} fontSize=\"large\" />\n          </Tooltip>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.registrationField}\n            label=\"Ragione Sociale della Struttura\"\n            error={!ragioneSocialeValid}\n            helperText={ragioneSocialeErrorMsg}\n            value={ragSociale}\n            onChange={(e) => {\n              handleChange(e, \"RAGIONE_SOCIALE_STRUTTURA\");\n            }}\n          />\n          <Tooltip title=\"Inserire la Ragione Sociale completa della Struttura\">\n            <InfoIcon className={classes.tooltipIcon} fontSize=\"large\" />\n          </Tooltip>\n        </Grid>\n        <Grid item xs={12}>\n          <Box style={{ display: \"inline\" }}>\n            {isLoaded ? (\n              <Autocomplete\n                onLoad={onGoogleAutocompleteLoad}\n                onPlaceChanged={onGoogleAutocompletePlaceChanged}\n                fields={[\"address_components\", \"formatted_address\", \"geometry\"]}\n                className={classes.googleAutocomplete}\n              >\n                <FormControl className={classes.registrationField}>\n                  <InputLabel htmlFor={randomName}>\n                    Localizzazione della struttura\n                  </InputLabel>\n                  <Input\n                    id={randomName}\n                    type=\"text\"\n                    placeholder=\"Es: Via Giuseppe Verdi, 32, Firenze, FI\"\n                    className={classes.googleAutocompleteInput}\n                  />\n                  {/* {indirizzoValid ?  <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText> : ''} */}\n                </FormControl>\n              </Autocomplete>\n            ) : (\n              <CircularProgress></CircularProgress>\n            )}\n            <Tooltip title=\"Iniziare a digitare l'indirizzo della Struttura e selezionare una delle voci proposte\">\n              <InfoIcon className={classes.tooltipIcon} fontSize=\"large\" />\n            </Tooltip>\n          </Box>\n        </Grid>\n        <Grid item xs={12} className={classes.mapRow}>\n          {isLoaded && lat && lng && indirizzoValid ? (\n            <GoogleMap\n              id=\"circle-example\"\n              mapContainerStyle={{\n                height: \"300px\",\n                width: \"90%\",\n              }}\n              zoom={15}\n              center={{\n                lat: lat,\n                lng: lng,\n              }}\n            >\n              <Marker\n                label={ragSociale}\n                position={{\n                  lat: lat,\n                  lng: lng,\n                }}\n              />\n            </GoogleMap>\n          ) : (\n            \"\"\n          )}\n        </Grid>\n        <Grid item xs={12} className={classes.actionsRow}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.buttonBack}\n            onClick={handleOnBack}\n          >\n            Indietro\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.buttonNext}\n            onClick={handleOnNext}\n          >\n            Avanti\n          </Button>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/registrazione/RegisterStrutturaStep3.js",["457","458"],"import log from \"loglevel\";\nimport React from \"react\";\nimport { Redirect, useHistory } from \"react-router\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Grid, Button } from \"@material-ui/core\";\nimport { GoogleMap, Marker } from \"@react-google-maps/api\";\nimport { StruttureAPI } from \"../../api/strutture.api\";\nimport { authProvider } from '../../authProvider'\n\nconst _logger = log.getLogger(\"RegistrazioneStruttura\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  rootPaper: {\n    padding: 30,\n  },\n  title: {\n    textAlign: \"center\",\n    fontSize: \"1.5rem\",\n    fontWeight: 500,\n  },\n  backButton: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  label: {},\n  text: {},\n}));\n\nexport default (props) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const onBack = props.onBack;\n  const datiStruttura = props.datiStruttura ?? {};\n\n  const handleOnBack = (e) => {\n    if (onBack) {\n      onBack(2);\n    }\n  };\n\n  const handleRegistration = async (e) => {\n    _logger.debug(`handleRegistration - datiStruttura: ${datiStruttura}`);\n    await StruttureAPI.RegistraNuovoClienteAsync(datiStruttura);\n    authProvider.logout();\n    history.push(`/${datiStruttura?.urlRoute}`);\n  };\n\n  return (\n    <Box className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <div className={classes.label}>Nome della struttura</div>\n          <div className={classes.text}>{datiStruttura.nomeStruttura}</div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.label}>Descrizione della struttura</div>\n          <div className={classes.text}>\n            {datiStruttura.descrizione}\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.label}>\n            Identificativo WEB della struttura\n          </div>\n          <div className={classes.text}>{datiStruttura?.urlRoute\n          }</div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.label}>Indirizzo e-mail della struttura</div>\n          <div className={classes.text}>{datiStruttura?.email}</div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.label}>\n            Numero di telefono della struttura\n          </div>\n          <div className={classes.text}>{datiStruttura?.phone}</div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.label}>Ragione sociale</div>\n          <div className={classes.text}>{datiStruttura?.ragSociale}</div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.label}>Indirizzo</div>\n          <div className={classes.text}>\n            {datiStruttura?.indirizzo}\n          </div>\n        </Grid>\n        <Grid item xs={12} className={classes.mapRow}>\n          <GoogleMap\n            id=\"circle-example\"\n            mapContainerStyle={{\n              height: \"300px\",\n              width: \"90%\",\n            }}\n            zoom={15}\n            center={{\n              lat: datiStruttura?.coordinate?.lat,\n              lng: datiStruttura?.coordinate?.long\n              ,\n            }}\n          >\n            <Marker\n              label={datiStruttura.ragSociale}\n              position={{\n                lat: datiStruttura?.coordinate?.lat,\n                lng: datiStruttura?.coordinate?.long,\n              }}\n            />\n          </GoogleMap>\n        </Grid>\n        <Grid item xs={12} className={classes.actionsRow}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.buttonBack}\n            onClick={handleOnBack}\n          >\n            Indietro\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.buttonNext}\n            onClick={handleRegistration}\n          >\n            Avanti\n          </Button>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/store/actions/strutture.actions.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/store/actions/user.actions.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/store/selectors/strutture.selectors.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/store/selectors/user.selectors.js",["459"],"//import { createSelector } from 'reselect'\n\n// const getStruttureOwned = (state)=>{\n//     if (!state.user || !state.user.userIsAuthenticated) return null;\n//     return state.user.accountInfo.account.idToken.extension_struttureOwned?.split(\",\");\n// }\n\nconst getUserInfo = (state) => {\n    if (!state.user || !state.user.userIsAuthenticated) return null;\n    return {\n        id: state.user.accountInfo.account.accountIdentifier,\n        name: state.user.accountInfo.account.name,\n        givenName: state.user.accountInfo.account.idToken.given_name,\n        familyName: state.user.accountInfo.account.idToken.family_name,\n        isGlobalAdmin: state.user.accountInfo.account.idToken.extension_isGlobalAdmin,\n        struttureOwned: state.user.accountInfo.account.idToken.extension_struttureOwned?.split(\",\"),\n        dataConfermaEmail: state.user.accountInfo.account.idToken.extension_emailConfirmationDate\n    };\n}\n\nexport const UserSelectors = {\n    getAccessToken: (state) => state.user.currentUser?.accessToken,\n    getIdToken: (state) => state.user.currentUser?.idToken,\n    getStruttureOwned: (state) => state.user.currentUser?.struttureOwned ?? [],\n    getIdStruttureOwned: (state) => state.user.currentUser?.idStruttureOwned ?? [],\n    getStruttureSeguite: (state) => state.user.currentUser?.struttureSeguite ?? [],\n    getIdStrutturaCorrente: (state) => state.user?.idStrutturaAttiva,\n    getAppuntamenti: (state) => state.user?.currentUser?.appuntamenti,\n    getUserInfo: (state) => state.user?.currentUser\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/StrutturaDettaglioUtente.js",["460","461"],"import { Box, Grid, Paper, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport log from 'loglevel';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { StruttureUtentiAPI } from '../../../api/strutture.utenti.api';\nimport AbbonamentiUtenteSection from './AbbonamentiUtenteSection';\nimport CertificatiUtenteSection from './CertificatiUtenteSection';\nimport PrenotazioniUtenteSection from './PrenotazioniUtenteSection';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { Container } from '@material-ui/core';\n\nconst _logger = log.getLogger('StrutturaEditEvento')\nconst useStyles = makeStyles(theme => ({\n    image:{\n        marginTop: '8px',\n        marginBottom: '8px',\n        width: 'inherit'\n    },\n    paper:{\n        marginTop: '16px',\n    },\n    grid:{\n        padding: '12px'\n    }\n}));\n\nconst StrutturaDettaglioUtente = (props) => {\n    const classes = useStyles();\n    const idStruttura = props.idStruttura;\n    //Recuperiamo i parametri dall'url\n    let { idUtente } = useParams();\n    const [utenteStrutturaIsLoading, setUtenteStrutturaIsLoading] = useState(true);\n    const [utenteStruttura, setUtenteStruttura] = useState(null);\n    const [utenteAssociazioneIsLoading, setUtenteAssociazioneIsLoading] = useState(true);\n    const [utenteAssociazione, setUtenteAssociazione] = useState(null);\n    const [reloadNeeded, setReloadNeeded] = useState(false);\n\n    _logger.debug(`StrutturaDettaglioUtente -> idStruttura: ${idStruttura}, idUtente: ${idUtente}`);\n\n    //Lettura profilo utente\n    useEffect(() => {\n        async function fetchProfiloUtente(idStruttura, idUtente) {\n            const data = await StruttureUtentiAPI.FetchProfiloUtenteAsync(idStruttura, idUtente);\n            _logger.debug(`StrutturaEditLocation->useEffect()->fetchProfiloUtente(${idStruttura}, ${idUtente}) => ${JSON.stringify(data)}`);\n            setUtenteStruttura(data)\n            setUtenteStrutturaIsLoading(false);\n        }\n        fetchProfiloUtente(idStruttura, idUtente);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [idStruttura, idUtente]);\n\n    //Lettura Associazione Utente\n    useEffect(() => {\n        async function fetchAssociazioneUtente(idStruttura, idUtente) {\n            const data = await StruttureUtentiAPI.FetchDettagliAssociazioneUtenteAsync(idStruttura, idUtente);\n            _logger.debug(`StrutturaEditLocation->useEffect()->fetchAssociazioneUtente(${idStruttura}, ${idUtente}) => ${JSON.stringify(data)}`);\n            setUtenteAssociazione(data)\n            setUtenteAssociazioneIsLoading(false);\n            setReloadNeeded(false);\n        }\n        fetchAssociazioneUtente(idStruttura, idUtente);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [idStruttura, idUtente, reloadNeeded]);\n    \n\n    //Quando vengono modificati i dati dell'associzione rileggiamo tutto dalle API\n    const handleAssociazioneChange = () =>{\n        _logger.debug(`StrutturaDettaglioUtente->handleAssociazioneChange(): setReloadNeeded = true`);\n        setReloadNeeded(true);\n    }\n\n    return (\n        <Fragment>\n        {/* ads */}\n        <Container>\n            <img className={classes.image} src=\"/images/tinto.png\" alt=\"tinto\" />\n        </Container>\n        {/* SEZIONE DATI UTENTE */}\n        <Paper className={classes.paper}>\n            <Box >\n                <Grid container spacing={3} className={classes.grid}>\n                    <Grid item xs={12} md={1} >\n                    </Grid>\n                    <Grid item xs={12} md={10}>\n                        <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\">\n                            <Grid item xs={12}>\n                                <Typography variant=\"h5\" fontWeight=\"Bold\">Dati Utente</Typography>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} md={1}>\n                        <InfoIcon style={{ fontSize: 40, color: 'grey' }} ></InfoIcon>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Typography component=\"div\">\n                            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>Nome:</Box>\n                            <Box component=\"span\">{utenteStruttura?.nome}</Box>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Typography component=\"div\">\n                            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>Cognome:</Box>\n                            <Box component=\"span\">{utenteStruttura?.cognome}</Box>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={12}>\n                        <Typography component=\"div\">\n                            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>Nickname:</Box>\n                            <Box component=\"span\">{utenteStruttura?.displayName}</Box>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Typography component=\"div\">\n                            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>Telefono mobile:</Box>\n                            <Box component=\"span\">{utenteStruttura?.telephoneNumber}</Box>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Typography component=\"div\">\n                            <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>Email:</Box>\n                            <Box component=\"span\">{utenteStruttura?.email}</Box>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={12}></Grid>\n                    <Grid item xs={12} md={12}></Grid>\n                    <Grid item xs={12} md={12}></Grid>\n                </Grid>\n            </Box>\n        </Paper>\n\n        {/* SEZIONE Abbonamenti */}\n        <AbbonamentiUtenteSection idStruttura={idStruttura} idUtente={idUtente} abbonamenti={utenteAssociazione?.abbonamenti} reloadHandler={handleAssociazioneChange}/>\n\n        {/* SEZIONE Certificati */}\n        <CertificatiUtenteSection idStruttura={idStruttura} idUtente={idUtente} certificati={utenteAssociazione?.certificati} reloadHandler={handleAssociazioneChange} />\n\n        {/* SEZIONE Prenotazioni */}\n        <PrenotazioniUtenteSection idStruttura={idStruttura} idUtente={idUtente} prenotazioniConfermate={utenteAssociazione?.appuntamenti} \n                                    prenotazioniNonConfermate={utenteAssociazione?.appuntamentiDaConfermare} waitList = {utenteAssociazione?.appuntamentiInCoda}\n                                    abbonamenti={utenteAssociazione?.abbonamenti} reloadHandler={handleAssociazioneChange} />\n        <Container>\n            <img className={classes.image} src=\"/images/tinto.png\" alt=\"tinto\" />\n        </Container>\n    </Fragment>\n    )\n}\n\n\nexport default StrutturaDettaglioUtente;","/home/khoa/devjin/fe-react/src/ClientApp/src/components/commons/R2DHeader.js",["462","463","464","465","466","467","468","469"],"﻿import * as log from 'loglevel';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Typography, Badge, Menu, MenuItem, Box, ListItemIcon, Button } from '@material-ui/core';\n\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport { UserSelectors } from '../../store/selectors/user.selectors'\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport AzureAD, { AuthenticationState } from 'react-aad-msal';\nimport {authProvider} from '../../authProvider'\nimport {getStore} from '../../store/reduxStore'\nimport { NavLink } from 'react-router-dom';\n\nconst _logger = log.getLogger(\"R2DHeader\");\n\nconst drawerWidth = 240;\nconst headerTextColor = '#89C443';\n\nconst useStyles = makeStyles(theme => ({\n    appBar: {\n        //  paddingTop: '8px',\n        marginBottom: '8px',\n        height: '140px',\n        backgroundColor: 'white'\n    },\n    logo: {\n        width: '306px',\n        height: '126px',\n        marginTop: '6px',\n        marginLeft: '20px'\n    },\n    iconBox: {\n        marginRight: \"20px\"\n    },\n    headerIcon: {\n        color: headerTextColor,\n    },\n    headerMenu:{\n        color: headerTextColor\n    },\n    headerMenuItem:{\n        color: headerTextColor\n    },\n    loginBox: {\n        marginRight: \"5px\"\n    },\n    buttonLogin:{\n        backgroundColor: \"#89C443\",\n        color:\"white\",\n        width:\"100px\"\n    }\n}));\n\nexport default function R2DHeader() {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const currentUser = useSelector(UserSelectors.getUserInfo);\n    const isMenuOpen = Boolean(anchorEl);\n\n    function handleProfileMenuOpen(event) {\n        setAnchorEl(event.currentTarget);\n    }\n\n    function hanldeHeaderMenuClick(e) {\n        _logger.debug(\"R2DHeader->hanldeHeaderMenuClick\");\n        setAnchorEl(e.currentTarget);\n    }\n\n    function handleClose() {\n        _logger.debug(\"R2DHeader->handleClose\");\n        setAnchorEl(null);\n    }\n\n    function renderMenu(fnLogout) {\n        return (\n            <Menu\n                className={classes.headerMenu}\n                id='headerUserMenu'\n                getContentAnchorEl={null}\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n            >\n                <MenuItem>\n                    <ListItemIcon className={classes.headerMenuItem}>\n                        <span><AccountBoxIcon /> <NavLink to=\"/me/profilo\">IL MIO PROFILO</NavLink>\n                        </span>\n                    </ListItemIcon>\n                </MenuItem>\n                <MenuItem>\n                    <ListItemIcon className={classes.headerMenuItem}>\n                        <span>\n                        <FavoriteIcon /> I MIEI PREFERITI\n                        </span>\n                    </ListItemIcon>\n                </MenuItem>\n                <MenuItem>\n                    <ListItemIcon className={classes.headerMenuItem}>\n                        <span>\n                        <WatchLaterIcon /> <NavLink to=\"/me/prenotazioni\">LE MIE PRENOTAZIONI</NavLink>\n                        </span>\n                        </ListItemIcon>\n                        </MenuItem>\n                <MenuItem>\n                    <ListItemIcon className={classes.headerMenuItem}>\n                        <span>\n                        <NotificationsIcon /> NOTIFICHE\n                        </span>\n                    </ListItemIcon>\n                </MenuItem>\n                <MenuItem>\n                    <ListItemIcon className={classes.headerMenuItem} onClick={fnLogout}>\n                        <span>\n                        <ExitToAppIcon />LOGOUT\n                        </span>\n                    </ListItemIcon>\n                </MenuItem>\n            </Menu>\n        )\n    }\n\n\n    function RenderLoggedUserHeaderMenu(fnLogout) {\n        return (           \n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" className={classes.iconBox}\n            >\n                <AccountCircle className={classes.headerIcon} style={{ fontSize: 56 }} />\n                <Typography component=\"span\" style={{ color: headerTextColor, cursor: 'pointer' }} onClick={hanldeHeaderMenuClick}>\n                    {currentUser?.name}<ArrowDropDownIcon style={{ color: headerTextColor, verticalAlign: 'bottom' }} />\n                </Typography>\n                {renderMenu(fnLogout)}\n            </Box>\n        )\n    }\n\n    function RenderAnonymousUserHeaderMenu(fnLogin) {\n        return (\n            <Box display=\"flex\"  flexDirection=\"column-reverse\" className={classes.loginBox}>\n                <Button variant=\"contained\" className={classes.buttonLogin} onClick={fnLogin}>Accedi</Button>\n            </Box>\n        )\n    }\n\n    return (\n        <AppBar position=\"static\" className={classes.appBar}>\n            <Box display=\"flex\" justifyContent=\"space-between\">\n                <img className={classes.logo} src=\"/images/logo.png\" alt=\"logo\" />\n                <Box alignSelf=\"flex-end\">\n                <AzureAD provider={authProvider} reduxStore={getStore()}>\n                    {\n                        ({login,logout, authenticationState, error, accountInfo})=>{\n                            switch(authenticationState){\n                                case AuthenticationState.Authenticated:{\n                                    return RenderLoggedUserHeaderMenu(logout)\n                                }\n                                default: {\n                                    return RenderAnonymousUserHeaderMenu(login)\n                                }\n                            }\n                        }\n                    }\n                </AzureAD>\n                    {/* {currentUser ? RenderLoggedUserHeaderMenu() : RenderAnonymousUserHeaderMenu()} */}\n                </Box>\n            </Box>\n        </AppBar>\n    );\n}\n","/home/khoa/devjin/fe-react/src/ClientApp/src/store/sagas/sagas.utils.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/R2DClienteEditItem.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/IndirizzoEdit.js",["470"],"/* eslint-disable import/no-anonymous-default-export */\nimport * as log from \"loglevel\";\nimport React, { useState, Fragment } from \"react\";\n// import Fragment from '@material-ui/core'\nimport clsx from \"clsx\";\nimport { Typography, Paper, Box, Button, Tooltip } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport GoogleMapReact from \"google-map-react\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport RoomIcon from \"@material-ui/icons/Room\";\nimport { StruttureActionsCreator } from \"../../store/actions/strutture.actions\";\nimport { useDispatch } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    margin: theme.spacing(1, 0, 0, 0),\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  headerButtonContainer: {\n    flexGrow: 0,\n    // paddingLeft: '5px',\n    // paddingTop: '5px',\n  },\n  headerButton: {\n    height: \"24px\",\n    width: \"70px\",\n  },\n  headerButtonSizeSmall: {\n    padding: \"3px 6px\",\n    fontSize: theme.typography.pxToRem(11),\n    lineHeight: theme.typography.pxToRem(11),\n  },\n  headerButtonSave: {\n    color: \"#E31F4F\",\n  },\n  headerTitle: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n    textAlign: \"center\",\n  },\n  headerInfo: {\n    width: \"30px\",\n    flexGrow: 0,\n  },\n  contentBox: {\n    marginTop: \"10px\",\n    width: \"100%\",\n    // height: '250px'\n  },\n  map: {\n    height: \"250px !important\",\n    margin: \"8px 0px\",\n    // width: '100%'\n  },\n}));\nexport default (props) => {\n  const _logger = log.getLogger(\"IndirizzoEdit\");\n  const styles = useStyles();\n  const dispatch = useDispatch();\n  const [viewMode, setViewMode] = useState(props.viewMode || \"view\");\n  const [indirizzo, setIndirizzo] = useState(props.indirizzo || \"\");\n  const [coordinate, setCoordinate] = useState(\n    props.coordinate || {\n      lat: 59.95,\n      lng: 30.33,\n    }\n  );\n  const isInEdit = () => viewMode === \"edit\";\n\n  const handleButtonClick = (e) => {\n    if (isInEdit()) {\n      //Dispatch del nuovo valore allo store\n      //TUNING: Verificare se lo stato è cambiato effettivamente prima di fare il dispatch dell'azione\n      const action = StruttureActionsCreator.updateStrutturaProp(\n        \"indirizzo\",\n        indirizzo\n      );\n      _logger.debug(\n        `OrarioAperturaEdit->Salvataggio nuovo indirizzo - Dispatching action: ${JSON.stringify(\n          action\n        )}`\n      );\n      dispatch(action);\n      setViewMode(\"view\");\n    } else {\n      setViewMode(\"edit\");\n    }\n  };\n\n  return (\n    <Fragment>\n      <Paper className={styles.root}>\n        <Box className={styles.header}>\n          <Box className={styles.headerButtonContainer}>\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              classes={{ sizeSmall: styles.headerButtonSizeSmall }}\n              className={clsx(\n                styles.headerButton,\n                isInEdit() && styles.headerButtonSave\n              )}\n              onClick={handleButtonClick}\n            >\n              {isInEdit() ? \"Salva\" : \"Modifica\"}\n            </Button>\n          </Box>\n          <Box className={styles.headerTitle}>\n            <Typography variant=\"h6\">Indirizzo</Typography>\n          </Box>\n          <Box className={styles.headerInfo}>\n            <Tooltip title={props.tooltip}>\n              <InfoIcon></InfoIcon>\n            </Tooltip>\n          </Box>\n        </Box>\n        <Box className={styles.contentBox}>\n          {isInEdit() ? (\n            <Autocomplete\n              style={{ width: \"90%\" }}\n              onPlaceSelected={(place) => {\n                setIndirizzo(place?.formatted_address);\n              }}\n              types={[\"address\"]}\n              componentRestrictions={{ country: \"it\" }}\n            />\n          ) : (\n            <Typography variant=\"body2\" gutterBottom>\n              {indirizzo}\n            </Typography>\n          )}\n        </Box>\n      </Paper>\n      <Paper className={styles.map}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: \"AIzaSyB3QBIUnHrigeqjjnEmwZn717ixOCcMYUw\" }}\n          defaultCenter={coordinate}\n          defaultZoom={16}\n        >\n          <RoomIcon\n            color=\"secondary\"\n            lat={coordinate.lat}\n            lng={coordinate.lng}\n            text=\"My Marker\"\n          ></RoomIcon>\n        </GoogleMapReact>\n      </Paper>\n    </Fragment>\n  );\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/OrarioAperturaEdit.js",["471","472"],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/ImageGalleryEdit.js",["473","474","475","476","477","478","479","480","481","482","483","484"],"import * as log from \"loglevel\";\nimport React, { useState, useEffect, Fragment, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useDropzone } from \"react-dropzone\";\nimport {\n  Box,\n  Button,\n  GridListTile,\n  GridListTileBar,\n  IconButton,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport UploadIcon from \"@material-ui/icons/Publish\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport Brightness1RoundedIcon from \"@material-ui/icons/Brightness1Rounded\";\nimport PropTypes from \"prop-types\";\nimport { StruttureActionsCreator } from \"../../store/actions/strutture.actions\";\nimport { Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  tile: {\n    height: \"230px\",\n    width: \"480px\",\n    padding: \"5px\",\n    \"& div:nth-of-type(1)\": { border: \"1px solid\" },\n  },\n  tileImage: {\n    maxHeight: \"230px\",\n    maxWidth: \"482px\",\n  },\n  tileBar: {\n    background: \"grey\",\n    \"& div:nth-of-type(1)\": { display: \"none\" },\n    \"& div:nth-of-type(2)\": { width: \"100%\", height: \"100%\" },\n  },\n\n  icon: {\n    top: \"10px\",\n    right: \"10px\",\n    position: \"absolute\",\n    fontSize: 40,\n  },\n\n  topTitle: {\n    borderRadius: \"50px 50px 50px 50px\",\n    background: \"grey\",\n    padding: \"20px\",\n    width: \"50px\",\n    height: \"50px\",\n    position: \"absolute\",\n    top: \"-40px\",\n    left: \"-40px\",\n    border: \"none !important\",\n  },\n  topContent: {\n    left: \"55px\",\n    top: \"32px\",\n    position: \"absolute\",\n    color: \"white\",\n    fontSize: \"larger\",\n  },\n  topContentPlus: {\n    left: \"48px\",\n    top: \"32px\",\n    position: \"absolute\",\n    color: \"white\",\n    fontSize: \"larger\",\n  },\n  contentPlus: {\n    textAlign: \"center\",\n    color: \"grey\",\n    border: \"none !important\",\n    fontSize: 30,\n  },\n  btnModifica: {\n    width: \"50%\",\n    color: \"white\",\n    height: \"inherit\",\n  },\n  btnElimina: {\n    width: \"50%\",\n    color: \"white\",\n    height: \"inherit\",\n  },\n  inputFile: {\n    display: \"none\",\n  },\n}));\n\n/**\n * Il componente permette l'edit di una singola immagine della gallery.\n * Permette di:\n *  - visualizzare un'immagine già caricata\n *  - caricare una nuova immagine\n *  - eliminare un'immagine già caricata\n *  - sostituire un'immagine precedentemente caricata con un'altra\n * @param {*} props\n */\nconst ImageGalleryEdit = (props) => {\n \n  const _logger = log.getLogger(\"ImageGallery\");\n  const order = props.order ?? -1;\n  const imageKey = props.imageKey ?? -1;\n  const imageOrder = props.order ?? 0;\n  const imageType = props.imageType ?? 3;\n  const [imageUrl, setImageUrl] = useState(props.imageUrl);\n  const [file, setFile] = useState({});\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const inputFile = useRef(null);\n  const isSmallScreen = useMediaQuery((theme) => theme.breakpoints.up(\"sm\"));\n  const isMediumScreen = useMediaQuery((theme) => theme.breakpoints.up(\"md\"));\n  const isLargeScreen = useMediaQuery((theme) => theme.breakpoints.up(\"lg\"));\n\n  //NOTA: se useEffect ritorna una funzione, questa viene invocata come cleanup quando cambia la dipendenza\n  useEffect(\n    () => () => {\n      //Siamo nella funzione di cleanup, invocata prima di aggiornare lo stato (quindi con il vecchio stato)\n      //Rimuoviamo l'URL associato al file per evitare Memory leaks (solo se il file è stato caricato dal componente e non se )\n      if (file && imageUrl) {\n        URL.revokeObjectURL(imageUrl); //Tecnicamente se l'URL schema non è \"blob\" dovrebbe essere una NOP\n      }\n    },\n    [file, imageUrl]\n  );\n\n  const { getRootProps, getInputProps, open } = useDropzone({\n    noKeyboard: true, //disabilitiamo l'apertura del file dialog da tastiera\n    noClick: true, //disabilitiamo l'apertura del file dialog tramite click sull'intera drop zone\n    accept: \"image/*\",\n    multiple: false, //accettiamo un singolo file\n    onDrop: (acceptedFiles) => {\n      if (acceptedFiles.length === 0) {\n        _logger.warn(\"Nessun file accettato.\");\n        return;\n      }\n      //In teoria dovrebbe esserci solo un file accettato, se ce ne dovesse essere più di uno prendiamo l'ultimo\n      let file = acceptedFiles[acceptedFiles.length - 1];\n      let url = URL.createObjectURL(file);\n      setImageUrl(url);\n      setFile(file);\n      handleImageUpload(file, url);\n      //TODO: caricare il file sul server\n    },\n  });\n\n  const getIdImageType = () => {\n    switch (imageType) {\n      case \"logo\":\n        return 1;\n      case \"sfondo\":\n        return 2;\n      default:\n        return 3;\n    }\n  };\n\n  const handleImageUpload = (file, url) => {\n    const action = StruttureActionsCreator.updateStrutturaImmagine({\n      file: file,\n      imageKey: imageKey,\n      imageType: getIdImageType(),\n      imageUrl: file ? null : url, //l'url lo carichiamo solo se non stiamo facendo l'upload di una nuova immagine\n      imageOrder: imageOrder,\n    });\n    _logger.debug(\n      `ImageGalleryEdit->Upload immagine  - Dispatching action: ${JSON.stringify(\n        action\n      )}`\n    );\n    dispatch(action);\n  };\n\n  const removeFile = (idImage) => {\n    //Invoco l'API per rimuovere il file corrente\n    //TODO: IMPLEMENTARE\n    const actionDelete =\n      StruttureActionsCreator.removeStrutturaImmagine(idImage);\n    _logger.debug(\n      `OrarioAperturaEdit->Salvataggio nuovo orario apertura - Dispatching action: ${JSON.stringify(\n        actionDelete\n      )}`\n    );\n    dispatch(actionDelete);\n  };\n\n  const handleImageUploadClick = (e) => {\n    _logger.debug(\"Inside handleImageUploadClick\");\n    //forziamo l'apertura del dialo di caricamento dell'immagine\n    //open();\n    inputFile.current.click();\n    //Dopo che l'utente ha selezionato il file, cosa succede? viene scatenato l'evento onDrop?\n  };\n\n  const handleImageDeleteClick = (e) => {\n    _logger.debug(\"Inside handleImageDeleteClick\");\n    removeFile(imageKey);\n  };\n\n  const handleFileChange = (e) => {\n    e.preventDefault();\n    let reader = new FileReader();\n    let file = e.target.files[0];\n    reader.onloadend = () => {\n      setFile(file);\n      setImageUrl(reader.result);\n      handleImageUpload(file, null);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const dropzoneInlineStyle = {\n    backgroundImage: `url(${imageUrl})`,\n  };\n\n  const getNumCols = () => {\n    if (isSmallScreen) {\n      return 1;\n    } else {\n      return 2;\n    }\n  };\n\n  return order !== -1 ? (\n    <GridListTile key={imageKey} cols={1} rows={1} className={classes.tile}>\n      <img alt=\"\" src={imageUrl} className={classes.tileImage}></img>\n      {/* <div {...getRootProps({className: 'dropzone'})} style={dropzoneInlineStyle}>\n                    <input {...getInputProps()}></input>            \n                </div>  */}\n      <div className={classes.topTitle}>\n        <p className={classes.topContent}>{order + 1}</p>\n      </div>\n      <GridListTileBar\n        className={classes.tileBar}\n        actionIcon={\n          <Fragment>\n            <Button\n              variant=\"outlined\"\n              className={classes.btnModifica}\n              onClick={handleImageUploadClick}\n              startIcon={<EditIcon />}\n            >\n              Modifica\n            </Button>\n            <Button\n              variant=\"outlined\"\n              className={classes.btnElimina}\n              onClick={handleImageDeleteClick}\n              startIcon={<DeleteIcon />}\n            >\n              Elimina\n            </Button>\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              ref={inputFile}\n              className={classes.inputFile}\n              autoComplete=\"false\"\n              onChange={handleFileChange}\n            ></input>\n            {/* <IconButton aria-label={`Modifica`} className={classes.icon}>\n                  <InfoIcon />\n                </IconButton>\n                <IconButton aria-label={`Elimina`} className={classes.icon}>\n                  <InfoIcon />\n                </IconButton> */}\n          </Fragment>\n        }\n      />\n      {/* <div {...getRootProps({className: 'dropzone'})} style={dropzoneInlineStyle}>\n                    <input {...getInputProps()}></input>            \n                </div>\n                <div>\n                    <Button onClick={handleImageUploadClick}>Carica</Button>\n                    <Button onClick={handleImageDeleteClick}>Elimina</Button>\n                </div> */}\n    </GridListTile>\n  ) : (\n    <GridListTile key={imageKey} cols={1} rows={1} className={classes.tile}>\n      <div className={classes.contentPlus}>\n        <p style={{ margin: \"15px 0 0 0\" }}>NUOVA IMMAGINE</p>\n        <InfoIcon className={classes.icon}></InfoIcon>\n        <AddCircleOutlineIcon\n          style={{ fontSize: 100, color: \"grey\" }}\n        ></AddCircleOutlineIcon>\n      </div>\n      <div className={classes.topTitle}>\n        <p className={classes.topContentPlus}>\n          <AddCircleOutlineIcon></AddCircleOutlineIcon>\n        </p>\n      </div>\n      <GridListTileBar\n        className={classes.tileBar}\n        actionIcon={<Fragment></Fragment>}\n      />\n    </GridListTile>\n  );\n  /*\n      useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n\n  return (\n    <section className=\"container\">\n      <div {...getRootProps({className: 'dropzone'})}>\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here, or click to select files</p>\n      </div>\n      <aside style={thumbsContainer}>\n        {thumbs}\n      </aside>\n    </section>\n  );\n  */\n};\n\nImageGalleryEdit.propTypes = {\n  imageUrl: PropTypes.string,\n  imageType: PropTypes.oneOf([\"sfondo\", \"logo\", \"gallery\"]),\n  imageKey: PropTypes.number,\n};\n\nexport default ImageGalleryEdit;\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaCalendarAdmin.js",["485","486"],"import * as log from 'loglevel';\nimport React, { useEffect, useState, Fragment } from 'react'\nimport FullCalendar from '@fullcalendar/react'\nimport itLocale from '@fullcalendar/core/locales/it'\nimport dayGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction';\nimport {\n    format as dfnsFormat, isToday as dfnsIsToday,\n    startOfWeek as dfnsStartOfWeek, endOfWeek as dfnsEndOfWeek,\n    isSameDay as dfnsIsSameDay, isFuture as dfnsIsFuture,\n    addMinutes as dfnsAddMinutes, parseISO as dfnsParseISO\n} from 'date-fns'\nimport dfnsITLocale from 'date-fns/locale/it'\n// import '@fullcalendar/core/main.css'\n// import '@fullcalendar/timegrid/main.css'\nimport './StrutturaCalendar.css'\nimport { useHistory } from \"react-router-dom\";\nimport { StruttureEventiAPI } from '../../api/strutture.eventi.api';\n\nconst _logger = log.getLogger(\"StrutturaCalendarAdmin\");\n\n\nexport default (props) => {\n    const idStruttura = props.idStruttura ?? -1;\n    const idLocation = props.idLocation ?? -1;\n    const urlRoute = props.urlRoute;\n    const history = useHistory();\n    const [periodo, setPeriodo] = useState(props.periodo ??\n    {\n        startDate: dfnsStartOfWeek(new Date(), { weekStartsOn: 1 }),\n        endDate: dfnsEndOfWeek(new Date(), { weekStartsOn: 1 })\n    });\n\n    const [eventi, setEventi] = useState([]);\n    const DEFAULT_EVENT_COLOR = '#'\n\n    useEffect(() => {\n        _logger.debug(`StrutturaCalendarAdmin->useEffect(idStruttura: ${idStruttura}, idLocation: ${idLocation}), periodo: ${JSON.stringify(periodo)}`);\n        async function fetchData(periodo) {\n            _logger.debug(\"StrutturaCalendarAdmin->fetchData()\");\n            const data = await StruttureEventiAPI.FetchEventiAsync(idStruttura, idLocation, periodo.startDate, periodo.endDate);\n            //Convertiamo gli Schedules in oggetti gestibili dal calendario\n            if (data && data.length > 0) {\n                let ev = data.map((value, index) => {\n                    const r = {\n                        id: value.id,\n                        start: value.dataOraInizio,\n                        end: dfnsAddMinutes(dfnsParseISO(value.dataOraInizio), value.durata),\n                        title: value.title,\n                        allDay: false\n                    }\n                    _logger.debug(`Evento [${value.id}]: ${JSON.stringify(r)} \\r\\n value:${JSON.stringify(value)}`);\n                    return r;\n                });\n                setEventi(ev);\n            } else {\n                setEventi([])\n            };\n        }\n        if (idStruttura && idStruttura > 0 && idLocation && idLocation > 0) {\n            fetchData(periodo);\n        }\n    }, [idStruttura, idLocation, periodo]);\n\n    const columnHeaderHtml = (date) => {\n        //_logger.debug(`StrutturaCalendarAdmin->columnHeaderHtml(${date}) - ${typeof date}- ${date instanceof Date}`);\n        var result = \"<div class='rd2-cal-header-dayname'>\" + dfnsFormat(date, \"eee\", { locale: dfnsITLocale }).toUpperCase() + \"</div><div class='rd2-cal-header-daynum\"\n        //Per il giorno corrente applichiamo una classe speciale\n        if (dfnsIsToday(date)) {\n            result += \" rd2-cal-header-daynum-current\"\n        }\n        result += \"'>\" + dfnsFormat(date, 'd') + \"</div>\";\n        return {html: result};\n    }\n\n    const handleDataChange = (info) => {\n        _logger.debug(`StrutturaCalendarAdmin->handleDataChange(${info.view.currentStart} - ${info.view.currentEnd})`);\n        if (!info || !info.view) return;\n        const newPeriodo = {\n            startDate: info.view.currentStart,\n            endDate: info.view.currentEnd\n        }\n        if (!dfnsIsSameDay(periodo.startDate, newPeriodo.startDate)) {\n            _logger.debug(`StrutturaCalendarAdmin->handleDataChange->setPeriodo(${JSON.stringify(newPeriodo)})`);\n            setPeriodo(newPeriodo);\n        }\n    }\n\n    const handleDateClick = (dateClickInfo) => {\n        _logger.debug(`StrutturaCalendarAdmin->handleDateClick()`);\n        const url = `/${urlRoute}/eventi/new?date=${dateClickInfo.dateStr}&allDay=${dateClickInfo.allDay}&lid=${idLocation}`;\n        _logger.debug(`StrutturaCalendarAdmin->handleDateClick() -> Redirect to: ${url}`);\n        if (dfnsIsFuture(dateClickInfo.date)) {\n            //Redirect alla pagina di nuovo evento\n            history.push(url);\n        }\n    }\n\n    const handleEventClick = (eventClickInfo) => {\n        _logger.debug(`StrutturaCalendarAdmin->handleEventClick()`);\n        const url = `/${urlRoute}/eventi/${eventClickInfo.event.id}`;\n        _logger.debug(`StrutturaCalendarAdmin->handleDateClick() -> Redirect to: ${url}`);\n        //Redirect alla pagina di edit evento\n        history.push(url);\n    }\n\n    return (\n        <Fragment>\n            <FullCalendar\n                initialView=\"timeGridWeek\"\n                initialDate={periodo.startDate}\n                plugins={[dayGridPlugin, interactionPlugin]}\n                headerToolbar={{\n                    left: 'today',\n                    center: 'title',\n                    right: 'prev,next'\n                }}\n                locale={itLocale}\n                weekends={true}\n                slotDuration=\"01:00:00\"\n                slotLabelInterval=\"01:00\"\n                //timeGridEventMinHeight={25} //removed in v5\n                nowIndicator={false}\n                allDaySlot={false}\n\n                contentHeight=\"auto\"\n                slotMinTime=\"00:00\" //TODO: Leggere da impostazioni struttura\n                slotMaxTime=\"24:00\" //TODO: Leggere da impostazioni struttura\n                //Determina le data \"valide\", quelle fuori dal range sono in grigio\n                //Non è utilizzabile in questo contesto perché devono essere visibili anche l edate passate\n                // ==> gestiamo a livello di click la disabilitazione di creazione di eventi passati\n                //validRange={{start:new Date()}}\n\n                dayHeaderContent={(args)=> columnHeaderHtml(args?.date)}\n                datesSet={handleDataChange}\n\n                dateClick={handleDateClick}\n                eventClick={handleEventClick}\n\n                events={eventi}\n            >\n            </FullCalendar>\n        </Fragment>\n    );\n\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaOrarioView.js",["487"],"import log from \"loglevel\";\nimport React from \"react\";\nimport { Box, makeStyles, Typography } from \"@material-ui/core\";\nimport {useSelector} from 'react-redux'\nimport {StruttureSelectors} from '../../store/selectors/strutture.selectors'\n\nconst _logger = log.getLogger(\"StrutturaOrarioView\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    margin: theme.spacing(1, 0, 0, 0),\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  orarioContainer: {},\n  ora: {},\n  oraSeparatore: {},\n}));\n\nconst StrutturaOrarioView = (props) => {\n  const orarioStruttura = useSelector(StruttureSelectors.getOrarioApertura);\n\n  const styles = useStyles();\n  const alignSelf = props.alignSelf ?? \"flex-start\";\n  const flex = props.flex ?? 1;\n\n  _logger.log(`StrutturaOrarioView->StrutturaOrarioView: ${JSON.stringify(orarioStruttura)}`);\n\n  const writeData = (data)=>{\n    if(!data) return null;\n    if(typeof data !== 'string') return null;\n    let parts = data.split(':',2);\n    return (parts[0][0] === '0' ? parts[0][1]+':'+parts[1] : parts[0]+':'+parts[1])\n  }\n\n  const renderTipoOrarioSpezzato = (day) => {\n    return (\n      <span className={styles.orarioContainer}>\n        <span className={styles.ora}>{writeData(day?.mattina?.inizio)}</span>\n        <span className={styles.oraSeparatore}> - </span>\n        <span className={styles.ora}>{writeData(day?.mattina?.fine)}</span>\n        <span className={styles.oraSeparatore}>{\"\\u00a0 e \\u00a0\"}</span>\n        <span className={styles.ora}>{writeData(day?.pomeriggio?.inizio)}</span>\n        <span className={styles.oraSeparatore}> - </span>\n        <span className={styles.ora}>{writeData(day?.pomeriggio?.fine)}</span>\n      </span>\n    );\n  };\n\n  const renderTipoOrarioContinuato = (day) => {\n    return (\n      <span className={styles.orarioContainer}>\n        <span className={styles.ora}>{writeData(day?.mattina?.inizio)}</span>\n        <span className={styles.oraSeparatore}> - </span>\n        <span className={styles.ora}>{writeData(day?.pomeriggio?.fine)}</span>\n      </span>\n    );\n  };\n\n  const renderTipoOrarioMattino = (day) => {\n    return (\n      <span className={styles.orarioContainer}>\n        <span className={styles.ora}>{writeData(day?.mattina?.inizio)}</span>\n        <span className={styles.oraSeparatore}> - </span>\n        <span className={styles.ora}>{writeData(day?.mattina?.fine)}</span>\n      </span>\n    );\n  };\n\n  const renderTipoOrarioPomeriggio = (day) => {\n    return (\n      <span className={styles.orarioContainer}>\n        <span className={styles.ora}>{writeData(day?.pomeriggio?.inizio)}</span>\n        <span className={styles.oraSeparatore}> - </span>\n        <span className={styles.ora}>{writeData(day?.pomeriggio?.fine)}</span>\n      </span>\n    );\n  };\n\n  const renderTipoOrarioChiuso = (day) => {\n    return (\n      <span className={styles.orarioContainer}>\n        <span className={styles.chiuso}>Chiuso</span>\n      </span>\n    );\n  };\n\n  const renderDay = (dayName, day) => {\n      _logger.log(`StrutturaOrarioView->renderDay(${dayName}): ${JSON.stringify(day)}`)\n    let orario;\n    switch (day?.tipoOrario) {\n      case 'Spezzato':\n        orario = renderTipoOrarioSpezzato(day);\n        break;\n      case 'Continuato':\n        orario = renderTipoOrarioContinuato(day);\n        break;\n      case 'Mattina':\n        orario = renderTipoOrarioMattino(day);\n        break;\n      case 'Pomeriggio':\n        orario = renderTipoOrarioPomeriggio(day);\n        break;\n      case 'Chiuso':\n        orario = renderTipoOrarioChiuso(day);\n        break;\n    }\n    return (\n      <div className={styles.day}>\n        <span>{dayName}</span>\n        {orario}\n      </div>\n    );\n  };\n\n  const renderOrario = (orario) => {\n    return (\n      <div>\n        {orario && orario?.lunedi ? renderDay(\"Lun-Ven:\", orario?.lunedi) : null}\n        {/* {orario && orario?.martedi ? renderDay(\"Lunedì:\", orario?.lunedi) : \"\"}\n        {orario && orario?.mercoledi ? renderDay(\"Lunedì:\", orario?.lunedi) : \"\"}\n        {orario && orario?.giovedi ? renderDay(\"Lunedì: \", orario?.lunedi) : \"\"}\n        {orario && orario?.venerdi ? renderDay(\"Lunedì:\", orario?.lunedi) : \"\"} */}\n        {orario && orario?.sabato ? renderDay(\"Sabato:\", orario?.sabato) : \"\"}\n        {orario && orario?.domenica ? renderDay(\"Domenica:\", orario?.domenica) : \"\"}\n      </div>\n    );\n  };\n\n  return (\n    <Box alignSelf={alignSelf} flex={flex}>\n      <Typography variant=\"h5\" gutterBottom>\n        Orari\n      </Typography>\n      {renderOrario(orarioStruttura)}\n    </Box>\n  );\n};\n\nexport default StrutturaOrarioView;\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/commons/R2DLoader.js",["488"],"import React from 'react'\nimport Loader from 'react-loader-spinner';\nimport { Box, makeStyles, Modal } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    boxLoader: {\n        // position: \"absolute\",\n        // top: \"50%\",\n        // left: \"50%\",\n        // transform: \"translate(-50%, -50%)\",\n        textAlign: \"center\",\n    }\n});\n\n\nexport default (props) => {\n    const color = props.color ?? \"#E31F4F\";\n    const height = props.height ?? 200;\n    const width = props.width ?? 200;\n    const fullPage = props.fullPage ?? false;\n    const visible = props.visible ?? true;\n    const classes = useStyles();\n\n\n    function fullPageLoader() {\n        return (\n            <Modal open={visible} style={{ position: \"relative\" }}>\n                {componentLoader()}\n            </Modal>\n        )\n    }\n\n    function componentLoader() {\n        return (\n            <Box className={classes.boxLoader}>\n                <Loader type=\"Watch\" color={color} height={height} width={width} ></Loader>\n            </Box>\n        )\n    }\n\n    return (\n        fullPage ? fullPageLoader() : componentLoader()\n    )\n\n\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtenteStruttureSeguite.js",["489","490","491"],"/* eslint-disable import/no-anonymous-default-export */\nimport log from \"loglevel\";\nimport React from \"react\";\nimport appInsights from \"../../applicationInsights\";\nimport { UsersAPI } from \"../../api/users.api\";\nimport {\n  Grid,\n  Paper,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  makeStyles,\n  TableBody,\n  Button,\n  Typography,\n  Box,\n  Fab,\n} from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport R2DLoader from \"../commons/R2DLoader\";\nimport { Link } from \"react-router-dom\";\nimport SentimentDissatisfiedIcon from \"@material-ui/icons/SentimentDissatisfied\";\nimport dfnsITLocale from \"date-fns/locale/it\";\nimport dfnsFormat from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst _logger = log.getLogger(\"UtenteStruttureSeguite\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // minHeight: \"400px\",\n    position: \"relative\",\n    marginTop: \"33px\",\n    marginBottom: \"20px\",\n    padding: \"10px\",\n  },\n  title: {\n    paddingTop: \"10px\",\n    marginBottom: \"10px\",\n    fontWeight: \"700\",\n  },\n  grid: {\n    padding: \"15px\",\n  },\n  box: {\n    padding: \"15px\",\n    textAlign: \"center\",\n  },\n  FAB: {\n    backgroundColor: \"#000000\",\n    marginRight: \"10px\",\n  },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    borderBottom: \"none\",\n    padding: \"5px\",\n  },\n  body: {\n    borderBottom: \"none\",\n    padding: \"5px\",\n  },\n}))(TableCell);\n\nexport default (props) => {\n  const classes = useStyles();\n  const [isLoadingAbbonamenti, setIsLoadingAbbonamenti] = React.useState(true);\n  const [isLoadingClienti, setIsLoadingClienti] = React.useState(true);\n  const [abbonamenti, setAbbonamenti] = React.useState(null);\n  const [clienti, setClienti] = React.useState(null);\n\n  React.useEffect(() => {\n    async function fetchClientiFollowed() {\n      const data = await UsersAPI.GetCurrentUserClientiFollowedAsync();\n      setClienti(data);\n      setIsLoadingClienti(false);\n    }\n    async function fetchAbbonamenti() {\n      const data = await UsersAPI.GetCurrentUserAbbonamentiAsync();\n      if (data) {\n        setAbbonamenti(data);\n      } else {\n        setAbbonamenti([]);\n      }\n      setIsLoadingAbbonamenti(false);\n    }\n    fetchClientiFollowed();\n    fetchAbbonamenti();\n  }, []);\n\n  const isLoading = () => {\n    return isLoadingClienti || isLoadingAbbonamenti;\n  };\n\n  // convert date format\n  // @khoa\n  function dateFormat(dateStr) {\n    let date = new Date(dateStr);\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let dt = date.getDate();\n\n    if (dt < 10) {\n      dt = \"0\" + dt;\n    }\n    if (month < 10) {\n      month = \"0\" + month;\n    }\n\n    return dt + \"/\" + month + \"/\" + year;\n  }\n\n  function renderAbbonamentoForCliente(idCliente) {\n    _logger.debug(\n      `UtenteStruttureSeguite()->renderAbbonamentoForCliente(idCliente: ${idCliente}) - abbonamenti: ${JSON.stringify(\n        abbonamenti\n      )}`\n    );\n    const abbonamentiCliente = abbonamenti\n      .filter((v) => v.idCliente === idCliente)\n      .sort((a, b) => {\n        //Ordiniamo in ordine DECRESCENTE di scadenza\n        if (a.scadenza > b.scadenza) {\n          return -1;\n        } else if (a.scadenza < b.scadenza) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    _logger.debug(`abbonamentiCliente: ${JSON.stringify(abbonamentiCliente)}`);\n    if (abbonamentiCliente && abbonamentiCliente.length > 0) {\n      if (abbonamentiCliente[0].scadenza < new Date())\n        return <span>Scaduto</span>;\n      else {\n        return (\n          <span>\n            {dfnsFormat(parseISO(abbonamentiCliente[0].scadenza), \"P\", {\n              locale: dfnsITLocale,\n            })}\n          </span>\n        );\n      }\n    } else {\n      return <span>Nessun Abbonamento</span>;\n    }\n  }\n\n  function renderClienti() {\n    if (clienti && clienti.length > 0) {\n      return (\n        <TableContainer style={{padding:\"12px\", width: 'auto'}}>\n          <Table className={classes.table} aria-label=\"Elenco locations\">\n            <TableHead>\n              <TableRow>\n                <StyledTableCell>Nome Struttura</StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  Data Iscrizione\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  Stato Abbonamento{\" \"}\n                </StyledTableCell>\n                <StyledTableCell align=\"right\">Impostazioni</StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {clienti.map((m) => (\n                <TableRow key={m.id}>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {m.nome}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {/* {dfnsFormat(parseISO(m.dataFollowing), \"P p\", {\n                      locale: dfnsITLocale,\n                    })} */}\n                    {dateFormat(parseISO(m.dataFollowing))}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {/* {renderAbbonamentoForCliente(m.idCliente)} */}\n                    {m.ragioneSociale}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    {/* <Button\n                      size=\"small\"\n                      variant=\"outlined\"\n                      component={Link}\n                      to={`/${m.urlRoute}/`}\n                    >\n                      Vai\n                    </Button> */}\n                    <Fab\n                      size=\"small\"\n                      variant=\"round\"\n                      className={classes.FAB}\n                      component={Link}\n                      to={`/${m.urlRoute}/`}\n                    >\n                      <MenuIcon style={{ color: \"white\" }} />\n                    </Fab>\n                  </StyledTableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      );\n    } else {\n      return (\n        <Box className={classes.box}>\n          <Typography component=\"div\" variant=\"h6\">\n            Non stai ancora seguendo nessuna struttura\n          </Typography>\n          <SentimentDissatisfiedIcon />\n        </Box>\n      );\n    }\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <Grid container spacing={3} className={classes.grid}>\n        <Grid item xs={12} md={1}></Grid>\n        <Grid item xs={12} md={10}>\n          <Grid\n            container\n            alignItems=\"center\"\n            justify=\"center\"\n            direction=\"column\"\n          >\n            <Grid item xs={12}>\n              <Typography className={classes.title} align=\"center\" variant=\"h5\">\n                I Miei Preferiti\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} md={1}>\n          <InfoIcon style={{ fontSize: 40, color: \"grey\", float: \"right\" }}></InfoIcon>\n        </Grid>\n      </Grid>\n      {isLoading() ? <R2DLoader /> : renderClienti()}\n    </Paper>\n  );\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtentePrenotazioneFilter.js",["492","493","494","495","496","497","498","499","500","501"],"import React, { useState } from 'react'\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { Typography, InputAdornment, Button, Box, makeStyles, Grid } from '@material-ui/core';\nimport { KeyboardDatePicker, DatePicker } from '@material-ui/pickers';\nimport { ParsableDate } from '@material-ui/pickers/constants/prop-types';\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyle = makeStyles(theme => ({\n    root: {\n\n    },\n    filterGrid:{\n        \n    },\n    dateFilter: {\n        maxWidth: '150px',\n        marginRight: '20px',\n        '& label': {\n            fontSize: '0.8rem'\n        },\n        '& input': {\n            fontSize: '0.9rem'\n        }\n    },\n    textFilter: {\n        fontSize: '0.9rem',\n        minWidth: '300px',\n        marginRight: '20px',\n        '& label': {\n            fontSize: '0.8rem'\n        },\n        '& input': {\n            fontSize: '0.9rem'\n        }\n\n    },\n    searchButton: {\n        marginTop: '15px',\n    }\n}));\n\nexport const UtentePrenotazioniFilter = (props) => {\n    const classes = useStyle();\n    const [from, setFrom] = useState(props?.filters?.from);\n    const [to, setTo] = useState(props?.filters?.to);\n    const [text, setText] = useState(props?.filters?.text ?? '');\n\n    const handleDataChange = (filter, newDate) => {\n        // eslint-disable-next-line default-case\n        switch (filter?.trim()?.toLowerCase()) {\n            case 'from':\n                setFrom(newDate);\n                return;\n            case 'to':\n                setTo(newDate);\n                return;\n        }\n    }\n\n    const handleTextFilterChange = (event) => {\n        setText(event.target.value);\n    }\n\n    const handleSearchClick = ()=>{\n        if(props.onFilterChange && props.onFilterChange instanceof Function){\n            props.onFilterChange({\n                from,\n                to,\n                text\n            });\n        }\n    }\n\n    return (\n        // <Accordion variant=\"outlined\"> \n        //     <AccordionSummary\n        //         expandIcon={<FilterListIcon />}\n        //         aria-controls=\"panel1a-content\"\n        //         id=\"panel1a-header\"\n        //     >\n        //         <Typography >Filtri</Typography>\n        //     </AccordionSummary>\n        //     <AccordionDetails>\n                <Grid container spacing={0} className={classes.filterGrid}>\n                    <Grid item>\n                        <KeyboardDatePicker className={classes.dateFilter}\n                            label=\"Eventi dal (dd/mm/yyyy)\"\n                            value={from}\n                            format=\"dd/MM/yyyy\"\n                            onChange={(newDate) => { handleDataChange('from', newDate) }}\n                        /></Grid>\n                    <Grid item>\n                        <KeyboardDatePicker className={classes.dateFilter}\n                            label=\"al (dd/mm/yyyy)\"\n                            format=\"dd/MM/yyyy\"\n                            value={to}\n                            onChange={(newDate) => { handleDataChange('to', newDate) }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            className={classes.textFilter}\n                            id=\"input-with-icon-textfield\"\n                            value={text}\n                            label=\"Testo da ricercare (struttura, lezione o evento)\"\n                            onChange={handleTextFilterChange}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button endIcon={<SearchIcon />} size=\"small\" variant=\"outlined\" className={classes.searchButton} onClick={handleSearchClick}> Cerca</Button>\n                    </Grid>\n                </Grid>\n\n        //     </AccordionDetails>\n        // </Accordion>\n    )\n\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.api.js",["502","503"],"import axios from 'axios';\nimport config from '../config'\nimport { APIUtils } from './apiUtils'\nimport * as log from 'loglevel'\nimport { STRUTTURE_API_MOCKED } from './strutture.api.mock'\nimport appInsights from '../applicationInsights'\nimport { SeverityLevel } from '@microsoft/applicationinsights-common'\n\n\nconst _logger = log.getLogger('strutture.api');\n\n//Dato l'id di una struttura ne ritorna l'urlRoute\nasync function GetUrlStrutturaFromId(id) {\n  const url = `${config.BaseAPIPath}/clienti/resolve/${id}`\n  _logger.debug(`GetNomeStrutturaFromId->Invoking API: [GET] ${url}`);\n  const response = await axios.get(url);\n  return response.data;\n}\n\nasync function GetStrutturaByName(name, token) {\n  const url = `${config.BaseAPIPath}/clienti/${name}`\n  _logger.debug(`GetStrutturaByName->Invoking API: [GET] ${url}`);\n  return await axios.get(url);\n}\n\nasync function GetStrutturaById(id, token) {\n  const url = `${config.BaseAPIPath}/clienti/${id}`\n  _logger.debug(`GetStrutturaById->Invoking API: [GET] ${url}`);\n  return await axios.get(url);\n}\n\nasync function UpdateStrutturaAnagrafica(anagrafica, token) {\n  const url = `${config.BaseAPIPath}/clienti/${anagrafica.id}/profilo/anagrafica`\n  _logger.debug(`Invoking API: [PUT] ${url} - Payload: ${JSON.stringify(anagrafica)}`);\n  return await axios.put(url, anagrafica, await APIUtils.addBearerToken());\n}\n\nasync function UpdateStrutturaOrarioApertura(idStruttura, orarioApertura, token) {\n  const url = `${config.BaseAPIPath}/clienti/${idStruttura}/profilo/orario`\n  _logger.debug(`Invoking API: [PUT] ${url} - Payload: ${JSON.stringify(orarioApertura)}`);\n  return await axios.put(url, orarioApertura, await APIUtils.addBearerToken());\n}\n\n/**\n * Associa l'utente corrente con la struttura specificata e ritorna i dettagli dell'associazione\n * @param {number} idStruttura \n * @returns {object} dettaglioAssociazione\n */\nasync function FollowStruttura(idStruttura) {\n  const url = `${config.BaseAPIPath}/clienti/${idStruttura}/follow`\n  _logger.debug(`Invoking API: [POST] ${url}`);\n  const response = await axios.post(url, null, await APIUtils.addBearerToken());\n  return response.data;\n}\n\nasync function UnFollowStruttura(idStruttura) {\n  const url = `${config.BaseAPIPath}/clienti/${idStruttura}/unfollow`\n  _logger.debug(`Invoking API: [POST] ${url}`);\n  await axios.post(url, null, await APIUtils.addBearerToken()); \n}\n\nasync function CheckUrlStruttura(urlRoute) {\n  const url = `${config.BaseAPIPath}/clienti/checkurl?url=${urlRoute}`\n  _logger.debug(`Invoking API: [POST] ${url}`);\n  const response = await axios.get(url, await APIUtils.addBearerToken()); \n  return response.data;  \n}\n\n//Registra un nuovo cliente\nasync function RegistraNuovoClienteAsync(cliente) {\n  const url = `${config.BaseAPIPath}/clienti`\n  _logger.debug(`RegistraNuovoClienteAsync->Invoking API: [POST] ${JSON.stringify(cliente)}`);\n  const response = await axios.post(url, cliente, await APIUtils.addBearerToken());\n  return response.data;\n}\n\nexport const StruttureAPI = {\n  GetStrutturaByName: config.MockedAPI ? STRUTTURE_API_MOCKED.GetStrutturaByName_Mocked : GetStrutturaByName,\n  GetStrutturaById: GetStrutturaById,\n  UpdateStrutturaAnagrafica: config.MockedAPI ? STRUTTURE_API_MOCKED.UpdateStrutturaAnagrafica_Mocked : UpdateStrutturaAnagrafica,\n  UpdateStrutturaOrarioApertura: config.MockedAPI ? STRUTTURE_API_MOCKED.UpdateStrutturaOrarioApertura_Mocked : UpdateStrutturaOrarioApertura,\n  FollowStruttura,\n  UnFollowStruttura,\n  GetUrlStrutturaFromId,\n  CheckUrlStruttura,\n  RegistraNuovoClienteAsync\n}\n","/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.images.api.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/api/users.api.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.eventi.api.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.utenti.api.js",["504"],"import log from 'loglevel'\nimport axios from 'axios';\nimport buildUrl from 'build-url';\nimport formatISO from 'date-fns/formatISO'\nimport sub from 'date-fns/sub'\nimport add from 'date-fns/add'\nimport config from '../config'\nimport { APIUtils } from './apiUtils'\nimport qs from 'query-string'\n\n\nconst _logger = log.getLogger('strutture.utenti.api');\n\n\nasync function FetchUtentiStrutturaAsync(idStruttura, includeStato, page, pageSize, sortBy, sortDirection, filters) {\n    let querystring = qs.stringify({\n        stato:includeStato,\n        page: page,\n        pageSize: pageSize,\n        sortby:sortBy,\n        asc: sortDirection === 'asc',\n        filters: filters\n    },{\n        skipNull: true\n    })\n    const url = `${config.BaseAPIPath}/clienti/${idStruttura}/users?${querystring}`;\n    _logger.debug(`Invokin API: [GET] ${url}`);\n    const response = await axios.get(url, await APIUtils.addBearerToken());\n    return response.data;\n}\n\nasync function AddUpdateAbbonamentoUtenteAsync(idStruttura, idUtente, abbonamentoUtente){\n    const url = `${config.BaseAPIPath}/clienti/${idStruttura}/abbonamenti/${idUtente}`;\n    if(!abbonamentoUtente.id){\n        const response = await axios.post(url, abbonamentoUtente, await APIUtils.addBearerToken());\n        return response.data;\n    }else{\n        const response = await axios.put(url, abbonamentoUtente, await APIUtils.addBearerToken());\n        return response.data;\n\n    }\n}\n\nasync function FetchAbbonamentiUtenteAsync(idStruttura, idUtente){\n    const url = `${config.BaseAPIPath}/clienti/${idStruttura}/abbonamenti/${idUtente}`;\n    const response = await axios.get(url, await APIUtils.addBearerToken());\n    return response.data;\n}\n\n\nasync function FetchProfiloUtenteAsync(idStruttura, idUtente){\n    const url = `${config.BaseAPIPath}/clienti/${idStruttura}/users/${idUtente}/profile`;\n    const response = await axios.get(url, await APIUtils.addBearerToken());\n    return response.data;\n}\n\nasync function FetchDettagliAssociazioneUtenteAsync(idStruttura, idUtente, numAbbonamenti = 3, appFrom = null, appTo = null, incCert=true, incWL= true){\n    if(!appFrom){appFrom = sub(new Date(), {days:7});}\n    if(!appTo){appTo = add(new Date(), {months:120});}\n\n    const url = `${config.BaseAPIPath}/clienti/${idStruttura}/users/${idUtente}?incAbb=${numAbbonamenti}&apFrom=${formatISO(appFrom, {representation: 'date'})}&apTo=${formatISO(appTo, {representation: 'date'})}&incCert=${incCert}&incWL=${incWL}`;\n    const response = await axios.get(url, await APIUtils.addBearerToken());\n    return response.data;\n}\n\nasync function AddUpdateCertificatoUtenteAsync(idStruttura, idUtente, certificatoUtente){\n    const url = `${config.BaseAPIPath}/clienti/${idStruttura}/users/${idUtente}/certificati`;\n    if(!certificatoUtente.id){\n        const response = await axios.post(url, certificatoUtente, await APIUtils.addBearerToken());\n        return response.data;\n    }else{\n        const response = await axios.put(url, certificatoUtente, await APIUtils.addBearerToken());\n        return response.data;\n\n    }\n}\n\n \nexport const StruttureUtentiAPI = {\n    FetchUtentiStrutturaAsync,\n    FetchAbbonamentiUtenteAsync,\n    FetchProfiloUtenteAsync,\n    FetchDettagliAssociazioneUtenteAsync,\n    AddUpdateAbbonamentoUtenteAsync,\n    AddUpdateCertificatoUtenteAsync\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/editEvento/R2DEditEventoForm.js",["505","506","507","508"],"import log from \"loglevel\";\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { Formik, Form, Field, ErrorMessage, FieldArray } from \"formik\";\nimport {\n  makeStyles,\n  TextField,\n  Button,\n  Grid,\n  Select,\n  MenuItem,\n  Box,\n  FormControl,\n  InputLabel,\n  Accordion,\n  AccordionSummary,\n  Typography,\n  FormControlLabel,\n  AccordionDetails,\n  Switch,\n  RadioGroup,\n  Radio,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport { DatePicker, DateTimePicker } from \"@material-ui/pickers\";\nimport parseISO from \"date-fns/parseISO\";\nimport differenceInHours from \"date-fns/differenceInHours\";\nimport subHours from \"date-fns/subHours\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useHistory } from \"react-router-dom\";\nimport { StruttureEventiAPI } from \"../../api/strutture.eventi.api\";\nimport { useSnackbar } from 'notistack';\n\nconst _logger = log.getLogger(\"R2DEditEventoForm\");\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    padding: \"20px\",\n  },\n  gridContainer: {},\n  fullWidth: {\n    width: \"100%\",\n  },\n  flexDisplay: {\n    display: \"flex\",\n  },\n  selectField: {\n    alignSelf: \"flex-end\",\n  },\n  paddingRight: {\n    paddingRight: \"20px\",\n  },\n  toggleDay: {\n    backgroundColor: \"#89C443\",\n    marginRight: \"5px\",\n    minWidth: \"110px\",\n  },\n  btnSalva: {\n    backgroundColor: \"#E31F4F\",\n    color: \"white\",\n    margin: \"auto\",\n  },\n}));\n\nconst R2DEditEventoForm = (props) => {\n  const idStruttura = props.idStruttura;\n  const idEvento = props.idEvento ?? -1;\n  const dataEvento = props.dataEvento ? parseISO(props.dataEvento) : new Date();\n  const idLocation = props.idLocation ?? \"\";\n  const [tipologieLezioni, setTipologieLezioni] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [lezioniLoading, setLezioniLoading] = useState(true);\n  const [locationsLoading, setLocationsLoading] = useState(true);\n  //    const [isSubmitionCompleted, setSubmitionCompleted] = useState(false);\n  const [evento, setEvento] = useState(null);\n  const classes = useStyles();\n  let history = useHistory();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  function buildArrayGiorniSettimana(daysOfWeek) {\n    let result = [\n      { id: 1, code: \"Lun\", nome: \"lunedi\", label: \"Lunedì\", selezionato: false },\n      { id: 2, code: \"Mar\", nome: \"martedi\", label: \"Martedì\", selezionato: false },\n      { id: 3, code: \"Mer\", nome: \"mercoledi\", label: \"Mercoledì\", selezionato: false },\n      { id: 4, code: \"Gio\", nome: \"giovedi\", label: \"Giovedì\", selezionato: false },\n      { id: 5, code: \"Ven\", nome: \"venerdi\", label: \"Venerdì\", selezionato: false },\n      { id: 6, code: \"Sab\", nome: \"sabato\", label: \"Sabato\", selezionato: false },\n      { id: 7, code: \"Dom\", nome: \"domenica\", label: \"Domenica\", selezionato: false },\n    ];\n    if (typeof daysOfWeek !== \"undefined\" && daysOfWeek !== null && Array.isArray(daysOfWeek)) {\n      daysOfWeek.forEach((v) => {\n        switch (v) {\n          case \"Lun\": {\n            result[0].selezionato = true;\n            break;\n          }\n          case \"Mar\": {\n            result[1].selezionato = true;\n            break;\n          }\n          case \"Mer\": {\n            result[2].selezionato = true;\n            break;\n          }\n          case \"Gio\": {\n            result[3].selezionato = true;\n            break;\n          }\n          case \"Ven\": {\n            result[4].selezionato = true;\n            break;\n          }\n          case \"Sab\": {\n            result[5].selezionato = true;\n            break;\n          }\n          case \"Dom\": {\n            result[6].selezionato = true;\n            break;\n          }\n          default: {\n            throw new Error(\"Giorno delle settimana non valido\");\n          }\n        }\n      });\n    }\n    return result;\n  }\n\n  //Carichiamo le tipologie di lezioni per la struttura\n  //NOTA: la fetch dipende solo dalla struttura corrente\n  useEffect(() => {\n    async function fetchTipologieLezione() {\n      _logger.debug(\"R2DEditEventoForm->fetchTipologieLezione()\");\n      const data = await StruttureEventiAPI.FetchTipologieLezioniAsync(idStruttura);\n      _logger.debug(`R2DEditEventoForm->fetchTipologieLezione() - Retrieved lezioni: ${JSON.stringify(data)}`);\n      setTipologieLezioni(data);\n      setLezioniLoading(false);\n    }\n    if (idStruttura > 0) {\n      setLezioniLoading(true);\n      fetchTipologieLezione();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [idStruttura]);\n\n  //Carichiamo le locations  per la struttura\n  //NOTA: la fetch dipende solo dalla struttura corrente\n  useEffect(() => {\n    async function fetchLocations() {\n      _logger.debug(\"R2DEditEventoForm->FetchLocationsAsync()\");\n      const data = await StruttureEventiAPI.FetchLocationsAsync(idStruttura);\n      _logger.debug(`R2DEditEventoForm->FetchLocationsAsync() - Retrieved locations: ${JSON.stringify(data)}`);\n      setLocations(data);\n      setLocationsLoading(false);\n    }\n    if (idStruttura > 0) {\n      setLocationsLoading(true);\n      fetchLocations();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [idStruttura]);\n\n  useEffect(() => {\n    //Non usiamo redux-saga per caricare l'evento perché non c'è necessita di salvarlo nello Store Redux\n    async function fetchData() {\n      _logger.debug(`R2DEditEventoForm->useEffect()->fetchData() - Fetching Event (${idStruttura}, ${idEvento})`);\n      let data = await StruttureEventiAPI.FetchEventoAsync(idStruttura, idEvento);\n      _logger.debug(`R2DEditEventoForm->useEffect->fetchData(): Event Fetched: ${JSON.stringify(data)}`);\n      //Ci serve aggiungere la proprietà preavvisoCancellazione espressa come differenza in ore tra dataOraInizio e cancellabileFinoAl (se valorizzata)\n      data.preavvisoCancellazione = data.cancellabileFinoAl ? differenceInHours(parseISO(data.dataOraInizio), parseISO(data.cancellabileFinoAl)) : \"\";\n      //rimappiamo i giorni della settimana in una struttura più comoda per Formik\n      data.giorniSettimanaRicorrenza = buildArrayGiorniSettimana(data?.recurrency?.daysOfWeek);\n      data.tipoRicorrenza = data.recurrency?.recurrency ?? \"None\";\n      data.tipoFineRecurrency = data.recurrency ? (data.recurrency.repeatUntil ? \"data\" : \"ripetizioni\") : \"unknown\";\n      data.ripetiFinoAl = data?.recurrency?.repeatUntil ?? null;\n      data.numeroRipezioni = data?.recurrency?.repeatFor ?? \"\";\n      setEvento(data);\n    }\n    if (idStruttura) {\n      if (idEvento && idEvento > 0) {\n        fetchData();\n      } else {\n        //Iniziliziamo un nuovo evento\n        let data = {\n          id: null,\n          idCliente: idStruttura,\n          title: \"\",\n          idTipoLezione: \"\",\n          idLocation: !isNaN(idLocation) ? parseInt(idLocation) : \"\",\n          dataOraInizio: dataEvento,\n          postiDisponibili: \"\",\n          note: \"\",\n          cancellazioneConsentita: false,\n          preavvisoCancellazione: \"\",\n          waitListDisponibile: false,\n          dataAperturaIscrizione: null,\n          dataChiusuraIscrizione: null,\n          istruttore: \"\",\n          recurrency: {\n            recurrency: \"None\",\n            daysOfWeek: [],\n            repeatUntil: \"\",\n            repeatFor: -1,\n          },\n          //I campi sottostanti sono di ausilio per la compilazione dell aproprietà recurrency soprastante e non sono richiesti dalla API\n          tipoRicorrenza: \"None\",\n          giorniSettimanaRicorrenza: buildArrayGiorniSettimana(),\n          tipoFineRecurrency: \"\",\n          ripetiFinoAl: null,\n          numeroRipezioni: \"\",\n        };\n        setEvento(data);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [idStruttura, idEvento]);\n\n  const isFetchingInProgress = () => {\n    const result = lezioniLoading || locationsLoading || evento == null;\n    _logger.debug(`isFetchingInProgress: ${result}`);\n    return result;\n  };\n  const handleFormSubmmit = async (values, actions) => {\n    //E' necessario fare un po' di reshaping dei values prima di inviarli al server, in particolare per la gestione degli eventi ricorrenti\n    //Ci creiamo una copia (shallow) dei dati su cui apportare le modifiche con la proprietà recurrency vuota\n    let schedule = Object.assign({}, values, { recurrency: { recurrency: null, daysOfWeek: null, repeatUntil: null, repeatFor: null } });\n    if (schedule.tipoRicorrenza !== \"None\") {\n      schedule.recurrency.recurrency = values.tipoRicorrenza;\n      if (schedule.recurrency.recurrency === \"Weekly\") {\n        schedule.recurrency.daysOfWeek = values.giorniSettimanaRicorrenza.filter((v) => v.selezionato).map((d) => d.code);\n      } else {\n        schedule.recurrency.DaysOfWeek = [];\n      }\n\n      if (values.tipoFineRecurrency === \"data\") {\n        schedule.recurrency.repeatUntil = values.ripetiFinoAl;\n        schedule.recurrency.repeatFor = null;\n      } else if (values.tipoFineRecurrency === \"ripetizioni\") {\n        schedule.recurrency.repeatUntil = null;\n        schedule.recurrency.repeatFor = values.numeroRipezioni;\n      }\n    }\n    //rimuoviamo le proprietà non necessarie\n    delete schedule.tipoRicorrenza;\n    delete schedule.giorniSettimanaRicorrenza;\n    delete schedule.tipoFineRecurrency;\n    delete schedule.ripetiFinoAl;\n    delete schedule.numeroRipezioni;\n    delete schedule.props;\n\n    //aggiungiamo la proprietà cancellabileFinoAl come differenza tra la data inizio lezione ed il numero di ore minime di preavviso richieste\n    //per la cancellazione\n    let cancellabileFinoAl = subHours(schedule.dataOraInizio, isNaN(values.preavvisoCancellazione) ? 0 : values.preavvisoCancellazione);\n    schedule.cancellabileFinoAl = cancellabileFinoAl;\n    delete schedule.preavvisoCancellazione;\n\n    _logger.debug(`SUBMITTING FORM - VALUES: ${JSON.stringify(schedule)}`);\n    await StruttureEventiAPI.SaveEventoAsync(idStruttura, schedule);\n    enqueueSnackbar('Lezione creata', {variant:'success'});\n    history.goBack();\n  };\n\n  /**\n   * Stop enter submitting the form.\n   * @param keyEvent Event triggered when the user presses a key.\n   */\n  function onKeyDown(keyEvent) {\n    if ((keyEvent.charCode || keyEvent.keyCode) === 13) {\n      keyEvent.preventDefault();\n    }\n  }\n\n  _logger.debug(`R2DEditEventoForm->evento: ${JSON.stringify(evento)}`);\n\n  const renderForm = () => {\n    return (\n      <Formik initialValues={evento} enableReinitialize={true} onSubmit={handleFormSubmmit}>\n        {(props, form) => (\n          <Form onSubmit={props.handleSubmit} autoComplete=\"off\" className={classes.form} onKeyDown={onKeyDown}>\n            <Grid container>\n              <Grid item xs={12}>\n                <Accordion defaultExpanded expanded={true} elevation={0}>\n                  <AccordionSummary>\n                    <Typography variant=\"h6\">Dati Lezione</Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Grid container>\n                      <Grid item xs={12}>\n                        <TextField\n                          name=\"title\"\n                          label=\"Nome Lezione\"\n                          onChange={props.handleChange}\n                          onBlur={props.handleBlur}\n                          value={props.values.title}\n                          fullWidth\n                          margin=\"normal\"\n                          required\n                          //className={classes.fullWidth}\n                        />\n                      </Grid>\n                      <Grid item xs={6} className={classes.paddingRight}>\n                        <FormControl fullWidth margin=\"normal\" required>\n                          <InputLabel id=\"editEventoTipoLezioneLbl\">Tipo Lezione</InputLabel>\n                          <Select name=\"idTipoLezione\" labelId=\"editEventoTipoLezioneLbl\" value={props.values.idTipoLezione} onChange={props.handleChange} onBlur={props.handleBlur}>\n                            {(tipologieLezioni ?? []).map((tipoLezione, index) => {\n                              return (\n                                <MenuItem key={tipoLezione.id} value={tipoLezione.id}>\n                                  {tipoLezione.nome}\n                                </MenuItem>\n                              );\n                            })}\n                          </Select>\n                        </FormControl>\n                      </Grid>\n                      <Grid item xs={3}>\n                        <Field name=\"dataOraInizio\">\n                          {({ field, form }) => (\n                            <DateTimePicker\n                              name={field.name}\n                              margin=\"normal\"\n                              fullWidth\n                              required\n                              minDate={new Date()}\n                              label=\"Data ed ora inizio lezione\"\n                              value={field.value}\n                              onChange={(dateTime) => form.setFieldValue(field.name, dateTime, true)}\n                              format=\"dd MMMM yyyy  ' alle'  HH:mm\"\n                            />\n                          )}\n                        </Field>\n                      </Grid>\n\n                      <Grid item xs={6} className={classes.paddingRight}>\n                        <FormControl fullWidth margin=\"normal\" required>\n                          <InputLabel id=\"editEventoLocationLbl\">Location</InputLabel>\n                          <Select name=\"idLocation\" labelId=\"editEventoLocationLbl\" value={props.values.idLocation} onChange={props.handleChange} onBlur={props.handleBlur}>\n                            {(locations ?? []).map((location, index) => {\n                              return (\n                                <MenuItem key={location.id} value={location.id}>\n                                  {location.nome}\n                                </MenuItem>\n                              );\n                            })}\n                          </Select>\n                        </FormControl>\n                      </Grid>\n                      <Grid item xs={3}>\n                        <TextField\n                          name=\"postiDisponibili\"\n                          label=\"Posti disponibili\"\n                          type=\"number\"\n                          onChange={props.handleChange}\n                          onBlur={props.handleBlur}\n                          value={props.values.postiDisponibili}\n                          fullWidth\n                          margin=\"normal\"\n                          required\n                        />\n                      </Grid>\n\n                      <Grid item xs={12}>\n                        <TextField name=\"note\" label=\"Note\" rows=\"3\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.note} fullWidth margin=\"normal\" />\n                      </Grid>\n                    </Grid>\n                  </AccordionDetails>\n                </Accordion>\n              </Grid>\n              <Grid item xs={12}>\n                <Accordion elevation={0}>\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                    <Typography variant=\"h6\">Impostazioni Avanzate</Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Grid container>\n                      <Grid item xs={6}>\n                        <FormControl fullWidth margin=\"normal\">\n                          <FormControlLabel\n                            control={\n                              <Switch\n                                name=\"cancellazioneConsentita\"\n                                checked={props.values.cancellazioneConsentita}\n                                value={props.values.cancellazioneConsentita}\n                                onChange={props.handleChange}\n                                onBlur={props.handleBlur}\n                              />\n                            }\n                            label=\"Cancellazione Consentita\"\n                          />\n                        </FormControl>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <TextField\n                          name=\"preavvisoCancellazione\"\n                          label=\"Preavviso minimo di cancellazione (in ore)\"\n                          type=\"number\"\n                          onChange={props.handleChange}\n                          onBlur={props.handleBlur}\n                          value={props.values.preavvisoCancellazione}\n                          disabled={!props.values.cancellazioneConsentita}\n                          fullWidth\n                          margin=\"normal\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormControl fullWidth margin=\"normal\">\n                          <FormControlLabel\n                            control={\n                              <Switch\n                                name=\"waitListDisponibile\"\n                                checked={props.values.waitListDisponibile}\n                                value={props.values.waitListDisponibile}\n                                onChange={props.handleChange}\n                                onBlur={props.handleBlur}\n                              />\n                            }\n                            label=\"Lista d'attesa disponibile\"\n                          />\n                        </FormControl>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <Field name=\"dataAperturaIscrizione\">\n                          {({ field, form }) => (\n                            <DateTimePicker\n                              name={field.name}\n                              label=\"Data ed ora apertura iscrizioni\"\n                              value={props.values.dataAperturaIscrizione}\n                              onChange={(dateTime) => form.setFieldValue(field.name, dateTime, true)}\n                              format=\"dd/MM/yyyy HH:mm\"\n                              fullWidth\n                              margin=\"normal\"\n                            />\n                          )}\n                        </Field>\n                      </Grid>\n\n                      <Grid item xs={6} className={classes.paddingRight}>\n                        <TextField name=\"istruttore\" label=\"Istruttore\" onChange={props.handleChange} onBlur={props.handleBlur} value={props.values.istruttore} fullWidth margin=\"normal\" />\n                      </Grid>\n\n                      <Grid item xs={6}>\n                        <Field name=\"dataChiusuraIscrizione\">\n                          {({ field, form }) => (\n                            <DateTimePicker\n                              name={field.name}\n                              label=\"data ed ora chiusura iscrizioni\"\n                              value={field.value}\n                              onChange={(dateTime) => form.setFieldValue(field.name, dateTime, true)}\n                              format=\"dd/MM/yyyy HH:mm\"\n                              fullWidth\n                              margin=\"normal\"\n                            />\n                          )}\n                        </Field>\n                      </Grid>\n                    </Grid>\n                  </AccordionDetails>\n                </Accordion>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Accordion elevation={0}>\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                    <Typography variant=\"h6\">Lezione Ricorrente</Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Grid container>\n                      <Grid item xs={12}>\n                        <FormControl fullWidth margin=\"normal\">\n                          <InputLabel id=\"editEventoTipoRicorrenzaLbl\">Ricorrenza lezione</InputLabel>\n                          <Select name=\"tipoRicorrenza\" labelId=\"editEventoTipoRicorrenzaLbl\" value={props.values.tipoRicorrenza} onChange={props.handleChange} onBlur={props.handleBlur}>\n                            <MenuItem value=\"None\">Non si ripete</MenuItem>\n                            <MenuItem value=\"Daily\">Tutti i giorni</MenuItem>\n                            <MenuItem value=\"Weekly\">Ogni Settimana</MenuItem>\n                            <MenuItem value=\"Monthly\">Ogni Mese</MenuItem>\n                          </Select>\n                        </FormControl>\n                      </Grid>\n                      {props.values.tipoRicorrenza === \"Weekly\" ? (\n                        <Grid item xs={12}>\n                          <FieldArray name=\"recurrency.giorniSettimanaRicorrenza\">\n                            {({ move, swap, push, insert, unshift, pop, form }) => {\n                              return (\n                                <ToggleButtonGroup\n                                  margin=\"normal\"\n                                  name=\"recurrency.giorniSettimanaRicorrenza\"\n                                  value={props.values.giorniSettimanaRicorrenza}\n                                  //onChange={dateTime => form.setFieldValue(field.name, dateTime, true)}\n                                  onChange={props.handleChange}\n                                >\n                                  {props.values.giorniSettimanaRicorrenza.map((dow, index) => (\n                                    <Field name={`recurrency.giorniSettimanaRicorrenza.${index}`} key={dow.id}>\n                                      {() => (\n                                        <ToggleButton\n                                          value={dow.nome}\n                                          selected={props.values.giorniSettimanaRicorrenza[index].selezionato}\n                                          className={classes.toggleDay}\n                                          onChange={() => {\n                                            const newValues = props.values.giorniSettimanaRicorrenza;\n                                            newValues[index].selezionato = !newValues[index].selezionato;\n                                            _logger.debug(`ToggleButton[${index} - ${dow.nome}] -> Selected: ${newValues[index].selezionato}`);\n                                            form.setFieldValue(`props.values.giorniSettimanaRicorrenza`, newValues);\n                                          }}\n                                        >\n                                          <Typography>{dow.label}</Typography>\n                                        </ToggleButton>\n                                      )}\n                                    </Field>\n                                  ))}\n                                </ToggleButtonGroup>\n                              );\n                            }}\n                          </FieldArray>\n                        </Grid>\n                      ) : (\n                        \"\"\n                      )}\n                      {props.values.tipoRicorrenza !== \"None\" ? (\n                        <Field name=\"tipoFineRecurrency\">\n                          {({ field, form }) => (\n                            <Fragment>\n                              <Grid item xs={12}>\n                                <Typography style={{ marginTop: \"10px\", fontWeight: 700 }}>Fine ricorrenza:</Typography>\n                              </Grid>\n                              <Grid item xs={3}>\n                                <FormControl>\n                                  <FormControlLabel\n                                    value=\"data\"\n                                    label=\"Data fine ricorrenza\"\n                                    labelPlacement=\"end\"\n                                    checked={props.values.tipoFineRecurrency === \"data\"}\n                                    control={\n                                      <Radio\n                                        onChange={(event) => {\n                                          //_logger.debug(`tipoFineRecurrency-> endType: ${JSON.stringify(endType)}`)\n                                          console.log(event.target.value);\n                                          form.setFieldValue(field.name, event.target.value);\n                                        }}\n                                      />\n                                    }\n                                  />\n                                </FormControl>\n                              </Grid>\n                              <Grid item xs={3}>\n                                <Field name=\"ripetiFinoAl\">\n                                  {({ field, form }) => (\n                                    <DatePicker\n                                      name={field.name}\n                                      disabled={props.values.tipoFineRecurrency !== \"data\"}\n                                      value={field.value}\n                                      onChange={(dateTime) => form.setFieldValue(field.name, dateTime, true)}\n                                      format=\"dd/MM/yyyy\"\n                                    />\n                                  )}\n                                </Field>\n                              </Grid>\n                              <Grid item xs={6}></Grid>\n                              <Grid item xs={3}>\n                                <FormControl>\n                                  <FormControlLabel\n                                    value=\"ripetizioni\"\n                                    checked={props.values.tipoFineRecurrency === \"ripetizioni\"}\n                                    label=\"Numero Ripetizioni\"\n                                    labelPlacement=\"end\"\n                                    control={\n                                      <Radio\n                                        onChange={(event) => {\n                                          //_logger.debug(`tipoFineRecurrency-> endType: ${JSON.stringify(endType)}`)\n                                          console.log(event.target.value);\n                                          form.setFieldValue(field.name, event.target.value);\n                                        }}\n                                      />\n                                    }\n                                  />\n                                </FormControl>\n                              </Grid>\n                              <Grid item xs={3}>\n                                <TextField\n                                  disabled={props.values.tipoFineRecurrency !== \"ripetizioni\"}\n                                  name=\"numeroRipezioni\"\n                                  value={props.values.numeroRipezioni}\n                                  type=\"number\"\n                                  onChange={props.handleChange}\n                                />\n                              </Grid>\n                            </Fragment>\n                          )}\n                        </Field>\n                      ) : (\n                        \"\"\n                      )}\n                    </Grid>\n                  </AccordionDetails>\n                </Accordion>\n              </Grid>\n\n              <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                <Button size=\"large\" variant=\"contained\" type=\"submit\" className={classes.btnSalva}>\n                  Salva\n                </Button>\n              </Grid>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    );\n  };\n\n  return !isFetchingInProgress() ? renderForm() : <CircularProgress />;\n};\n\nexport default R2DEditEventoForm;\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/commons/sidenav/R2DSideNav.js",["509"],"import React, { Fragment } from 'react'\nimport { List, ListItem, ListItemIcon, ListItemText, Fab } from \"@material-ui/core\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { NavLink } from 'react-router-dom'\nimport HomeIcon from '@material-ui/icons/Home';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport FitnessCenterIcon from '@material-ui/icons/FitnessCenter';\nimport BookIcon from '@material-ui/icons/Book';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport PeopleIcon from '@material-ui/icons/People';\nimport ImageIcon from '@material-ui/icons/Image'\nimport SideNavHeader from './R2DSideNavHeader';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AzureAD from 'react-aad-msal';\nimport {authProvider} from '../../../authProvider'\nimport {getStore} from '../../../store/reduxStore'\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawer: {\n    [theme.breakpoints.up('lg')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  link: {\n    textDecoration: 'none',\n    color: 'unset',\n  },\n  navToggleFAB: {\n    position: \"fixed\",\n    marginLeft: \"20px\",\n    marginTop: \"20px\",\n    backgroundColor: \"#000000\",\n    zIndex: theme.zIndex.drawer\n  }\n}));\n\nexport default (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  //TODO: Gestire il cambio di struttura corrente passando una callback al componente header\n  const urlStruttura = props.urlStruttura;\n\n  const [drawerIsOpen, setDrawerIsOpen] = React.useState(props.drawerIsOpen ?? false);\n\n\n  const handleDrawerToggle = (stato) => event => {\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    setDrawerIsOpen(stato);\n  };\n\n  const drawerContent = (\n    <div>\n      <SideNavHeader strutturaCorrente={urlStruttura}></SideNavHeader>\n      <List>\n        {\n          [\n            { pageType: '', text: 'Home', icon: (<HomeIcon />) },\n            { pageType: 'edit', text: 'Dati Struttura', icon: (<AssignmentIcon />) },\n            { pageType: 'images', text: 'Immagini', icon: (<ImageIcon />) },\n            { pageType: 'calendari', text: 'Calendari', icon: (<DateRangeIcon />) },\n            { pageType: 'locations', text: 'Sale e Trainer', icon: (<FitnessCenterIcon />) },\n            { pageType: 'lezioni', text: 'Tipologie Lezioni', icon: (<BookIcon />) },\n            { pageType: 'abbonamenti', text: 'Tipologie Abbonamenti', icon: (<CreditCardIcon />) },\n            { pageType: 'utenti', text: 'Utenti', icon: (<PeopleIcon />) },\n          ].map((item, idx) => (\n            <ListItem button key={item.pageType}>\n              <ListItemIcon>\n                {/* <HomeIcon/> */}\n                {item.icon}\n              </ListItemIcon>\n              <NavLink onClick={handleDrawerToggle(false)} to={{ pathname: `/${urlStruttura}/${item.pageType}` }} className={classes.link}>\n                <ListItemText primary={item.text} />\n              </NavLink>\n            </ListItem>\n          ))\n        }\n      </List>\n    </div>\n  );\n\n  return (\n    <AzureAD reduxStore={getStore()} provider={authProvider}>\n      <Fragment>\n        <Fab size=\"medium\" variant=\"round\"\n          className={classes.navToggleFAB}\n          onClick={handleDrawerToggle(true)}>\n          <MenuIcon style={{ color: \"white\" }} />\n        </Fab>\n        <SwipeableDrawer\n          variant=\"temporary\"\n          anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n          open={drawerIsOpen}\n          onClose={handleDrawerToggle(false)}\n          onOpen={handleDrawerToggle(true)}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n        >\n          {drawerContent}\n        </SwipeableDrawer>\n      </Fragment >\n    </AzureAD>\n  );\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/config.js",["510"],"export default  {\n    MockedAPI: false,\n    //APIServer: \"https://localhost:44346\",\n    APIServer: \"https://ready2doapi.azurewebsites.net\",\n    BaseAPIPath: \"https://ready2doapi.azurewebsites.net/api\",\n    //BaseAPIPath: \"https://localhost:44346/api\",\n    AzureB2COptions: {\n        auth: {\n          //authority: 'https://login.microsoftonline.com/tfp/ready2do.onmicrosoft.com/B2C_1_SigninSignup',\n          authority: 'https://ready2do.b2clogin.com/ready2do.onmicrosoft.com/oauth2/v2.0/authorize?p=B2C_1_SigninSignup',\n          clientId: '2f7c5099-8cf6-4cc3-a601-6e8afdac86f7',\n          //redirectUri: 'https://localhost:44343/'\n            redirectUri: 'https://ready2do.azurewebsites.net'\n        },\n        cache: {\n          cacheLocation: \"localStorage\",\n          storeAuthStateInCookie: true\n        }\n      },\n      AzureB2CAuthenticationParameters: {\n        scopes: [\n          'https://ready2do.onmicrosoft.com/api/api_all'\n        ]\n    },\n    GoogleAPI:{\n      MapsKey:\"AIzaSyB3QBIUnHrigeqjjnEmwZn717ixOCcMYUw\",\n      Libraries: ['places']\n    }\n}\n","/home/khoa/devjin/fe-react/src/ClientApp/src/api/apiUtils.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/commons/sidenav/R2DSideNavHeader.js",["511"],"import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { shallowEqual, useSelector } from 'react-redux'\nimport { FormControl, Select, Avatar } from '@material-ui/core';\nimport { UserSelectors } from \"../../../store/selectors/user.selectors\";\n//import { changeStrutturaCorrente} from '../../../store/actions/user.actions'\n\nconst useStyles = makeStyles(theme => ({\n    root:{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        height: '160px',\n        backgroundColor: '#636363',\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    avatar: {\n        marginTop:'25px',\n        marginLeft:'25px',\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n        color:'black',\n        backgroundColor:'#FFFFFF'\n    }\n  }));\n\n  export default (props) =>  {\n    const classes = useStyles();\n    const struttureGestite = useSelector(UserSelectors.getStruttureOwned, shallowEqual)\n    const idStrutturaCorrente= useSelector(UserSelectors.getIdStrutturaCorrente, shallowEqual)\n\n    return(\n        <div className={classes.root}>\n            <Avatar className={classes.avatar}>\n\n            </Avatar>\n            <FormControl className={classes.formControl}>\n                <Select\n                    native\n                    value={idStrutturaCorrente}\n                    //onChange={handleChangeStruttura}\n                    name=\"struttura\"\n                    className={classes.selectEmpty}>\n                    {\n                        //TODO: Sostituire l'Id della struttura con il nome quando sarà disponibile\n                    struttureGestite ? struttureGestite.map((struttura, index) => <option key={index} value={struttura.id}>{struttura.nome}</option>) \n                        : \"\"\n                    }\n                </Select>\n            </FormControl>\n        </div>\n    );\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/applicationInsights.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.images.api.mock.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/api/strutture.api.mock.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/GiornoAperturaEdit.js",["512","513","514","515"],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/PrenotazioniUtenteSection.js",["516","517","518"],"import {\n  Box,\n  Fab,\n  makeStyles,\n  Paper,\n  Typography,\n  Button,\n  Grid,\n} from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport log from \"loglevel\";\nimport React, { useState } from \"react\";\nimport PrenotazioneUtenteAdd from \"./PrenotazioneUtenteAdd\";\nimport PrenotazioniUtenteList from \"./PrenotazioniUtenteList\";\nimport { Container } from \"@material-ui/core\";\n\nconst _logger = log.getLogger(\"AbbonamentiUtenteSection\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    margin: theme.spacing(3, 0, 0, 0),\n    minHeight: 130,\n  },\n  headerTitle: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    display: \"flex\",\n  },\n  headerButton: {\n    backgroundColor: \"grey\",\n    color: \"white\",\n  },\n  fabAdd: {\n    float: \"right\",\n    marginRight: \"20px\",\n    // right:'10px'\n  },\n  InsertButton: {\n    backgroundColor: \"grey\",\n    color: \"white\",\n    marginRight: \"10px\",\n    float: \"right\",\n  },\n}));\n\nconst PrenotazioniUtenteSection = (props) => {\n  const idStruttura = props.idStruttura;\n  const idUtente = props.idUtente;\n  const prenotazioniConfermate = props.prenotazioniConfermate ?? [];\n  const prenotazioniNonConfermate = props.prenotazioniNonConfermate ?? [];\n  const waitList = props.waitList ?? [];\n  const abbonamenti = props.abbonamenti ?? [];\n  const reloadHandler = props.reloadHandler;\n  const classes = useStyles();\n\n  const [editMode, setEditMode] = useState(false);\n  const [prenotazioneSelezionata, setPrenotazioneSelezionata] = useState(null);\n\n  _logger.debug(\n    `PrenotazioniUtenteSection -> idStruttura: ${idStruttura}, idUtente: ${idUtente}`\n  );\n\n  //Normalizziamo le varie tipologie di prenotazioni in un unico array\n  const normalizePrenotazione = (p) => {\n    return {\n      id: `CO-${p.id}`,\n      originalId: p.id,\n      idEvento: p.schedule?.id,\n      nome: p.schedule?.tipologiaLezione?.nome,\n      dataPrenotazione: p.dataCreazione,\n      dataLezione: p.schedule.dataOraInizio,\n      stato: \"Confermata\",\n      kind: \"Confermato\",\n    };\n  };\n\n  const normalizePrenotazioneNonConfermata = (p) => {\n    return {\n      id: `DC-${p.id}`,\n      originalId: p.id,\n      idEvento: p.schedule?.id,\n      nome: p.schedule?.tipologiaLezione?.nome,\n      dataPrenotazione: p.dataCreazione,\n      dataLezione: p.schedule.dataOraInizio,\n      stato: \"Da Confermare\",\n      kind: \"NonConfermato\",\n    };\n  };\n\n  const normalizeWaitList = (p) => {\n    return {\n      id: `WL-${p.id}`,\n      originalId: p.id,\n      idEvento: p.schedule?.id,\n      nome: p.schedule?.tipologiaLezione?.nome,\n      dataPrenotazione: p.dataCreazione,\n      dataLezione: p.schedule.dataOraInizio,\n      stato: \"In Coda\",\n      kind: \"WaitList\",\n    };\n  };\n\n  const prenotazioni = prenotazioniConfermate\n    .map(normalizePrenotazione)\n    .concat(prenotazioniNonConfermate.map(normalizePrenotazioneNonConfermata))\n    .concat(waitList.map(normalizeWaitList));\n\n  const handleEditPrenotazione = (idxPrenotazione) => {\n    if (!idxPrenotazione) {\n      return;\n    }\n    let prenotazione = prenotazioni[idxPrenotazione];\n    _logger.debug(\n      `handleEditPrenotazione - idPrenotazione: ${idxPrenotazione}, Prenotazione: ${JSON.stringify(\n        prenotazione\n      )}`\n    );\n    setPrenotazioneSelezionata(prenotazione);\n    setEditMode(true);\n  };\n\n  const handlePrenotazioneChange = () => {\n    if (reloadHandler) {\n      reloadHandler();\n    }\n    setEditMode(false);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Box container className={classes.headerTitle}>\n        <Grid xs={12} md={1}>\n          <Button className={classes.headerButton}>STORICO</Button>\n        </Grid>\n        <Grid xs={12} md={10}>\n          <Typography variant=\"h6\">Prenotazioni utente</Typography>\n        </Grid>\n        {/* {!editMode ? \n                    <Fab color=\"primary\" size=\"small\" aria-label=\"add\"\n                        className={classes.fabAdd}\n                        onClick={(e)=>{setPrenotazioneSelezionata(null); setEditMode(!editMode); _logger.debug(`editMode: ${editMode}`)}}>  \n                        <AddIcon />\n                        </Fab> : \"\" } */}\n        <Grid xs={12} md={1}>\n          <InfoIcon style={{ fontSize: 40, color: \"grey\" }}></InfoIcon>\n        </Grid>\n      </Box>\n\n      {!editMode ? (\n        <PrenotazioniUtenteList\n          idStruttura={idStruttura}\n          idUtente={idUtente}\n          prenotazioni={prenotazioni}\n          onChangeHandler={handlePrenotazioneChange}\n          onEditHandler={handleEditPrenotazione}\n        />\n      ) : (\n        <PrenotazioneUtenteAdd\n          idStruttura={idStruttura}\n          idUtente={idUtente}\n          prenotazioneUtente={prenotazioneSelezionata}\n          abbonamenti={abbonamenti}\n          onCancelHandler={() => {\n            setEditMode(false);\n          }}\n          onChangeHandler={handlePrenotazioneChange}\n        />\n      )}\n      {!editMode && (\n          <Box style={{display: 'flow-root', margin: '10px'}}>\n        <Button\n          size=\"small\"\n          type=\"submit\"\n          className={classes.InsertButton}\n          onClick={(e) => {\n            setPrenotazioneSelezionata(null);\n            setEditMode(!editMode);\n            _logger.debug(`editMode: ${editMode}`);\n          }}\n        >\n          INSERISCI\n        </Button>\n        </Box>\n      )}\n    </Paper>\n  );\n};\n\nexport default PrenotazioniUtenteSection;\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/CertificatiUtenteSection.js",["519","520","521","522"],"import {\n    Box,\n    Fab,\n    makeStyles,\n    Paper,\n    Typography, Button, Grid\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport InfoIcon from '@material-ui/icons/Info';\nimport log from 'loglevel';\nimport React, { useState } from 'react';\nimport CertificatiUtenteList from './CertificatiUtenteList';\nimport CertificatiUtenteAdd from './CertificatoUtenteAdd';\n\nconst _logger = log.getLogger('AbbonamentiUtenteSection');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(1),\n        margin: theme.spacing(3, 0, 0, 0),\n        minHeight: 130\n    },\n    headerTitle: {\n        flexGrow: 1,\n        justifyContent: 'center',\n        textAlign: 'center',\n        display: 'flex'\n    },\n    headerButton: {\n        backgroundColor: 'grey',\n        color: 'white'\n    },\n    fabAdd:{\n        float: 'right',\n        marginRight: '20px'\n        // right:'10px'\n    }\n}));\n\nconst CertificatiUtenteSection = (props) => {\n    const idStruttura = props.idStruttura;\n    const idUtente = props.idUtente;\n    const certificati = props.certificati;\n    const reloadHandler = props.reloadHandler;\n    const classes = useStyles();\n\n    const [editMode, setEditMode] = useState(false);\n    const [certificatoSelezionato, setCertificatoSelezionato] = useState(null);\n\n    _logger.debug(`CertificatiUtenteSection -> idStruttura: ${idStruttura}, idUtente: ${idUtente}`);\n\n    const handleEditCertificato = (idCertificato) => {\n        if (!idCertificato) { return; }\n        let certificato = certificati?.find(a => a.id === idCertificato);\n        _logger.debug(`handleEditCertificato - idCertificato: ${idCertificato}, Certificato: ${JSON.stringify(certificato)}`);\n        setCertificatoSelezionato(certificato);\n        setEditMode(true);\n    }\n\n    const handleCertificatiChange = ()=>{\n        if(reloadHandler){reloadHandler();}\n        setEditMode(false);\n    }\n\n    return (\n        <Paper className={classes.root}>\n             <Box container className={classes.headerTitle}>\n             <Grid xs={12} md={1}>\n                <Button className={classes.headerButton}>\n                    STORICO\n                </Button></Grid>\n                <Grid xs={12} md={10}>\n                <Typography variant=\"h6\">Certificato medico</Typography></Grid>\n                {/* {!editMode ? \n                    <Fab color=\"primary\" size=\"small\" aria-label=\"add\"\n                        className={classes.fabAdd}\n                        onClick={(e)=>{setCertificatoSelezionato(null); setEditMode(!editMode); _logger.debug(`editMode: ${editMode}`)}}>  \n                        <AddIcon />\n                        </Fab> : \"\" } */}\n                <Grid xs={12} md={1}><InfoIcon style={{ fontSize: 40, color: 'grey' }} ></InfoIcon></Grid>\n            </Box>\n            \n            \n            {!editMode ? \n                <CertificatiUtenteList idStruttura={idStruttura} idUtente={idUtente} certificati={certificati} certificatoUtente={certificatoSelezionato} \n                    onChangeHandler={handleCertificatiChange} onEditHandler={handleEditCertificato}/> :\n                <CertificatiUtenteAdd idStruttura={idStruttura} idUtente={idUtente} certificatoUtente={certificatoSelezionato} \n                                    onCancelHandler={()=>{setEditMode(false);}}\n                                    onChangeHandler={handleCertificatiChange}/>\n            }              \n        </Paper>\n    )\n\n}\n\nexport default CertificatiUtenteSection;","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/AbbonamentiUtenteSection.js",["523","524","525","526","527"],"import {\n    Box,\n    Fab,\n    Fade,\n    makeStyles,\n    Paper,\n    Typography,\n    Button,\n    Grid\n} from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\nimport log from 'loglevel';\nimport React, { Fragment, useState } from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport AbbonamentiUtenteList from './AbbonamentiUtenteList';\nimport AbbonamentiUtenteAdd from './AbbonamentoUtenteAdd';\nimport { grey } from '@material-ui/core/colors';\n\nconst _logger = log.getLogger('AbbonamentiUtenteSection');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(1),\n        margin: theme.spacing(4, 0, 0, 0),\n        minHeight: 130\n    },\n    headerTitle: {\n        flexGrow: 1,\n        justifyContent: 'center',\n        textAlign: 'center',\n        display: 'flex'\n    },\n    headerButton: {\n        backgroundColor: 'grey',\n        color: 'white'\n    },\n    fabAdd:{\n        float: 'right',\n        marginRight: '20px'\n        // right:'10px'\n    }\n}));\n\nconst AbbonamentiUtenteSection = (props) => {\n    const idStruttura = props.idStruttura;\n    const idUtente = props.idUtente;\n    const abbonamenti = props.abbonamenti;\n    const reloadHandler = props.reloadHandler;\n    const classes = useStyles();\n\n    const [editMode, setEditMode] = useState(false);\n    const [abbonamentoSelezionato, setAbbonamentoSelezionato] = useState(null);\n\n    _logger.debug(`AbbonamentiUtenteSection -> idStruttura: ${idStruttura}, idUtente: ${idUtente}`);\n\n    const handleEditAbbonamento = (idAbbonamento) => {\n        if (!idAbbonamento) { return; }\n        let abbonamento = abbonamenti?.find(a => a.id === idAbbonamento);\n        setAbbonamentoSelezionato(abbonamento);\n        setEditMode(true);\n    }\n\n    const handleAbbonamentiChange = ()=>{\n        setEditMode(false);\n        if(reloadHandler){reloadHandler();}\n    }\n\n    return (\n        <Paper className={classes.root}>\n             <Box container className={classes.headerTitle}>\n                <Grid xs={12} md={1}>\n                <Button className={classes.headerButton}>\n                    STORICO\n                </Button></Grid>\n                <Grid xs={12} md={10}>\n                <Typography variant=\"h6\">Abbonamenti</Typography></Grid>\n                {/* {!editMode ? \n                    <Fab color=\"primary\" size=\"small\" aria-label=\"add\"\n                        className={classes.fabAdd}\n                        onClick={(e)=>{setAbbonamentoSelezionato(null); setEditMode(!editMode); _logger.debug(`editMode: ${editMode}`)}}>  \n                        <AddIcon />\n                        </Fab> : \"\" } */}\n                <Grid xs={12} md={1}><InfoIcon style={{ fontSize: 40, color: 'grey' }} ></InfoIcon></Grid>\n            </Box>\n            \n            \n            {!editMode ? \n                <AbbonamentiUtenteList idStruttura={idStruttura} idUtente={idUtente} abbonamenti={abbonamenti} abbonamentoUtente={abbonamentoSelezionato}\n                    onChangeHandler={handleAbbonamentiChange} onEditAbbonamento={handleEditAbbonamento}/> :\n                <AbbonamentiUtenteAdd idStruttura={idStruttura} idUtente={idUtente} abbonamentoUtente={abbonamentoSelezionato} \n                                    onCancelHandler={()=>{setEditMode(false);}}\n                                    onChangeHandler={handleAbbonamentiChange}/>\n            }              \n        </Paper>\n    )\n\n}\n\nexport default AbbonamentiUtenteSection;","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaContattiView.js",["528"],"import React from 'react'\nimport { Typography, Box } from '@material-ui/core';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport PhoneIcon from '@material-ui/icons/Phone';\n\nconst StrutturaContattiView = (props)=>{\n    const anagraficaStruttura = props.struttura;\n    const alignSelf = props.alignSelf ?? \"flex-end\";\n    const flex = props.flex ?? 2;\n\n    return(\n        <Box alignSelf={alignSelf} >\n            <Typography variant=\"h5\" gutterBottom>Contatti</Typography>\n            <Typography style={{fontWeight:\"bold\"}} gutterBottom>{anagraficaStruttura?.ragioneSociale}</Typography>\n            <Typography gutterBottom>{anagraficaStruttura?.indirizzo}</Typography>\n            {anagraficaStruttura?.email ? <Typography gutterBottom><AlternateEmailIcon style={{fontSize:\"1rem\"}}/> {anagraficaStruttura?.email}</Typography> : '' }\n            {anagraficaStruttura?.numTelefono ? <Typography gutterBottom><PhoneIcon style={{fontSize:\"1rem\"}}/> {anagraficaStruttura?.numTelefono}</Typography> : ''}            \n        </Box>\n    )\n}\n\nexport default StrutturaContattiView;","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaMap.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtenteProfiloEdit.js",["529","530"],"import log from \"loglevel\";\nimport React, { Fragment } from \"react\";\nimport { Formik, ErrorMessage, Form } from \"formik\";\nimport { UsersAPI } from \"../../api/users.api\";\nimport {\n  Grid,\n  Button,\n  makeStyles,\n  TextField,\n  Typography,\n  Box,\n  Paper,\n} from \"@material-ui/core\";\nimport R2DLoader from \"../commons/R2DLoader\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nconst _logger = log.getLogger(\"UtenteProfiloEdit\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // minHeight: \"400px\",\n    position: \"relative\",\n    marginBottom: \"20px\",\n    marginTop: \"16px\",\n    padding: '10px'\n  },\n  form: {\n    padding: \"20px\",\n  },\n  btnSalva: {\n    backgroundColor: \"#3788d8\",\n    color: \"white\",\n    // margin: 'auto',\n    margin: \"5px 10px\",\n  },\n  btnAnnulla: {\n    backgroundColor: \"#E31F4F\",\n    color: \"white\",\n    // margin: 'auto',\n    margin: \"5px 10px\",\n  },\n  errorMessage: {\n    color: \"red\",\n    fontSize: \"0.7rem\",\n  },\n  title: {  \n    paddingTop: \"10px\",\n    marginBottom: \"10px\",\n    fontWeight: \"700\",\n  },\n  grid: {\n    padding: \"15px\",\n  },\n  InsertButton: {\n    float: \"right\",\n    backgroundColor: \"grey\",\n    color: \"white\",\n    marginRight: \"10px\",\n  },\n  box: {\n    margin: \"5px\",\n  },\n}));\n\nexport default (props) => {\n  const classes = useStyles();\n  const [viewMode, setViewMode] = React.useState(\"View\");\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [profilo, setProfilo] = React.useState(null);\n\n  //Recuperiamo tutti i dati necessari per la pagina (Profilo + Clienti + Abbonamenti)\n  React.useEffect(() => {\n    //const fetchOperations = [];\n    async function fetchProfiloUtente() {\n      const data = await UsersAPI.GetCurrentUserProfileAsync();\n      _logger.debug(\n        `UtenteProfiloEdit->fetchProfiloUtente() - data: ${JSON.stringify(\n          data\n        )}`\n      );\n      setProfilo(data);\n      setIsLoading(false);\n    }\n    // fetchOperations.push(fetchProfiloUtente());\n    // fetchOperations.push(fetchClientiFollowed());\n    // fetchOperations.push(fetchAbbonamenti());\n    // Promise.all(fetchOperations).then(setIsLoading(false));\n    fetchProfiloUtente();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isFetchingInProgress = () => {\n    return isLoading;\n  };\n\n  const isViewMode = () => {\n    const result = viewMode === \"View\";\n    return result;\n  };\n\n  function renderForm() {\n    const handleFormSubmmit = async (values, actions) => {\n      _logger.debug(\n        `UtenteProfiloEdit->FormSubmit() - values: ${JSON.stringify(values)}`\n      );\n      await UsersAPI.SaveUserProfiloAsync(values);\n      actions.setSubmitting(false); //NOTA: essendo async non è tecnicamente necessaria questa chiamata, la fa Formik implicitamente\n      setViewMode(\"View\");\n    };\n\n    const handleFormReset = async (values, actions) => {\n      //Ripristiniamo i valori iniziali, eliminando le modifiche\n      // actions.resetForm();\n      //Switchiamo in View Mode\n      setViewMode(\"View\");\n    };\n\n    const formValidateAsync = async (values) => {\n      const errors = {};\n      if (!values.nome) {\n        errors.nome = \"E' necessario specificare il nome\";\n      }\n      if (!values.cognome) {\n        errors.cognome = \"E' necessario specificare il cognome\";\n      }\n      if (!values.displayName) {\n        errors.displayName = \"E' necessario specificare il Nickname\";\n      }\n      if (!values.cognome) {\n        errors.cognome = \"E' necessario specificare il cognome\";\n      }\n      _logger.debug(\n        `UtenteProfiloEdit->formValidateAsync() - errors: ${JSON.stringify(\n          errors\n        )}`\n      );\n      return errors;\n    };\n\n    {\n      if (!isViewMode())\n        return (\n          <Formik\n            initialValues={profilo}\n            enableReinitialize={false}\n            onSubmit={handleFormSubmmit}\n            onReset={handleFormReset}\n            validate={formValidateAsync}\n          >\n            {(props, form) => (\n              <Form\n                onSubmit={props.handleSubmit}\n                autoComplete=\"off\"\n                className={classes.form}\n              >\n                <Grid container>\n                  <Grid item xs={4}>\n                    <TextField\n                      name=\"nome\"\n                      label=\"Nome\"\n                      onChange={props.handleChange}\n                      onBlur={props.handleBlur}\n                      value={props.values.nome}\n                      fullWidth\n                      margin=\"normal\"\n                    />\n                    <ErrorMessage\n                      className={classes.errorMessage}\n                      component=\"span\"\n                      name=\"nome\"\n                    />\n                  </Grid>\n                  <Grid item xs={8} />\n                  <Grid item xs={4}>\n                    <TextField\n                      name=\"cognome\"\n                      label=\"Cognome\"\n                      onChange={props.handleChange}\n                      onBlur={props.handleBlur}\n                      value={props.values.cognome}\n                      fullWidth\n                      margin=\"normal\"\n                    />\n                    <ErrorMessage\n                      className={classes.errorMessage}\n                      component=\"span\"\n                      name=\"cognome\"\n                    />\n                  </Grid>\n                  <Grid item xs={8} />\n                  <Grid item xs={4}>\n                    <TextField\n                      name=\"displayName\"\n                      label=\"Nickname\"\n                      onChange={props.handleChange}\n                      onBlur={props.handleBlur}\n                      value={props.values.displayName}\n                      fullWidth\n                      margin=\"normal\"\n                    />\n                    <ErrorMessage\n                      className={classes.errorMessage}\n                      component=\"span\"\n                      name=\"displayName\"\n                    />\n                  </Grid>\n                  <Grid item xs={8} />\n                  <Grid item xs={4}>\n                    <TextField\n                      name=\"telephoneNumber\"\n                      label=\"Telefono Mobile\"\n                      onChange={props.handleChange}\n                      onBlur={props.handleBlur}\n                      value={props.values.telephoneNumber}\n                      fullWidth\n                      margin=\"normal\"\n                    />\n                    <ErrorMessage\n                      className={classes.errorMessage}\n                      component=\"span\"\n                      name=\"telephoneNumber\"\n                    />\n                  </Grid>\n                  <Grid item xs={8} />\n                  <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                    <Fragment>\n                      <Button\n                        size=\"large\"\n                        variant=\"contained\"\n                        onClick={props.handleReset}\n                        className={classes.btnAnnulla}\n                      >\n                        Annulla\n                      </Button>\n                      <Button\n                        size=\"large\"\n                        variant=\"contained\"\n                        type=\"submit\"\n                        className={classes.btnSalva}\n                      >\n                        Salva\n                      </Button>\n                    </Fragment>\n                  </Grid>\n                </Grid>\n              </Form>\n            )}\n          </Formik>\n        );\n      else\n        return (\n          <Grid container spacing={3} className={classes.grid}>\n            <Grid item xs={12} md={6}>\n              <Typography component=\"div\">\n                <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n                  Nome:\n                </Box>\n                <Box component=\"span\">{profilo?.nome}</Box>\n              </Typography>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Typography component=\"div\">\n                <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n                  Cognome:\n                </Box>\n                <Box component=\"span\">{profilo?.cognome}</Box>\n              </Typography>\n            </Grid>\n            <Grid item xs={12} md={12}>\n              <Typography component=\"div\">\n                <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n                  Nickname:\n                </Box>\n                <Box component=\"span\">{profilo?.displayName}</Box>\n              </Typography>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Typography component=\"div\">\n                <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n                  Telefono mobile:\n                </Box>\n                <Box component=\"span\">{profilo?.telephoneNumber}</Box>\n              </Typography>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Typography component=\"div\">\n                <Box component=\"span\" fontWeight=\"fontWeightBold\" mr={1}>\n                  Email:\n                </Box>\n                <Box component=\"span\">{profilo?.email}</Box>\n              </Typography>\n            </Grid>\n            {/* <Grid item xs={12} md={12}></Grid>\n            <Grid item xs={12} md={12}></Grid> */}\n            <Grid item xs={12} md={11}></Grid>\n            <Grid item xs={12} md={1}>\n              <Button\n                className={classes.InsertButton}\n                onClick={() => {\n                  setViewMode(\"Edit\");\n                }}\n              >\n                Modifica\n              </Button>\n            </Grid>\n          </Grid>\n        );\n    }\n  }\n\n  return (\n    // isFetchingInProgress() ? <R2DLoader /> : (isViewMode() ? renderViewMode() : renderEditMode())\n    <Paper className={classes.root}>\n      <Grid container spacing={3} className={classes.grid}>\n        <Grid item xs={12} md={1}></Grid>\n        <Grid item xs={12} md={10}>\n          <Grid\n            container\n            alignItems=\"center\"\n            justify=\"center\"\n            direction=\"column\"\n          >\n            <Grid item xs={12}>\n              <Typography className={classes.title} align=\"center\" variant=\"h5\">\n                I Miei Dati\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} md={1}>\n          <InfoIcon style={{ fontSize: 40, color: \"grey\", float: \"right\" }}></InfoIcon>\n        </Grid>\n      </Grid>\n      {isFetchingInProgress() ? <R2DLoader /> : renderForm()}\n    </Paper>\n  );\n};\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/R2DCalendariContainer.js",["531"],"/**\n * Componente che renderizza i Tabs con le varie location e per ciascuna location presenta il rispettivo calnedario\n */\nimport log from 'loglevel';\nimport React, { useEffect, useState, Fragment } from 'react'\nimport { Tab, Tabs, Paper, makeStyles, CircularProgress } from '@material-ui/core'\nimport { StruttureEventiAPI } from '../../api/strutture.eventi.api';\nimport StrutturaCalendarAdmin from './StrutturaCalendarAdmin';\nimport StrutturaCalendarView from './StrutturaCalendarView';\n\nconst _logger = log.getLogger('R2DCalendariContainer')\n\nconst useStyles = makeStyles(theme => ({\n    TabContainer: {\n        marginTop: \"10px\"\n    }\n}));\n\n\nexport default  (props) => {\n    const idStruttura = props.idStruttura ?? -1;\n    const urlRoute = props.urlRoute;\n    const renderMode = props.renderMode ?? 'view'\n    const classes = useStyles();\n    const [locationsIsLoading, setLocationsIsLoading] = useState(true);\n    const [locations, setLocations] = useState(null);\n    const [selectedTab, setSelectedTab] = useState(0);\n\n    useEffect(() => {\n        async function fetchData() {\n            _logger.debug(`R2DCalendariContainer->useEffect() - Fetching Locations (${idStruttura})`);\n            const data = await StruttureEventiAPI.FetchLocationsAsync(idStruttura);\n            setLocations(data);\n            setLocationsIsLoading(false);\n        };\n        if (idStruttura && idStruttura > 0) {\n            fetchData();\n        }\n    }, [idStruttura, selectedTab])\n\n    const handleChange = (event, newTab) => {\n        setSelectedTab(newTab);\n    };\n\n    function renderTabs() {\n        _logger.debug(`R2DCalendariContainer->renderTabs() - locations: ${JSON.stringify(locations)}`);\n        return (\n            <Paper className={classes.TabContainer}>\n                <Tabs variant=\"fullWidth\" value={selectedTab} onChange={handleChange}   >\n                    {\n                        locations.map((location, index) => {\n                            return (\n                                <Tab key={location.id} value={index} label={location.nome} />\n                            )\n                        })\n                    }\n                </Tabs>\n                {\n                    renderMode === 'view' ? \n                    <StrutturaCalendarView idStruttura={idStruttura} idLocation={locations[selectedTab].id} urlRoute={urlRoute} />\n                    :                    \n                    <StrutturaCalendarAdmin idStruttura={idStruttura} idLocation={locations[selectedTab].id} urlRoute={urlRoute} />\n                }\n            </Paper>\n        )\n    }\n\n    function renderNoLocations() {\n        _logger.debug(`R2DCalendariContainer->renderNoLocations() - locations: ${JSON.stringify(locations)}`);\n        return (\n            <div>No locations!</div>\n        )\n    }\n\n    function renderLocationsLoading() {\n        return (\n            <CircularProgress />\n        )\n    }\n    return (\n        <Fragment>\n            {\n                locationsIsLoading ? renderLocationsLoading() : (locations && locations.length > 0 ? renderTabs() : renderNoLocations())\n            }\n        </Fragment>\n    )\n}\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/PrenotazioniUtenteList.js",["532","533","534","535","536","537","538","539"],"import {\n  Button,\n  makeStyles,\n  Switch,\n  Table,\n  Container,\n  Fab,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport log from \"loglevel\";\nimport React, { Fragment } from \"react\";\nimport { StruttureEventiAPI } from \"../../../api/strutture.eventi.api\";\nimport { useSnackbar } from \"notistack\";\n\nconst _logger = log.getLogger(\"AbbonamentiUtente\");\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: \"600px\",\n    position: \"relative\",\n  },\n  table: {\n    minWidth: 650,\n  },\n  FAB: {\n    backgroundColor: \"#000000\",\n    marginRight: \"10px\",\n  },\n});\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    borderBottom: \"none\",\n    padding: \"5px\",\n  },\n  body: {\n    borderBottom: \"none\",\n    padding: \"5px\",\n  },\n}))(TableCell);\n\nconst PrenotazioniUtenteList = (props) => {\n  const idStruttura = props.idStruttura;\n  const idUtente = props.idUtente;\n  const prenotazioni = props.prenotazioni;\n  const onChangeHandler = props.onChangeHandler;\n  const onEditHandler = props.onEditHandler;\n  const classes = useStyles();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  _logger.debug(\n    `PrenotazioniUtenteList -> idStruttura: ${idStruttura}, idUtente: ${idUtente}, Prenotazioni: ${JSON.stringify(\n      prenotazioni\n    )}`\n  );\n\n  // convert date format\n  // @khoa\n  function dateFormat(dateStr) {\n    let date = new Date(dateStr);\n\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let dt = date.getDate();\n    let hh = date.getHours();\n    let mm = date.getMinutes();\n\n    if (dt < 10) {\n      dt = \"0\" + dt;\n    }\n    if (month < 10) {\n      month = \"0\" + month;\n    }\n    if (hh < 10) {\n      hh = \"0\" + hh;\n    }\n    if (mm < 10) {\n      mm = \"0\" + mm;\n    }\n    if (!dt || !month || !year || !hh || !mm) return \"\";\n    return dt + \"/\" + month + \"/\" + year + \"-\" + hh + \":\" + mm;\n  }\n\n  const handleEditPrenotazione = (event, idPrenotazione) => {\n    //ATTENZIONE! L'Id può far riferimento a vari tipi di prenotazioni (confermate, non confermate, wl)\n    if (onEditHandler) {\n      onEditHandler(idPrenotazione);\n    }\n  };\n\n  const handleDeletePrenotazione = async (kind, idEvento, idPrenotazione) => {\n    switch (kind) {\n      case \"Confermato\":\n        await StruttureEventiAPI.AnnullaPrenotazioneByAdminAsync(\n          idStruttura,\n          idEvento,\n          idPrenotazione\n        );\n        enqueueSnackbar(\"Prenotazione cancellata\", { variant: \"success\" });\n        break;\n      case \"NonConfermato\":\n        await StruttureEventiAPI.RifiutaAppuntamentoNonConfermatoByAdminAsync(\n          idStruttura,\n          idEvento,\n          idPrenotazione\n        );\n        enqueueSnackbar(\"Prenotazione cancellata\", { variant: \"success\" });\n        break;\n      case \"WaitList\":\n        enqueueSnackbar(\"Cancellazione dalla wait list non supportata\", {\n          variant: \"error\",\n        });\n        break;\n    }\n    if (onChangeHandler) {\n      onChangeHandler(idPrenotazione);\n    }\n  };\n\n  function renderNoData() {\n    return (\n      <Typography variant=\"h6\">Nessuna Prenotazione per l'utente</Typography>\n    );\n  }\n\n  function renderTable() {\n    return (\n      <TableContainer>\n        <Table className={classes.table} aria-label=\"Prenotazioni\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell align=\"left\">Nome Lezione</StyledTableCell>\n              <StyledTableCell align=\"left\">\n                Data e Ora prenotazione\n              </StyledTableCell>\n              <StyledTableCell align=\"left\">Data e Ora Lezione</StyledTableCell>\n              <StyledTableCell align=\"left\">Stato Lezione</StyledTableCell>\n              <StyledTableCell align=\"center\">Impostazioni</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {prenotazioni?.map((p) => (\n              <TableRow key={p.id}>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  {p.nome}\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  {dateFormat(p.dataPrenotazione)}\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">\n                  {dateFormat(p.dataLezione)}\n                </StyledTableCell>\n                <StyledTableCell align=\"left\">{p.stato}</StyledTableCell>\n                <StyledTableCell align=\"right\">\n                  {/* <Button\n                    startIcon={<DeleteIcon />}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={(event) => {\n                      handleDeletePrenotazione(\n                        p.kind,\n                        p.idEvento,\n                        p.originalId\n                      );\n                    }}\n                  >\n                    Elimina\n                  </Button> */}\n                  {/* <Button startIcon={<EditIcon />} size=\"small\" variant=\"outlined\" onClick={(event)=>{handleEditPrenotazione(event, p.id)}} >\n                                        Edit\n                                    </Button> */}\n                  <Fab\n                    size=\"small\"\n                    variant=\"round\"\n                    className={classes.FAB}\n                    onClick={(e) => {\n                      handleDeletePrenotazione(\n                        p.kind,\n                        p.idEvento,\n                        p.originalId\n                      );\n                    }}\n                  >\n                    <MenuIcon style={{ color: \"white\" }} />\n                  </Fab>\n                </StyledTableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n\n  return (\n    <Fragment>\n      {prenotazioni && prenotazioni.length > 0 ? renderTable() : renderNoData()}\n    </Fragment>\n  );\n};\n\nexport default PrenotazioniUtenteList;\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/AbbonamentoUtenteAdd.js",["540","541","542"],"import {\n    Box, Button, FormControl, FormControlLabel, Grid, Hidden, InputLabel, makeStyles,\n    MenuItem, Select, Switch,\n    TextField\n} from '@material-ui/core';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { Skeleton } from '@material-ui/lab';\nimport { DatePicker } from '@material-ui/pickers';\nimport add from 'date-fns/add';\nimport isDate from 'date-fns/isDate';\nimport parseISO from 'date-fns/parseISO';\nimport log from 'loglevel';\nimport React, { useEffect, useState } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { StruttureEventiAPI } from '../../../api/strutture.eventi.api';\nimport { StruttureUtentiAPI } from '../../../api/strutture.utenti.api';\n\nconst _logger = log.getLogger('AbbonamentiUtente');\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: \"35px\",\n        paddingTop: \"15px\",\n        paddingBottom: \"15px\"\n    },\n    container: {\n        paddingTop: 15\n    },\n    gridContainer: {\n        paddingLeft: 10\n    },\n    formControlTipoAbbonamento: {\n        // marginTop: \"16px\",\n        // marginBottom: \"8px\",\n        minWidth: \"180px\",\n        width: \"90%\"\n    },\n    switchLabel: {\n        paddingTop: 10\n    },\n    gridButtons: {\n        paddingTop: \"20px\"\n    },\n    btnSalva: {\n        margin: '20px'\n    },\n    btnAnnulla: {\n        margin: '20px'\n    }\n}));\n/***\n * Componente per l'aggiunta di un nuovo abbonamento ad un Utente\n */\nconst AbbonamentiUtenteAdd = (props) => {\n    const classes = useStyles();\n    const idStruttura = props.idStruttura;\n    const idUtente = props.idUtente;\n    const abbonamentoUtente = props.abbonamentoUtente ?? {};\n    const onChangeHandler = props.onChangeHandler;\n\n    _logger.debug(`onChangeHandler: ${onChangeHandler}`);\n\n    const onCancelHandler = props.onCancelHandler;\n\n    const initialValues = {\n        idTipoAbbonamento: '', //Lo valoriziamo dopo che ritorna la chiamata all'API altrimenti otteniamo un warning perché non sono ancora stati caricati i valori della select\n        dataInizioValidita: abbonamentoUtente?.dataInizioValidita ?? null,\n        scadenza: abbonamentoUtente?.scadenza ?? null,\n        ingressiIniziali: abbonamentoUtente?.ingressiIniziali ?? '',\n        ingressiResidui: abbonamentoUtente?.ingressiResidui ?? '',\n        importo: abbonamentoUtente?.importo ?? '',\n        saldato: (abbonamentoUtente?.importo ?? 0) === (abbonamentoUtente?.importoPagato ?? 0)\n    };\n\n    _logger.debug(`initialValues: ${JSON.stringify(initialValues)}`);\n\n    const { register, handleSubmit, control, reset, setValue, getValues } = useForm({\n        defaultValues: initialValues\n    });\n\n    const [tipologieAbbonamenti, setTipologieAbbonamenti] = useState([]);\n    const [tipologieAbbonamentiLoading, setTipologieAbbonamentiLoading] = useState(true);\n\n    const [tipoAbbonamento, setTipoAbbonamento] = useState(abbonamentoUtente?.tipoAbbonamento ?? -1);\n    const [minDataInizioValidita, setMinDataInizioValidita] = useState(abbonamentoUtente?.dataInizioValidita ?? new Date());\n\n\n    useEffect(() => {\n        //Recuperiamo le Tipologie di Abbonamento previsti\n        async function fetchTipiAbbonamenti(idStruttura) {\n            const data = await StruttureEventiAPI.FetchTipologieAbbonamentiAsync(idStruttura, 1, 50);\n            _logger.debug(`AbbonamentiUtente->useEffect()->fetchTipiAbbonamenti(${idStruttura}) => ${JSON.stringify(data)}`);\n            setTipologieAbbonamenti(data ?? []);\n            setTipologieAbbonamentiLoading(false);\n            initialValues.idTipoAbbonamento = abbonamentoUtente?.tipoAbbonamento?.id ?? '';\n            reset(initialValues);\n        }\n        fetchTipiAbbonamenti(idStruttura);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [idStruttura, idUtente])\n\n    _logger.debug(`abbonamentoUtente: ${JSON.stringify(abbonamentoUtente)}`);\n\n    const submitForm = async (data) => {\n        _logger.debug(`Submitting form: ${JSON.stringify(data)}`)\n        data.id = abbonamentoUtente?.id;\n        data.idCliente = idStruttura;\n        data.userId = idUtente;\n        data.importoPagato = data.saldato ? data.importo : 0;\n        _logger.debug(`Aggiunta Abbonamento Utente - idStruttura:${idStruttura}, idUtente: ${idUtente}`);\n        await StruttureUtentiAPI.AddUpdateAbbonamentoUtenteAsync(idStruttura, idUtente, data);\n        reset();\n        onChangeHandler();\n    }\n\n    const handleTipoAbbonamentChanged = (event) => {\n        const idTipoAbb = event.target.value;\n        let tipoAbbonamento = tipologieAbbonamenti.find(item => item.id === idTipoAbb);\n        if (!tipoAbbonamento) {\n            _logger.warn(`Impossibile trovare il Tipo Abbonamento con Id: ${idTipoAbb}`);\n        }\n        const formDataInizio = getValues('inizioValidita');\n        let localDataInizio = formDataInizio ? (isDate(formDataInizio) ? formDataInizio : parseISO(formDataInizio)) : new Date();\n        setTipoAbbonamento(tipoAbbonamento);\n        if (!formDataInizio) {\n            setValue('inizioValidita', localDataInizio);\n        }\n        setValue('scadenza', add(localDataInizio, { months: tipoAbbonamento.durataMesi }));\n    }\n\n    const renderForm = () => {\n        return (\n            <form onSubmit={handleSubmit(submitForm)} noValidate>\n                <Grid container className={classes.gridContainer}>\n                    <Grid item xs={12} md={5}>\n                        <FormControl className={classes.formControlTipoAbbonamento} required>\n                            <InputLabel>Tipo Abbonamento</InputLabel>\n                            <Controller\n                                as={\n                                    <Select\n                                        onChange={handleTipoAbbonamentChanged}\n                                    >\n                                        {\n                                            tipologieAbbonamenti?.map(t => (<MenuItem key={t.id} value={t.id}>{t.nome}</MenuItem>))\n                                        }\n                                    </Select>\n                                }\n                                control={control}\n                                name=\"idTipoAbbonamento\"\n                                rules={{ required: \"E' necessario selezionare un tipo abbonamento\" }}\n                            />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={12} md={3}>                      \n                        <Controller\n                                render={(props)=>(\n                                        <DatePicker\n                                            inputRef = {props.ref}\n                                            onChange = {props.onChange}\n                                            value = {props.value}\n                                            margin=\"dense\"\n                                            required\n                                            label='Inizio Validità'\n                                            format=\"dd MMMM yyyy\" />\n                                )}\n                                control={control}\n                                name=\"dataInizioValidita\"\n                                rules={{required:\"Inserire una data di Scadenza\"}} \n                        />\n                    </Grid>\n                    <Hidden mdDown>\n                        <Grid item md={1} />\n                    </Hidden>\n                    <Grid item xs={12} md={3}>\n                         <Controller\n                            render={(props)=>(\n                                    <DatePicker\n                                        inputRef = {props.ref}\n                                        onChange = {props.onChange}\n                                        value = {props.value}\n                                        margin=\"dense\"\n                                        required\n                                        label='Scadenza'\n                                        format=\"dd MMMM yyyy\" />\n                            )}\n                            control={control}\n                            name=\"scadenza\"\n                            onChange={([selected]) => selected}\n                            rules={{required:\"Inserire una data di Scadenza\"}} \n                        />\n                    </Grid>\n                    <Grid item xs={12} md={3}>\n                        <TextField name='ingressiIniziali'\n                            required\n                            label='Numero Ingressi'\n                            margin='dense'\n                            type=\"number\"\n                            inputRef={register({required:\"Inserire il numero di ingressi massimo (0 se non c'è un massimo)\"})}\n                        />\n                    </Grid>\n                    <Grid item xs={12} md={3}>\n                        <TextField name='ingressiResidui'\n                            label='Ingressi Residui'\n                            margin='dense'\n                            type=\"number\"\n                            inputRef={register({required:\"Inserire il numero di ingressi residui (0 se non c'è un massimo)\"})}\n                        />\n                    </Grid>\n                    <Grid item xs={12} md={3}>\n                        <TextField name='importo'\n                            label='Prezzo'\n                            margin='dense'\n                            type=\"number\"\n                            inputRef={register({required:\"Inserire il prezzo applicato per l'abbonamento\"})}\n                        />\n                    </Grid>\n                    <Grid item xs={12} md={3}>\n                        <FormControlLabel\n                            className={classes.switchLabel}\n                            margin=\"dense\"\n                            control={\n                                <Switch\n                                    name=\"saldato\"\n                                    color=\"primary\"\n                                    inputRef={register}\n                                    //Il default value non funziona con gli switch, bisogna impostare esplicitamente il defaultChecked\n                                    defaultChecked={initialValues.saldato}\n                                />\n                            }\n                            label=\"Saldato\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} style={{ textAlign: \"center\" }}>\n                        <Box className={classes.gridButtons}>\n                            <Button size=\"small\" variant=\"contained\"\n                                type=\"submit\"\n                                color=\"primary\"\n                                startIcon={<SaveIcon />}\n                                className={classes.btnSalva}>Salva</Button>\n\n                            <Button size=\"small\" variant=\"contained\"\n                                onClick={(e) => { reset(); if (onCancelHandler) { onCancelHandler() } }}\n                                color=\"secondary\"\n                                startIcon={<ClearIcon />}\n                                className={classes.btnAnnulla}>Annulla</Button>\n\n                        </Box>\n                    </Grid>\n                </Grid>\n            </form>\n        )\n    }\n    return (\n        <Box className={classes.root} boxShadow={3}>\n            {tipologieAbbonamentiLoading ? <Skeleton variant=\"text\" height={200} /> : renderForm()}\n        </Box>\n    )\n\n}\n\n\nexport default AbbonamentiUtenteAdd;","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/CertificatoUtenteAdd.js",[],"/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/AbbonamentiUtenteList.js",["543","544","545","546"],"import {\n  Button,\n  makeStyles,\n  Switch,\n  Table,\n  Fab,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  TextField,\n  FormControl,\n  FormControlLabel,\n  Select,\n  InputLabel,\n  MenuItem,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport log from \"loglevel\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport add from \"date-fns/add\";\nimport isDate from \"date-fns/isDate\";\nimport parseISO from \"date-fns/parseISO\";\nimport { StruttureEventiAPI } from \"../../../api/strutture.eventi.api\";\nimport { StruttureUtentiAPI } from \"../../../api/strutture.utenti.api\";\n\nconst _logger = log.getLogger(\"AbbonamentiUtente\");\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: \"600px\",\n    position: \"relative\",\n  },\n  table: {\n    minWidth: 650,\n  },\n  FAB: {\n    backgroundColor: \"#000000\",\n    marginRight: \"10px\",\n  },\n  InsertButton: {\n    backgroundColor: \"grey\",\n    color: \"white\",\n    marginRight: \"10px\",\n  },\n  formControlTipoAbbonamento: {\n    // marginTop: \"16px\",\n    // marginBottom: \"8px\",\n    minWidth: \"180px\",\n    width: \"90%\",\n  },\n  controller: {\n    margin: \"8px 16px\",\n  },\n});\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    borderBottom: \"none\",\n    padding: \"5px\",\n  },\n  body: {\n    borderBottom: \"none\",\n    padding: \"5px\",\n  },\n}))(TableCell);\n\nconst AbbonamentiUtenteList = (props) => {\n  const idStruttura = props.idStruttura;\n  const idUtente = props.idUtente;\n  const abbonamenti = props.abbonamenti;\n  const onChangeHandler = props.onChangeHandler;\n  const editAbbonamentoHandler = props.onEditAbbonamento;\n  const abbonamentoUtente = props.abbonamentoSelezionato;\n  const classes = useStyles();\n\n  _logger.debug(\n    `AbbonamentiUtente -> idStruttura: ${idStruttura}, idUtente: ${idUtente}`\n  );\n\n  _logger.debug(\n    `AbbonamentiUtente -> Abbonamenti: ${JSON.stringify(abbonamenti)}`\n  );\n\n  // const handlePaymentChange = (idAbbonamentoUtente, event) => {\n  //     _logger.debug(`IdAbonamento: ${idAbbonamentoUtente}`);\n  //     _logger.debug(`event: ${event}`);\n  //     let abbonamento = abbonamenti?.find(a=>a.id === idAbbonamentoUtente);\n  //     if(abbonamento){\n  //         _logger.debug(`Aggiornato Importo Pagato per abbonamento: ${abbonamento?.id}`);\n  //         abbonamento.importoPagato = abbonamento.importo;\n  //         if(onChangeHandler){onChangeHandler();}\n  //     }\n  // };\n\n  const handleEditAbbonamento = (event, idAbbUtente) => {\n    if (editAbbonamentoHandler) {\n      editAbbonamentoHandler(idAbbUtente);\n    }\n  };\n\n  // @khoa\n  const initialValues = {\n    idTipoAbbonamento: \"\", //Lo valoriziamo dopo che ritorna la chiamata all'API altrimenti otteniamo un warning perché non sono ancora stati caricati i valori della select\n    dataInizioValidita: abbonamentoUtente?.dataInizioValidita ?? null,\n    scadenza: abbonamentoUtente?.scadenza ?? null,\n    ingressiIniziali: abbonamentoUtente?.ingressiIniziali ?? \"\",\n    ingressiResidui: abbonamentoUtente?.ingressiResidui ?? \"\",\n    importo: abbonamentoUtente?.importo ?? \"\",\n    saldato:\n      (abbonamentoUtente?.importo ?? 0) ===\n      (abbonamentoUtente?.importoPagato ?? 0),\n  };\n\n  const { register, handleSubmit, control, reset, setValue, getValues } =\n    useForm({\n      defaultValues: initialValues,\n    });\n\n  const [tipologieAbbonamenti, setTipologieAbbonamenti] = useState([]);\n  const [tipoAbbonamento, setTipoAbbonamento] = useState(\n    abbonamentoUtente?.tipoAbbonamento ?? -1\n  );\n  const [tipologieAbbonamentiLoading, setTipologieAbbonamentiLoading] =\n    useState(true);\n\n  useEffect(() => {\n    //Recuperiamo le Tipologie di Abbonamento previsti\n    async function fetchTipiAbbonamenti(idStruttura) {\n      const data = await StruttureEventiAPI.FetchTipologieAbbonamentiAsync(\n        idStruttura,\n        1,\n        50\n      );\n      _logger.debug(\n        `AbbonamentiUtente->useEffect()->fetchTipiAbbonamenti(${idStruttura}) => ${JSON.stringify(\n          data\n        )}`\n      );\n      setTipologieAbbonamenti(data ?? []);\n      setTipologieAbbonamentiLoading(false);\n      initialValues.idTipoAbbonamento =\n        abbonamentoUtente?.tipoAbbonamento?.id ?? \"\";\n      reset(initialValues);\n    }\n    fetchTipiAbbonamenti(idStruttura);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [idStruttura, idUtente]);\n\n  const submitForm = async (data) => {\n    _logger.debug(`Submitting form: ${JSON.stringify(data)}`);\n    data.id = abbonamentoUtente?.id;\n    data.idCliente = idStruttura;\n    data.userId = idUtente;\n    data.importoPagato = data.saldato ? data.importo : 0;\n    _logger.debug(\n      `Aggiunta Abbonamento Utente - idStruttura:${idStruttura}, idUtente: ${idUtente}`\n    );\n    await StruttureUtentiAPI.AddUpdateAbbonamentoUtenteAsync(\n      idStruttura,\n      idUtente,\n      data\n    );\n    reset();\n    onChangeHandler();\n  };\n\n  const handleTipoAbbonamentChanged = (event) => {\n    const idTipoAbb = event.target.value;\n    let tipoAbbonamento = tipologieAbbonamenti.find(\n      (item) => item.id === idTipoAbb\n    );\n    if (!tipoAbbonamento) {\n      _logger.warn(\n        `Impossibile trovare il Tipo Abbonamento con Id: ${idTipoAbb}`\n      );\n    }\n    const formDataInizio = getValues(\"inizioValidita\");\n    let localDataInizio = formDataInizio\n      ? isDate(formDataInizio)\n        ? formDataInizio\n        : parseISO(formDataInizio)\n      : new Date();\n    setTipoAbbonamento(tipoAbbonamento);\n    if (!formDataInizio) {\n      setValue(\"inizioValidita\", localDataInizio);\n    }\n    setValue(\n      \"scadenza\",\n      add(localDataInizio, { months: tipoAbbonamento.durataMesi })\n    );\n  };\n\n  // convert date format\n  // @khoa\n  function dateFormat(dateStr) {\n    let date = new Date(dateStr);\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let dt = date.getDate();\n\n    if (dt < 10) {\n      dt = \"0\" + dt;\n    }\n    if (month < 10) {\n      month = \"0\" + month;\n    }\n\n    return dt + \"/\" + month + \"/\" + year;\n  }\n\n  function renderNoData() {\n    return (\n      <Typography variant=\"h6\">Nessun Abbonamento per l'utente</Typography>\n    );\n  }\n\n  function renderTable() {\n    return (\n      <form onSubmit={handleSubmit(submitForm)} noValidate>\n        <TableContainer>\n          <Table className={classes.table} aria-label=\"Abbonamenti\">\n            <TableHead>\n              <TableRow>\n                <StyledTableCell>Tipo Abbonamento</StyledTableCell>\n                <StyledTableCell align=\"center\">Data Inizio</StyledTableCell>\n                <StyledTableCell align=\"center\">Data Fine</StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  Ingressi residui/totali\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">Saldato</StyledTableCell>\n                <StyledTableCell align=\"center\">Impostazioni</StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {abbonamenti?.map((a) => (\n                <TableRow key={a.id}>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {a.tipoAbbonamento?.nome}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {dateFormat(a.dataInizioValidita)}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {dateFormat(a?.scadenza)}\n                  </StyledTableCell>\n                  {/* <TableCell align=\"center\">{a.ingressiResidui ?? a.ingressiIniziali} di {a.ingressiIniziali}</TableCell> */}\n                  <StyledTableCell align=\"center\">\n                    {a.ingressiResidui ?? a.ingressiIniziali} Ingressi\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {/* <Switch checked={(a.importo ?? 0) === (a.importoPagato ?? 0)} color=\"default\" onChange={(e)=>{handlePaymentChange(a.id, e);}} /> */}\n                    {(a.importo ?? 0) === (a.importoPagato ?? 0) ? \"SI\" : \"NO\"}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    {/* <Button startIcon={<EditIcon />} size=\"small\" variant=\"outlined\" onClick={(e)=>{handleEditAbbonamento(e, a.id)}} >\n                                        Edit\n                                    </Button> */}\n                    <Fab\n                      size=\"small\"\n                      variant=\"round\"\n                      className={classes.FAB}\n                      onClick={(e) => {\n                        handleEditAbbonamento(e, a.id);\n                      }}\n                    >\n                      <MenuIcon style={{ color: \"white\" }} />\n                    </Fab>\n                  </StyledTableCell>\n                </TableRow>\n              ))}\n              {/* for INSERISCI @khoa */}\n              <TableRow>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  <FormControl\n                    className={classes.formControlTipoAbbonamento}\n                    required\n                  >\n                    <InputLabel>Tipo Abbonamento</InputLabel>\n                    <Controller\n                      as={\n                        <Select onChange={handleTipoAbbonamentChanged}>\n                          {tipologieAbbonamenti?.map((t) => (\n                            <MenuItem key={t.id} value={t.id}>\n                              {t.nome}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      }\n                      control={control}\n                      name=\"idTipoAbbonamento\"\n                      rules={{\n                        required:\n                          \"E' necessario selezionare un tipo abbonamento\",\n                      }}\n                    />\n                  </FormControl>\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  <Controller\n                    render={(props) => (\n                      <DatePicker\n                        className={classes.controller}\n                        inputRef={props.ref}\n                        onChange={props.onChange}\n                        value={props.value}\n                        margin=\"dense\"\n                        required\n                        label=\"Inizio Validità\"\n                        format=\"dd MMMM yyyy\"\n                      />\n                    )}\n                    control={control}\n                    name=\"dataInizioValidita\"\n                    rules={{ required: \"Inserire una data di Scadenza\" }}\n                  />\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  <Controller\n                    render={(props) => (\n                      <DatePicker\n                        className={classes.controller}\n                        inputRef={props.ref}\n                        onChange={props.onChange}\n                        value={props.value}\n                        margin=\"dense\"\n                        required\n                        label=\"Scadenza\"\n                        format=\"dd MMMM yyyy\"\n                      />\n                    )}\n                    control={control}\n                    name=\"scadenza\"\n                    onChange={([selected]) => selected}\n                    rules={{ required: \"Inserire una data di Scadenza\" }}\n                  />\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  <TextField\n                    className={classes.controller}\n                    required\n                    name=\"ingressiIniziali\"\n                    label=\"Numero Ingressi\"\n                    margin=\"dense\"\n                    type=\"number\"\n                    inputRef={register({\n                      required:\n                        \"Inserire il numero di ingressi massimo (0 se non c'è un massimo)\",\n                    })}\n                  />\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  <FormControlLabel\n                    className={classes.switchLabel}\n                    margin=\"dense\"\n                    control={\n                      <Switch\n                        name=\"saldato\"\n                        color=\"default\"\n                        inputRef={register}\n                        //Il default value non funziona con gli switch, bisogna impostare esplicitamente il defaultChecked\n                        defaultChecked={initialValues.saldato}\n                      />\n                    }\n                  />\n                </StyledTableCell>\n                <StyledTableCell align=\"right\">\n                  <Button\n                    size=\"small\"\n                    type=\"submit\"\n                    className={classes.InsertButton}\n                  >\n                    INSERISCI\n                  </Button>\n                </StyledTableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </form>\n    );\n  }\n\n  return (\n    <Fragment>\n      {/* {abbonamenti && abbonamenti.length > 0 ? renderTable() : renderNoData()} */}\n      {renderTable()}\n    </Fragment>\n  );\n};\n\nexport default AbbonamentiUtenteList;\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/CertificatiUtenteList.js",["547","548","549","550","551","552","553","554","555","556"],"import {\n    Button, makeStyles, Switch, Table, Fab, FormControl, InputLabel, Select,\n    TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, MenuItem\n} from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { DatePicker } from '@material-ui/pickers';\nimport log from 'loglevel';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport add from \"date-fns/add\";\nimport isDate from \"date-fns/isDate\";\nimport parseISO from \"date-fns/parseISO\";\nimport { StruttureEventiAPI } from \"../../../api/strutture.eventi.api\";\nimport { StruttureUtentiAPI } from \"../../../api/strutture.utenti.api\";\n\nconst _logger = log.getLogger('CertificatiUtente');\n\nconst useStyles = makeStyles({\n    root: {\n        minHeight: \"600px\",\n        position: \"relative\"\n    },\n    table: {\n        minWidth: 650,\n    },\n    FAB: {\n        backgroundColor: \"#000000\",\n        marginRight: '10px'\n        \n    },\n    InsertButton: {\n        backgroundColor: 'grey',\n        color: 'white',\n        marginRight: '10px'\n    },\n    formControlTipoCert: {\n        minWidth: \"180px\",\n        width: \"90%\"\n    },\n    controller: {\n        margin: '8px 16px'\n    }\n});\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        borderBottom: \"none\",\n        padding: '5px'\n    },\n    body: {\n      borderBottom: \"none\",\n      padding: '5px'\n    },\n  }))(TableCell);\n  \nconst CertificatiUtenteList = (props) => {\n    const idStruttura = props.idStruttura;\n    const idUtente = props.idUtente;\n    const certificati = props.certificati;\n    const onChangeHandler = props.onChangeHandler;\n    const onEditHandler = props.onEditHandler;\n    const certificatoUtente = props.certificatoUtente ?? {};\n    const classes = useStyles();\n\n    _logger.debug(`CertificatiUtenteList -> idStruttura: ${idStruttura}, idUtente: ${idUtente}, Certificati: ${JSON.stringify(certificati)}`);\n\n    const initialValues = {\n        dataPresentazione: certificatoUtente?.dataPresentazione ?? null,\n        dataScadenza: certificatoUtente?.dataScadenza ?? null,\n        note: certificatoUtente?.note\n    };\n    \n    const { handleSubmit, control, reset, register, setValue, getValues } = useForm({\n        defaultValues: initialValues\n    });\n\n    const [tipologieCert, setTipologieCert] = useState([]);\n    const [tipoCert, setTipoCert] = useState(\n        certificatoUtente?.tipoCert ?? -1\n      );\n      const [tipologieCertLoading, setTipologieCertLoading] =\n        useState(true);\n    \n    //   useEffect(() => {\n    //     //Recuperiamo le Tipologie di Abbonamento previsti\n    //     async function fetchTipiCert(idStruttura) {\n    //       const data = await StruttureEventiAPI.FetchTipologieCertAsync(\n    //         idStruttura,\n    //         1,\n    //         50\n    //       );\n    //       _logger.debug(\n    //         `CertUtente->useEffect()->fetchTipiCert(${idStruttura}) => ${JSON.stringify(\n    //           data\n    //         )}`\n    //       );\n    //       setTipologieCert(data ?? []);\n    //       setTipologieCertLoading(false);\n    //       initialValues.idTipoAbbonamento =certificatoUtente?.tipoCert?.id ?? \"\";\n    //       reset(initialValues);\n    //     }\n    //     fetchTipiCert(idStruttura);\n    //     // eslint-disable-next-line react-hooks/exhaustive-deps\n    //   }, [idStruttura, idUtente]);\n\n    const handleEditCertificato = (event, idCertUtente) => {\n        if(onEditHandler){onEditHandler(idCertUtente);}\n    }\n  \n    const submitForm = async (data) => {\n        _logger.debug(`Submitting form: ${JSON.stringify(data)}`)\n        data.id = certificatoUtente?.id;\n        data.idCliente = idStruttura;\n        data.userId = idUtente;\n        _logger.debug(`Aggiunta Certificato Utente - idStruttura:${idStruttura}, idUtente: ${idUtente}, Certificato: ${JSON.stringify(data)}`);\n        await StruttureUtentiAPI.AddUpdateCertificatoUtenteAsync(idStruttura, idUtente, data);\n        reset();\n        if (onChangeHandler) { onChangeHandler() };\n    }\n\n    const handleTipoCertChanged = (event) => {\n        const idTipoCert = event.target.value;\n        let tipoCert = tipologieCert.find(item => item.id === idTipoCert);\n        if (!tipoCert) {\n            _logger.warn(`Impossibile trovare il Tipo Cert con Id: ${idTipoCert}`);\n        }\n        const formDataInizio = getValues('inizioValidita');\n        let localDataInizio = formDataInizio ? (isDate(formDataInizio) ? formDataInizio : parseISO(formDataInizio)) : new Date();\n        setTipoCert(tipoCert);\n        if (!formDataInizio) {\n            setValue('inizioValidita', localDataInizio);\n        }\n        setValue('scadenza', add(localDataInizio, { months: tipoCert.durataMesi }));\n    }\n    \n        // convert date format\n    // @khoa\n    function dateFormat(dateStr) {\n        let date = new Date(dateStr)\n\n        let year = date.getFullYear();\n        let month = date.getMonth()+1;\n        let dt = date.getDate();\n\n        if (dt < 10) {\n        dt = '0' + dt;\n        }\n        if (month < 10) {\n        month = '0' + month;\n        }\n        if(!dt || !month || !year) return '';\n        return dt+'/'+month+'/'+year;\n    }  \n\n    function renderNoData() {\n        return (\n            <Typography variant=\"h6\">Nessun Certificato per l'utente</Typography>\n        )\n    }\n\n    function renderTable() {\n        return (\n            <form onSubmit={handleSubmit(submitForm)} noValidate>\n            <TableContainer>\n                <Table className={classes.table} aria-label=\"Certificati\">\n                    <TableHead>\n                        <TableRow>\n                            <StyledTableCell align=\"left\">Tipo di certificato</StyledTableCell>\n                            <StyledTableCell align=\"center\">Data Inizio</StyledTableCell>\n                            <StyledTableCell align=\"center\">Data Presentazione</StyledTableCell>\n                            <StyledTableCell align=\"center\">Data Scadenza</StyledTableCell>\n                            {/* <StyledTableCell align=\"left\">Note</StyledTableCell> */}\n                            <StyledTableCell align=\"center\">Impostazioni</StyledTableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {certificati?.map(c => (\n                            <TableRow key={c.id}>\n                                <StyledTableCell component=\"th\" scope=\"row\">{c.tipoCert?.nome}</StyledTableCell>\n                                <StyledTableCell align=\"center\">{dateFormat(c?.inzio)}</StyledTableCell>\n                                <StyledTableCell align=\"center\">{dateFormat(c.dataPresentazione)}</StyledTableCell>\n                                <StyledTableCell align=\"center\">{dateFormat(c.dataScadenza)}</StyledTableCell>\n                                {/* <StyledTableCell align=\"center\">{c.note}</StyledTableCell> */}\n                                <StyledTableCell align=\"right\">\n                                    {/* <Button startIcon={<EditIcon />} size=\"small\" variant=\"outlined\" onClick={(event)=>{handleEditCertificato(event, c.id)}} >\n                                        Edit\n                                    </Button> */}\n                                    <Fab size=\"small\" variant=\"round\"\n                                    className={classes.FAB}\n                                    onClick={(e)=>{handleEditCertificato(e, c.id)}}>\n                                    <MenuIcon style={{ color: \"white\" }} />\n                                    </Fab>\n                                </StyledTableCell>\n                            </TableRow>\n                        ))}\n                        {/* for INSERISCI, @khoa */}\n                        <TableRow>\n                            <StyledTableCell component=\"th\" scope=\"row\">\n                                <FormControl className={classes.formControlTipoCert} >\n                                    <InputLabel>Tipo di certificato</InputLabel>\n                                    <Controller\n                                        as={\n                                            <Select\n                                                onChange={handleTipoCertChanged}\n                                            >\n                                                {\n                                                    tipologieCert?.map(t => (<MenuItem key={t.id} value={t.id}>{t.nome}</MenuItem>))\n                                                }\n                                            </Select>\n                                        }\n                                        control={control}\n                                        name=\"idTipoCert\"\n                                        rules={{ required: \"E' necessario selezionare un tipo cert\" }}\n                                    />\n                                </FormControl>\n                            </StyledTableCell>\n                            <StyledTableCell align=\"center\">\n                                <Controller\n                                    render={(props)=>(\n                                        <DatePicker className={classes.controller}\n                                            inputRef = {props.ref}\n                                            onChange = {props.onChange}\n                                            value = {props.value}\n                                            margin=\"dense\"\n                                            label='Data Inizio'\n                                            format=\"dd MMMM yyyy\" />\n                                    )}\n                                    control={control}\n                                    name=\"dataInizio\"\n                                    rules={{ required: \"Inserire una data di Inizio\" }}\n                                />\n                            </StyledTableCell>\n                            <StyledTableCell align=\"center\">\n                                <Controller\n                                    render={(props)=>(\n                                        <DatePicker className={classes.controller}\n                                            inputRef = {props.ref}\n                                            onChange = {props.onChange}\n                                            value = {props.value}\n                                            margin=\"dense\"\n                                            required\n                                            label='Data Presentazione'\n                                            format=\"dd MMMM yyyy\" />\n                                    )}\n                                    control={control}\n                                    name=\"dataPresentazione\"\n                                    rules={{ required: \"Inserire la data di Presentazione\" }}\n                                />\n                            </StyledTableCell>\n                            <StyledTableCell align=\"center\">\n                                <Controller\n                                    render={(props)=>(\n                                        <DatePicker className={classes.controller}\n                                            inputRef = {props.ref}\n                                            onChange = {props.onChange}\n                                            value = {props.value}\n                                            margin=\"dense\"\n                                            required\n                                            label='Data Scadenza'\n                                            format=\"dd MMMM yyyy\" />\n                                    )}\n                                    control={control}\n                                    name=\"dataScadenza\"\n                                    rules={{ required: \"Inserire una data di Scadenza\" }}\n                                />\n                            </StyledTableCell>\n                            <StyledTableCell align=\"right\">\n                                <Button size=\"small\" className={classes.InsertButton} type=\"submit\" >\n                                INSERISCI\n                                </Button>\n                            </StyledTableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            </form>\n        )\n    }\n       \n\n    return (\n        <Fragment>\n         {/* {certificati && certificati.length > 0 ?renderTable() : renderNoData()} */}\n         {renderTable()}\n         </Fragment>\n    )    \n\n}\n\nexport default CertificatiUtenteList;","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/dettaglio-utente/PrenotazioneUtenteAdd.js",["557","558","559","560","561","562","563","564","565","566","567","568","569","570"],"import {\n  Box,\n  Button,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  Hidden,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport add from \"date-fns/add\";\nimport isDate from \"date-fns/isDate\";\nimport parseISO from \"date-fns/parseISO\";\nimport format from \"date-fns/format\";\nimport isFuture from \"date-fns/isFuture\";\nimport log from \"loglevel\";\nimport React, { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { StruttureEventiAPI } from \"../../../api/strutture.eventi.api\";\nimport { StruttureUtentiAPI } from \"../../../api/strutture.utenti.api\";\n\nconst _logger = log.getLogger(\"PrenotazioneUtenteAdd\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: \"35px\",\n    paddingTop: \"15px\",\n    paddingBottom: \"15px\",\n  },\n  container: {\n    paddingTop: 15,\n  },\n  gridContainer: {\n    paddingLeft: 10,\n  },\n  formControlTipolezione: {\n    // marginTop: \"16px\",\n    // marginBottom: \"8px\",\n    minWidth: \"180px\",\n    width: \"90%\",\n  },\n  switchLabel: {\n    paddingTop: 10,\n  },\n  gridButtons: {\n    paddingTop: \"20px\",\n  },\n  btnSalva: {\n    margin: \"20px\",\n  },\n  btnAnnulla: {\n    margin: \"20px\",\n  },\n}));\n/***\n * Componente per l'aggiunta di una preonotazione per conto di un utente\n */\nconst PrenotazioneUtenteAdd = (props) => {\n  const classes = useStyles();\n  const idStruttura = props.idStruttura;\n  const idUtente = props.idUtente;\n  const prenotazioneUtente = props.prenotazioneUtente ?? {};\n  const abbonamenti = props.abbonamenti ?? [];\n  const onChangeHandler = props.onChangeHandler;\n  const onCancelHandler = props.onCancelHandler;\n  //const idTipoLezioneSelezionata = -1;\n\n  const initialValues = {\n    idTipoLezioneSelezionata: \"\", \n    giornoAppuntamento: \"\",\n    oraAppuntamento: \"\",\n    location: \"\",\n    abbonamentoUtente: \"\"\n  };\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    reset,\n    setValue,\n    getValues,\n  } = useForm({\n    defaultValues: initialValues,\n  });\n\n\n  const [tipologieLezioni, setTipologieLezioni] = useState([]);\n  const [tipologieLezioniLoading, setTipologieLezioniLoading] = useState(true);\n\n  const [eventi, setEventi] = useState([]);\n  const [eventiLoading, setEventiLoading] = useState(true);\n\n  const [idTipoLezioneSelezionata, setIdTipoLezione] = useState(\"\");\n  const [giornoAppuntamento,setGiornoAppuntamento] = useState(\"\");\n  const [oraAppuntamento, setOraAppuntamento] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [abbonamentoUtente, setAbbonamentoUtente] = useState(\"\");\n\n  useEffect(() => {\n    //Recuperiamo le Tipologie di Lezioni gestite dalla struttura\n    async function fetchTipologieLezioni(idStruttura) {\n      const data = await StruttureEventiAPI.FetchTipologieLezioniAsync(\n        idStruttura,\n        1,\n        500\n      );\n      _logger.debug(\n        `PrenotazioneUtenteAdd->useEffect()->FetchTipologieLezioniAsync(${idStruttura}) => ${JSON.stringify(\n          data\n        )}`\n      );\n      setTipologieLezioni(data ?? []);\n      setTipologieLezioniLoading(false);\n      setInitialValues();\n      reset(initialValues);\n    }\n    fetchTipologieLezioni(idStruttura);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [idStruttura, idUtente]);\n\n  useEffect(() => {\n    async function fetchLezioni(idStruttura, idTipoLezione) {\n      const data = await StruttureEventiAPI.FetchEventiAsync(\n        idStruttura,\n        null,\n        new Date(),\n        add(new Date(), { months: 1 }),\n        idTipoLezione,\n        false,\n        false,\n        1,\n        1000\n      );\n      _logger.debug(\n        `PrenotazioneUtenteAdd->useEffect()->fetchLezioni(${idStruttura}, ${idTipoLezione}) => ${JSON.stringify(\n          data\n        )}`\n      );\n      setEventi(data ?? []);\n      setEventiLoading(false);\n    }\n    if (idTipoLezioneSelezionata) {\n      fetchLezioni(idStruttura, idTipoLezioneSelezionata);\n    }\n  }, [idStruttura, idTipoLezioneSelezionata]);\n\n  const setInitialValues = ()=> {\n    _logger.debug(`setInitialValues - PRENOTAZIONE: ${JSON.stringify(prenotazioneUtente)}`);\n    if(prenotazioneUtente){\n\n      initialValues.idTipoLezioneSelezionata =  prenotazioneUtente.idTipoLezione ?? \"\";\n      initialValues.giornoAppuntamento = prenotazioneUtente.dataOraInizio?.substring(0,10) ?? \"\" ;\n      initialValues.oraAppuntamento = prenotazioneUtente.dataOraInizio?.substring(11,5) ?? \"\";\n      initialValues.location = prenotazioneUtente.idLocation ?? \"\";\n      initialValues.abbonamentoUtente = prenotazioneUtente. idAbbonamento ?? \"\";\n    }\n  }\n\n  const submitForm = async (data) => {\n    _logger.debug(`Submitting form: ${JSON.stringify(data)}`);\n    // data.id = abbonamentoUtente?.id;\n    // data.idCliente = idStruttura;\n    // data.userId = idUtente;\n    // data.importoPagato = data.saldato ? data.importo : 0;\n    // _logger.debug(`Aggiunta Abbonamento Utente - idStruttura:${idStruttura}, idUtente: ${idUtente}`);\n    // await StruttureUtentiAPI.AddUpdateAbbonamentoUtenteAsync(idStruttura, idUtente, data);\n    let eventoGiorno = eventi.filter((value, index, self)=> ((value.dataOraInizio.substring(0,16) === (giornoAppuntamento + 'T' + oraAppuntamento)) && (value?.location?.id )));\n    let idEvento = eventoGiorno[0].id;\n    let appuntamento = {\n      user : idUtente,\n      idAbbonamento : abbonamentoUtente,\n      evento : idEvento,\n      note : 'Appuntamento preso da BE'\n    }\n    await StruttureEventiAPI.PrenotaEventoAsync(idStruttura, idEvento, appuntamento)\n     reset();\n     onChangeHandler();\n  };\n\n  const renderDateEventi = () =>{\n    if(eventi && eventi.length){\n    //ATTENZIONE! Assumiamo chge la data sia in formato ISO e facciamo direttamente il substring senza parsarla\n    _logger.debug(`renderDateEventi - EVENTI : ${JSON.stringify(eventi)}`);\n    let date = eventi.filter((value, index, self) =>\n                              self.map(x => x.dataOraInizio.substring(0,10))\n                              .indexOf(value.dataOraInizio.substring(0,10)) == index);\n      return date.map((d) => (<MenuItem key={d.dataOraInizio.substring(0,10)} value={d.dataOraInizio.substring(0,10)}>{d.dataOraInizio.substring(0,10)}</MenuItem>));\n    }\n  }\n\n  const renderOraEventi = () =>{\n    //ATTENZIONE! Assumiamo chge la data sia in formato ISO e facciamo direttamente il substring senza parsarla\n    if(eventi && eventi.length && giornoAppuntamento){\n      let eventiGiorno = eventi.filter((value, index, self)=>value.dataOraInizio.substring(0,10) === giornoAppuntamento); //Consideriamo solo gli eventi del giorno selezionato\n      let orari= eventiGiorno.filter((value, index, self) =>\n                              self.map(x => format(parseISO(x.dataOraInizio),'HH:mm'))\n                                .indexOf(format(parseISO(value.dataOraInizio),'HH:mm')) == index);\n      return orari.map((d) => (<MenuItem key={format(parseISO(d.dataOraInizio),'HH:mm')} value={format(parseISO(d.dataOraInizio),'HH:mm')}>{format(parseISO(d.dataOraInizio),'HH:mm')}</MenuItem>));\n    }\n  }\n\n  const renderLocations = () =>{\n    if(eventi && eventi.length && giornoAppuntamento){\n      let eventiGiorno = eventi.filter((value, index, self)=>value.dataOraInizio.substring(0,10) === giornoAppuntamento); //Consideriamo solo gli eventi del giorno selezionato\n      let eventiOra = eventiGiorno.filter((value, index, self) => format(parseISO(value.dataOraInizio),'HH:mm') === oraAppuntamento);\n      let locations = eventiOra.filter((value, index, self) => \n                                        self.map(x => x.location?.id)\n                                        .indexOf(value.location?.id) === index);\n      return locations.map((d) => (<MenuItem key={d.location?.id} value={d.location?.id}>{d.location?.nome}</MenuItem>));\n    }\n  }\n\n  const renderAbbonamenti = ()=>{\n    return abbonamenti\n                ?.filter((value, index, self) => isFuture(parseISO(value.scadenza)))\n                ?.map((t) => (<MenuItem key={t.id} value={t.id}>{t.tipoAbbonamento?.nome}</MenuItem>))\n  }\n  \n  const handleTipoLezioneChanged = (idTipoLezione) => {\n    _logger.debug(`handleTipoLezioneChanged form: ${JSON.stringify(idTipoLezione)}`);\n    setIdTipoLezione(idTipoLezione);\n    setGiornoAppuntamento(''); //reset giorno\n    setOraAppuntamento('');\n    setLocation('');\n  };\n\nconst handleGiornoAppuntamentoChanged = (newDate)=>{\n  _logger.debug(`handleGiornoAppuntamentoChanged - newdate: ${JSON.stringify(newDate)}`);\n  setGiornoAppuntamento(newDate);\n}\n\nconst handleOraAppuntamentoChanged = (newTime)=>{\n  _logger.debug(`handleOraAppuntamentoChanged - newTime: ${JSON.stringify(newTime)}`);\n  setOraAppuntamento(newTime);\n}\n\nconst handleLocationChanged = (location)=>{\n  _logger.debug(`handleLocationChanged - location: ${JSON.stringify(location)}`);\n  setLocation(location);\n}\n\n  const renderForm = () => {\n    return (\n      <form onSubmit={handleSubmit(submitForm)} noValidate>\n        <Grid container className={classes.gridContainer}>\n          <Grid item xs={12} md={5}>\n            {/* TIPO LEZIONE */}\n            <FormControl className={classes.formControlTipolezione} required>\n              <InputLabel>Tipo Lezione</InputLabel>              \n              <Controller\n                render={({ onChange, onBlur, value, name, ref }) => (\n                  <Select\n                    onChange={(e) => {\n                      const newValue = e.target.value;\n                      handleTipoLezioneChanged(newValue);                      \n                      onChange(newValue);\n                    }}\n                    inputRef={ref}\n                    value={idTipoLezioneSelezionata}\n                  >\n                    {tipologieLezioni?.map((t) => (\n                      <MenuItem key={t.id} value={t.id}>\n                        {t.nome}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                )}\n                control={control}\n                name=\"idTipoLezioneSelezionata\"\n                rules={{\n                  required: \"E' necessario selezionare la tipologia di lezione\",\n                }}\n              />\n            </FormControl>\n          </Grid>\n          {/* DATA LEZIONE (DROPDOWN) */}\n          <Grid item xs={12} md={3}>\n            <FormControl className={classes.formControlTipolezione} required disabled={!(idTipoLezioneSelezionata)}>\n              <InputLabel>Giorno</InputLabel>              \n              <Controller\n                render={({ onChange, onBlur, value, name, ref }) => (\n                  <Select\n                    onChange={(e) => {\n                      const newValue = e.target.value;\n                      handleGiornoAppuntamentoChanged(newValue);\n                      onChange(newValue);\n                    }}\n                    inputRef={ref}\n                    value={giornoAppuntamento}\n                  >\n                    {renderDateEventi()}\n                    {/* ))} */}\n                  </Select>\n                )}\n                control={control}\n                value={giornoAppuntamento}\n                name=\"giornoAppuntamento\"\n                rules={{\n                  required: \"Selezionare il giorno\",\n                }}\n              />\n            </FormControl>\n          </Grid>\n          <Hidden mdDown>\n            <Grid item md={1} />\n          </Hidden>\n          {/* ORA LEZIONE (DROPDOWN) */}\n          <Grid item xs={12} md={3}>\n            <FormControl className={classes.formControlTipolezione} required disabled={!(giornoAppuntamento)}>\n              <InputLabel>Ora</InputLabel>              \n              <Controller\n                render={({ onChange, onBlur, value, name, ref }) => (\n                  <Select\n                    onChange={(e) => {\n                      const newValue = e.target.value;\n                      handleOraAppuntamentoChanged(newValue);\n                      onChange(newValue);\n                    }}\n                    inputRef={ref}\n                    value={oraAppuntamento}\n                  >\n                    {renderOraEventi()}\n                    {/* ))} */}\n                  </Select>\n                )}\n                control={control}\n                value={oraAppuntamento}\n                name=\"oraAppuntamento\"\n                rules={{\n                  required: \"Selezionare l'ora\",\n                }}\n              />\n            </FormControl>\n          </Grid>\n          {/* LOCATION */}\n          <Grid item xs={12} md={3}>\n            <FormControl className={classes.formControlTipolezione} required disabled={!(giornoAppuntamento) || !(oraAppuntamento)}>\n              <InputLabel>Sala</InputLabel>              \n              <Controller\n                render={({ onChange, onBlur, value, name, ref }) => (\n                  <Select\n                    onChange={(e) => {\n                      const newValue = e.target.value;\n                      handleLocationChanged(newValue);\n                      onChange(newValue);\n                    }}\n                    inputRef={ref}\n                    value={location}\n                  >\n                    {renderLocations()}\n                    {/* ))} */}\n                  </Select>\n                )}\n                control={control}\n                value={location}\n                name=\"location\"\n                rules={{\n                  required: \"Selezionare la sala\",\n                }}\n              />\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} md={5}>\n            {/* ABBONAMENTO UTENE */}\n            <FormControl className={classes.formControlTipolezione} required>\n              <InputLabel>Abbonamento</InputLabel>              \n              <Controller\n                render={({ onChange, onBlur, value, name, ref }) => (\n                  <Select\n                    onChange={(e) => {\n                      const newValue = e.target.value;\n                      setAbbonamentoUtente(newValue);\n                      onChange(newValue);\n                    }}\n                    inputRef={ref}\n                    value={abbonamentoUtente}\n                  >\n                    {renderAbbonamenti()}\n                  </Select>\n                )}\n                control={control}\n                name=\"abbonamentoUtente\"\n                rules={{\n                  required: \"E' necessario selezionare un'abbonamento\",\n                }}\n              />\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} style={{ textAlign: \"center\" }}>\n            <Box className={classes.gridButtons}>\n              <Button\n                size=\"small\"\n                variant=\"contained\"\n                type=\"submit\"\n                color=\"primary\"\n                startIcon={<SaveIcon />}\n                className={classes.btnSalva}\n              >\n                Salva\n              </Button>\n\n              <Button\n                size=\"small\"\n                variant=\"contained\"\n                onClick={(e) => {\n                  reset();\n                  if (onCancelHandler) {\n                    onCancelHandler();\n                  }\n                }}\n                color=\"secondary\"\n                startIcon={<ClearIcon />}\n                className={classes.btnAnnulla}\n              >\n                Annulla\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </form>\n    );\n  };\n\n  return (\n    <Box className={classes.root} boxShadow={3}>\n      {tipologieLezioniLoading ? (\n        <Skeleton variant=\"text\" height={200} />\n      ) : (\n        renderForm()\n      )}\n    </Box>\n  );\n};\n\nexport default PrenotazioneUtenteAdd;\n","/home/khoa/devjin/fe-react/src/ClientApp/src/components/struttura/StrutturaCalendarView.js",["571","572"],"import * as log from 'loglevel';\nimport React, { useEffect, useState, Fragment } from 'react'\nimport FullCalendar from '@fullcalendar/react'\nimport itLocale from '@fullcalendar/core/locales/it'\nimport dayGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction';\nimport {\n    format as dfnsFormat, isToday as dfnsIsToday,\n    startOfWeek as dfnsStartOfWeek, endOfWeek as dfnsEndOfWeek,\n    isSameDay as dfnsIsSameDay, isFuture as dfnsIsFuture,\n    addMinutes as dfnsAddMinutes, parseISO as dfnsParseISO\n} from 'date-fns'\nimport dfnsITLocale from 'date-fns/locale/it'\n// import '@fullcalendar/core/main.css'\n// import '@fullcalendar/timegrid/main.css'\nimport './StrutturaCalendar.css'\nimport { useHistory } from \"react-router-dom\";\nimport { StruttureEventiAPI } from '../../api/strutture.eventi.api';\n\nconst _logger = log.getLogger(\"StrutturaCalendarView\");\n\n\nexport default (props) => {\n    const idStruttura = props.idStruttura ?? -1;\n    const idLocation = props.idLocation ?? -1;\n    const urlRoute = props.urlRoute;\n    const history = useHistory();\n    const [periodo, setPeriodo] = useState(props.periodo ??\n    {\n        startDate: dfnsStartOfWeek(new Date(), { weekStartsOn: 1 }),\n        endDate: dfnsEndOfWeek(new Date(), { weekStartsOn: 1 })\n    });\n\n    const [eventi, setEventi] = useState([]);\n    const DEFAULT_EVENT_COLOR = '#'\n\n    useEffect(() => {\n        _logger.debug(`StrutturaCalendarView->useEffect(idStruttura: ${idStruttura}, idLocation: ${idLocation}), periodo: ${JSON.stringify(periodo)}`);\n        async function fetchData(periodo) {\n            _logger.debug(\"StrutturaCalendarView->fetchData()\");\n            const data = await StruttureEventiAPI.FetchEventiAsync(idStruttura, idLocation, periodo.startDate, periodo.endDate);\n            //Convertiamo gli Schedules in oggetti gestibili dal calendario\n            if (data && data.length > 0) {\n                let ev = data.map((value, index) => {\n                    const r = {\n                        id: value.id,\n                        start: value.dataOraInizio,\n                        end: dfnsAddMinutes(dfnsParseISO(value.dataOraInizio), value.durata),\n                        title: value.title,\n                        allDay: false\n                    }\n                    _logger.debug(`Evento [${value.id}]: ${JSON.stringify(r)} \\r\\n value:${JSON.stringify(value)}`);\n                    return r;\n                });\n                setEventi(ev);\n            } else {\n                setEventi([])\n            };\n        }\n        if (idStruttura && idStruttura > 0 && idLocation && idLocation > 0) {\n            fetchData(periodo);\n        }\n    }, [idStruttura, idLocation, periodo]);\n\n    const columnHeaderHtml = (date) => {\n        //_logger.debug(`StrutturaCalendarAdmin->columnHeaderHtml(${date}) - ${typeof date}- ${date instanceof Date}`);\n        var result = \"<div class='rd2-cal-header-dayname'>\" + dfnsFormat(date, \"eee\", { locale: dfnsITLocale }).toUpperCase() + \"</div><div class='rd2-cal-header-daynum\"\n        //Per il giorno corrente applichiamo una classe speciale\n        if (dfnsIsToday(date)) {\n            result += \" rd2-cal-header-daynum-current\"\n        }\n        result += \"'>\" + dfnsFormat(date, 'd') + \"</div>\";\n        return {html: result}  ;\n    }\n\n    const handleDataChange = (info) => {\n        _logger.debug(`StrutturaCalendarView->handleDataChange(${info.view.currentStart} - ${info.view.currentEnd})`);\n        if (!info || !info.view) return;\n        const newPeriodo = {\n            startDate: info.view.currentStart,\n            endDate: info.view.currentEnd\n        }\n        if (!dfnsIsSameDay(periodo.startDate, newPeriodo.startDate)) {\n            _logger.debug(`StrutturaCalendarView->handleDataChange->setPeriodo(${JSON.stringify(newPeriodo)})`);\n            setPeriodo(newPeriodo);\n        }\n    }\n\n    const handleDateClick = (dateClickInfo) => {\n        _logger.debug(`StrutturaCalendarView->handleDateClick()`);\n        const url = `/${urlRoute}/eventi/new?date=${dateClickInfo.dateStr}&allDay=${dateClickInfo.allDay}&lid=${idLocation}`;\n        _logger.debug(`StrutturaCalendarView->handleDateClick() -> Redirect to: ${url}`);\n        if (dfnsIsFuture(dateClickInfo.date)) {\n            //Redirect alla pagina di nuovo evento\n            history.push(url);\n        }\n    }\n\n    const handleEventClick = (eventClickInfo) => {\n        _logger.debug(`StrutturaCalendarView->handleEventClick()`);\n        const url = `/${urlRoute}/eventi/${eventClickInfo.event.id}`;\n        _logger.debug(`StrutturaCalendarView->handleDateClick() -> Redirect to: ${url}`);\n        //Redirect alla pagina di edit evento\n        history.push(url);\n    }\n\n    return (\n        <Fragment>\n            <FullCalendar\n                initialView=\"timeGridWeek\"\n                initialDate={periodo.startDate}\n                plugins={[dayGridPlugin, interactionPlugin]}\n                headerToolbar={{\n                    left: 'today',\n                    center: 'title',\n                    right: 'prev,next'\n                }}\n                locale={itLocale}\n                weekends={true}\n                slotDuration=\"01:00:00\"\n                slotLabelInterval=\"01:00\"\n                //timeGridEventMinHeight={25} //removed in v5\n                nowIndicator={false}\n                allDaySlot={false}\n\n                contentHeight=\"auto\"\n                slotMinTime=\"00:00\" //TODO: Leggere da impostazioni struttura\n                slotMaxTime=\"24:00\" //TODO: Leggere da impostazioni struttura\n                //Determina le data \"valide\", quelle fuori dal range sono in grigio\n                //Non è utilizzabile in questo contesto perché devono essere visibili anche l edate passate\n                // ==> gestiamo a livello di click la disabilitazione di creazione di eventi passati\n                //validRange={{start:new Date()}}\n\n                //columnHeaderHtml={columnHeaderHtml}\n                dayHeaderContent={(args)=> columnHeaderHtml(args?.date)}\n                datesSet={handleDataChange}\n\n                dateClick={handleDateClick}\n                eventClick={handleEventClick}\n\n                events={eventi}\n            >\n            </FullCalendar>\n        </Fragment>\n    );\n\n}","/home/khoa/devjin/fe-react/src/ClientApp/src/components/utente/UtentePrenotazioniList.js",["573","574","575","576","577","578","579","580"],"/* eslint-disable import/no-anonymous-default-export */\nimport log from \"loglevel\";\nimport React from \"react\";\nimport appInsights from \"../../applicationInsights\";\nimport { UsersAPI } from \"../../api/users.api\";\nimport {\n  Grid,\n  Paper,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  makeStyles,\n  TableBody,\n  Button,\n  Typography,\n  Box,\n  Fab,\n} from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport R2DLoader from \"../commons/R2DLoader\";\nimport { Link } from \"react-router-dom\";\nimport SentimentDissatisfiedIcon from \"@material-ui/icons/SentimentDissatisfied\";\nimport dfnsITLocale from \"date-fns/locale/it\";\nimport dfnsFormat from \"date-fns/format\";\nimport format from \"date-fns/format\";\nimport { it as itLocal } from \"date-fns/locale\";\nimport parseISO from \"date-fns/parseISO\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst _logger = log.getLogger(\"UtenteStruttureSeguite\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // minHeight: \"400px\",\n    position: \"relative\",\n    marginTop: \"33px\",\n    marginBottom: \"20px\",\n    padding: \"10px\",\n  },\n  title: {\n    paddingTop: \"10px\",\n    marginBottom: \"10px\",\n    fontWeight: \"700\",\n  },\n  box: {\n    padding: \"15px\",\n    textAlign: \"center\",\n  },\n  FAB: {\n    backgroundColor: \"#000000\",\n    marginRight: \"10px\",\n  },\n  headerButton: {\n    backgroundColor: \"grey\",\n    color: \"white\",\n  },\n  grid: {\n    padding: \"15px\",\n  },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    borderBottom: \"none\",\n    padding: \"5px\",\n  },\n  body: {\n    borderBottom: \"none\",\n    padding: \"5px\",\n  },\n}))(TableCell);\n\nexport default (props) => {\n  const classes = useStyles();\n  const [fetchInProgress, setFetchInProgress] = React.useState(false);\n  const [appuntamenti, setAppuntamenti] = React.useState(null);\n  const [gridData, setGridData] = React.useState([]); //Dati renderizzati dalla griglia\n\n  React.useEffect(() => {\n    async function fetchAppuntamenti() {\n      //   const data = await UsersAPI.GetCurrentUserAppuntamentiAsync('20190301000000','20220831000000');\n      const data = await UsersAPI.GetCurrentUserWaitListAsync();\n\n      setAppuntamenti(data);\n      setFetchInProgress(false);\n    }\n    setFetchInProgress(true);\n    fetchAppuntamenti();\n  }, []);\n\n  const isLoading = () => {\n    return fetchInProgress;\n  };\n\n  // convert date format\n  // @khoa\n  function dateFormat(dateStr) {\n    let date = new Date(dateStr);\n\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let dt = date.getDate();\n    let hh = date.getHours();\n    let mm = date.getMinutes();\n\n    if (dt < 10) {\n      dt = \"0\" + dt;\n    }\n    if (month < 10) {\n      month = \"0\" + month;\n    }\n    if (hh < 10) {\n      hh = \"0\" + hh;\n    }\n    if (mm < 10) {\n      mm = \"0\" + mm;\n    }\n    if (!dt || !month || !year || !hh || !mm) return \"\";\n    return dt + \"/\" + month + \"/\" + year + \"-\" + hh + \":\" + mm;\n  }\n\n  function renderClienti() {\n    if (appuntamenti && appuntamenti.length > 0) {\n      return (\n        <TableContainer style={{padding:\"12px\", width: 'auto'}}>\n          <Table className={classes.table} aria-label=\"Elenco locations\">\n            <TableHead>\n              <TableRow>\n                <StyledTableCell>Nome Struttura</StyledTableCell>\n                <StyledTableCell align=\"center\">Nome Lezione</StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  Data e Ora Lezione\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">Stato Lezione</StyledTableCell>\n                <StyledTableCell align=\"right\">Impostazioni</StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {appuntamenti.map((m) => (\n                <TableRow key={m.id}>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {m.ragioneSocialeCliente}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {m.schedule.title}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {dateFormat(parseISO(m.schedule.dataOraInizio))}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {m.dataCancellazione\n                      ? \"Cancellata\"\n                      : Date.parse(parseISO(m.schedule.dataOraInizio)) >\n                        Date.parse(new Date())\n                      ? \"Attiva\"\n                      : \"Passata\"}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    <Fab\n                      size=\"small\"\n                      variant=\"round\"\n                      className={classes.FAB}\n                      component={Link}\n                      to={`/${m.urlRoute}/`}\n                    >\n                      <MenuIcon style={{ color: \"white\" }} />\n                    </Fab>\n                  </StyledTableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      );\n    } else {\n      return (\n        <Box className={classes.box}>\n          <Typography component=\"div\" variant=\"h6\">\n            Non stai ancora seguendo nessuna struttura\n          </Typography>\n          <SentimentDissatisfiedIcon />\n        </Box>\n      );\n    }\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <Grid container spacing={3} className={classes.grid}>\n        <Grid item xs={12} md={1}>\n          <Button className={classes.headerButton}>STORICO</Button>\n        </Grid>\n        <Grid item xs={12} md={10}>\n          <Grid\n            container\n            alignItems=\"center\"\n            justify=\"center\"\n            direction=\"column\"\n          >\n            <Grid item xs={12}>\n              <Typography className={classes.title} align=\"center\" variant=\"h5\">\n                I Mie Prenotazioni\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} md={1}>\n          <InfoIcon style={{ fontSize: 40, color: \"grey\", float: \"right\" }}></InfoIcon>\n        </Grid>\n      </Grid>\n      {isLoading() ? <R2DLoader /> : renderClienti()}\n    </Paper>\n  );\n};\n",{"ruleId":"581","replacedBy":"582"},{"ruleId":"583","replacedBy":"584"},{"ruleId":"585","severity":1,"message":"586","line":19,"column":1,"nodeType":"587","endLine":41,"endColumn":3},{"ruleId":"588","severity":1,"message":"589","line":10,"column":7,"nodeType":"590","messageId":"591","endLine":10,"endColumn":14},{"ruleId":"588","severity":1,"message":"592","line":3,"column":8,"nodeType":"590","messageId":"591","endLine":3,"endColumn":14},{"ruleId":"585","severity":1,"message":"586","line":41,"column":1,"nodeType":"587","endLine":107,"endColumn":3},{"ruleId":"588","severity":1,"message":"593","line":33,"column":17,"nodeType":"590","messageId":"591","endLine":33,"endColumn":20},{"ruleId":"588","severity":1,"message":"594","line":3,"column":25,"nodeType":"590","messageId":"591","endLine":3,"endColumn":38},{"ruleId":"588","severity":1,"message":"595","line":3,"column":40,"nodeType":"590","messageId":"591","endLine":3,"endColumn":49},{"ruleId":"585","severity":1,"message":"586","line":14,"column":1,"nodeType":"587","endLine":37,"endColumn":2},{"ruleId":"585","severity":1,"message":"586","line":40,"column":1,"nodeType":"587","endLine":132,"endColumn":2},{"ruleId":"588","severity":1,"message":"596","line":151,"column":13,"nodeType":"590","messageId":"591","endLine":151,"endColumn":18},{"ruleId":"588","severity":1,"message":"597","line":4,"column":30,"nodeType":"590","messageId":"591","endLine":4,"endColumn":50},{"ruleId":"588","severity":1,"message":"598","line":43,"column":11,"nodeType":"590","messageId":"591","endLine":43,"endColumn":20},{"ruleId":"585","severity":1,"message":"586","line":20,"column":1,"nodeType":"587","endLine":128,"endColumn":3},{"ruleId":"588","severity":1,"message":"599","line":1,"column":17,"nodeType":"590","messageId":"591","endLine":1,"endColumn":25},{"ruleId":"588","severity":1,"message":"600","line":16,"column":11,"nodeType":"590","messageId":"591","endLine":16,"endColumn":19},{"ruleId":"601","severity":1,"message":"602","line":33,"column":7,"nodeType":"603","endLine":33,"endColumn":22,"suggestions":"604"},{"ruleId":"585","severity":1,"message":"586","line":9,"column":1,"nodeType":"587","endLine":21,"endColumn":2},{"ruleId":"588","severity":1,"message":"605","line":2,"column":13,"nodeType":"590","messageId":"591","endLine":2,"endColumn":16},{"ruleId":"585","severity":1,"message":"586","line":26,"column":1,"nodeType":"587","endLine":91,"endColumn":2},{"ruleId":"588","severity":1,"message":"606","line":145,"column":10,"nodeType":"590","messageId":"591","endLine":145,"endColumn":28},{"ruleId":"588","severity":1,"message":"607","line":145,"column":30,"nodeType":"590","messageId":"591","endLine":145,"endColumn":51},{"ruleId":"588","severity":1,"message":"608","line":3,"column":13,"nodeType":"590","messageId":"591","endLine":3,"endColumn":15},{"ruleId":"585","severity":1,"message":"586","line":35,"column":1,"nodeType":"587","endLine":340,"endColumn":3},{"ruleId":"588","severity":1,"message":"609","line":2,"column":38,"nodeType":"590","messageId":"591","endLine":2,"endColumn":46},{"ruleId":"588","severity":1,"message":"610","line":6,"column":17,"nodeType":"590","messageId":"591","endLine":6,"endColumn":21},{"ruleId":"588","severity":1,"message":"611","line":7,"column":5,"nodeType":"590","messageId":"591","endLine":7,"endColumn":15},{"ruleId":"585","severity":1,"message":"586","line":27,"column":1,"nodeType":"587","endLine":113,"endColumn":2},{"ruleId":"588","severity":1,"message":"609","line":2,"column":38,"nodeType":"590","messageId":"591","endLine":2,"endColumn":46},{"ruleId":"588","severity":1,"message":"612","line":3,"column":45,"nodeType":"590","messageId":"591","endLine":3,"endColumn":55},{"ruleId":"588","severity":1,"message":"613","line":4,"column":39,"nodeType":"590","messageId":"591","endLine":4,"endColumn":53},{"ruleId":"585","severity":1,"message":"586","line":41,"column":1,"nodeType":"587","endLine":212,"endColumn":2},{"ruleId":"588","severity":1,"message":"614","line":49,"column":30,"nodeType":"590","messageId":"591","endLine":49,"endColumn":43},{"ruleId":"588","severity":1,"message":"609","line":2,"column":38,"nodeType":"590","messageId":"591","endLine":2,"endColumn":46},{"ruleId":"588","severity":1,"message":"610","line":5,"column":22,"nodeType":"590","messageId":"591","endLine":5,"endColumn":26},{"ruleId":"588","severity":1,"message":"611","line":5,"column":119,"nodeType":"590","messageId":"591","endLine":5,"endColumn":129},{"ruleId":"588","severity":1,"message":"615","line":5,"column":138,"nodeType":"590","messageId":"591","endLine":5,"endColumn":154},{"ruleId":"585","severity":1,"message":"586","line":24,"column":1,"nodeType":"587","endLine":112,"endColumn":2},{"ruleId":"588","severity":1,"message":"616","line":3,"column":24,"nodeType":"590","messageId":"591","endLine":3,"endColumn":29},{"ruleId":"585","severity":1,"message":"586","line":40,"column":1,"nodeType":"587","endLine":278,"endColumn":2},{"ruleId":"588","severity":1,"message":"614","line":48,"column":30,"nodeType":"590","messageId":"591","endLine":48,"endColumn":43},{"ruleId":"588","severity":1,"message":"609","line":2,"column":38,"nodeType":"590","messageId":"591","endLine":2,"endColumn":46},{"ruleId":"588","severity":1,"message":"610","line":5,"column":22,"nodeType":"590","messageId":"591","endLine":5,"endColumn":26},{"ruleId":"588","severity":1,"message":"617","line":5,"column":111,"nodeType":"590","messageId":"591","endLine":5,"endColumn":117},{"ruleId":"585","severity":1,"message":"586","line":22,"column":1,"nodeType":"587","endLine":109,"endColumn":2},{"ruleId":"588","severity":1,"message":"616","line":3,"column":24,"nodeType":"590","messageId":"591","endLine":3,"endColumn":29},{"ruleId":"588","severity":1,"message":"618","line":7,"column":10,"nodeType":"590","messageId":"591","endLine":7,"endColumn":24},{"ruleId":"588","severity":1,"message":"619","line":7,"column":26,"nodeType":"590","messageId":"591","endLine":7,"endColumn":36},{"ruleId":"585","severity":1,"message":"586","line":38,"column":1,"nodeType":"587","endLine":215,"endColumn":3},{"ruleId":"588","severity":1,"message":"614","line":46,"column":28,"nodeType":"590","messageId":"591","endLine":46,"endColumn":41},{"ruleId":"585","severity":1,"message":"586","line":9,"column":1,"nodeType":"587","endLine":21,"endColumn":2},{"ruleId":"588","severity":1,"message":"620","line":3,"column":10,"nodeType":"590","messageId":"591","endLine":3,"endColumn":15},{"ruleId":"588","severity":1,"message":"589","line":9,"column":7,"nodeType":"590","messageId":"591","endLine":9,"endColumn":14},{"ruleId":"585","severity":1,"message":"586","line":19,"column":1,"nodeType":"587","endLine":37,"endColumn":3},{"ruleId":"588","severity":1,"message":"610","line":3,"column":49,"nodeType":"590","messageId":"591","endLine":3,"endColumn":53},{"ruleId":"588","severity":1,"message":"621","line":4,"column":8,"nodeType":"590","messageId":"591","endLine":4,"endColumn":16},{"ruleId":"588","severity":1,"message":"619","line":14,"column":10,"nodeType":"590","messageId":"591","endLine":14,"endColumn":20},{"ruleId":"588","severity":1,"message":"622","line":45,"column":12,"nodeType":"590","messageId":"591","endLine":45,"endColumn":32},{"ruleId":"588","severity":1,"message":"623","line":45,"column":34,"nodeType":"590","messageId":"591","endLine":45,"endColumn":57},{"ruleId":"588","severity":1,"message":"624","line":47,"column":12,"nodeType":"590","messageId":"591","endLine":47,"endColumn":21},{"ruleId":"588","severity":1,"message":"625","line":47,"column":23,"nodeType":"590","messageId":"591","endLine":47,"endColumn":35},{"ruleId":"588","severity":1,"message":"626","line":48,"column":12,"nodeType":"590","messageId":"591","endLine":48,"endColumn":24},{"ruleId":"588","severity":1,"message":"627","line":51,"column":23,"nodeType":"590","messageId":"591","endLine":51,"endColumn":35},{"ruleId":"588","severity":1,"message":"620","line":2,"column":10,"nodeType":"590","messageId":"591","endLine":2,"endColumn":15},{"ruleId":"588","severity":1,"message":"628","line":2,"column":17,"nodeType":"590","messageId":"591","endLine":2,"endColumn":27},{"ruleId":"588","severity":1,"message":"629","line":2,"column":58,"nodeType":"590","messageId":"591","endLine":2,"endColumn":62},{"ruleId":"585","severity":1,"message":"586","line":42,"column":1,"nodeType":"587","endLine":202,"endColumn":2},{"ruleId":"588","severity":1,"message":"630","line":12,"column":3,"nodeType":"590","messageId":"591","endLine":12,"endColumn":17},{"ruleId":"588","severity":1,"message":"631","line":26,"column":10,"nodeType":"590","messageId":"591","endLine":26,"endColumn":12},{"ruleId":"585","severity":1,"message":"586","line":74,"column":1,"nodeType":"587","endLine":390,"endColumn":3},{"ruleId":"588","severity":1,"message":"632","line":75,"column":9,"nodeType":"590","messageId":"591","endLine":75,"endColumn":34},{"ruleId":"588","severity":1,"message":"633","line":76,"column":9,"nodeType":"590","messageId":"591","endLine":76,"endColumn":31},{"ruleId":"588","severity":1,"message":"634","line":82,"column":21,"nodeType":"590","messageId":"591","endLine":82,"endColumn":30},{"ruleId":"588","severity":1,"message":"635","line":106,"column":10,"nodeType":"590","messageId":"591","endLine":106,"endColumn":27},{"ruleId":"588","severity":1,"message":"636","line":3,"column":10,"nodeType":"590","messageId":"591","endLine":3,"endColumn":18},{"ruleId":"585","severity":1,"message":"586","line":35,"column":1,"nodeType":"587","endLine":138,"endColumn":3},{"ruleId":"588","severity":1,"message":"637","line":8,"column":7,"nodeType":"590","messageId":"591","endLine":8,"endColumn":18},{"ruleId":"588","severity":1,"message":"638","line":33,"column":12,"nodeType":"590","messageId":"591","endLine":33,"endColumn":36},{"ruleId":"588","severity":1,"message":"639","line":35,"column":12,"nodeType":"590","messageId":"591","endLine":35,"endColumn":39},{"ruleId":"640","severity":1,"message":"641","line":1,"column":1,"nodeType":"642","messageId":"643","fix":"644"},{"ruleId":"588","severity":1,"message":"645","line":3,"column":10,"nodeType":"590","messageId":"591","endLine":3,"endColumn":21},{"ruleId":"588","severity":1,"message":"646","line":4,"column":10,"nodeType":"590","messageId":"591","endLine":4,"endColumn":14},{"ruleId":"588","severity":1,"message":"647","line":5,"column":30,"nodeType":"590","messageId":"591","endLine":5,"endColumn":35},{"ruleId":"588","severity":1,"message":"648","line":8,"column":8,"nodeType":"590","messageId":"591","endLine":8,"endColumn":16},{"ruleId":"588","severity":1,"message":"649","line":23,"column":7,"nodeType":"590","messageId":"591","endLine":23,"endColumn":18},{"ruleId":"588","severity":1,"message":"650","line":65,"column":11,"nodeType":"590","messageId":"591","endLine":65,"endColumn":21},{"ruleId":"588","severity":1,"message":"651","line":67,"column":14,"nodeType":"590","messageId":"591","endLine":67,"endColumn":35},{"ruleId":"588","severity":1,"message":"652","line":68,"column":22,"nodeType":"590","messageId":"591","endLine":68,"endColumn":35},{"ruleId":"588","severity":1,"message":"653","line":2,"column":27,"nodeType":"590","messageId":"591","endLine":2,"endColumn":36},{"ruleId":"588","severity":1,"message":"654","line":20,"column":10,"nodeType":"590","messageId":"591","endLine":20,"endColumn":18},{"ruleId":"588","severity":1,"message":"655","line":6,"column":3,"nodeType":"590","messageId":"591","endLine":6,"endColumn":6},{"ruleId":"588","severity":1,"message":"611","line":10,"column":3,"nodeType":"590","messageId":"591","endLine":10,"endColumn":13},{"ruleId":"588","severity":1,"message":"656","line":17,"column":8,"nodeType":"590","messageId":"591","endLine":17,"endColumn":18},{"ruleId":"588","severity":1,"message":"657","line":19,"column":8,"nodeType":"590","messageId":"591","endLine":19,"endColumn":30},{"ruleId":"588","severity":1,"message":"628","line":22,"column":10,"nodeType":"590","messageId":"591","endLine":22,"endColumn":20},{"ruleId":"588","severity":1,"message":"658","line":116,"column":9,"nodeType":"590","messageId":"591","endLine":116,"endColumn":23},{"ruleId":"588","severity":1,"message":"659","line":117,"column":9,"nodeType":"590","messageId":"591","endLine":117,"endColumn":22},{"ruleId":"588","severity":1,"message":"660","line":131,"column":11,"nodeType":"590","messageId":"591","endLine":131,"endColumn":23},{"ruleId":"588","severity":1,"message":"661","line":131,"column":25,"nodeType":"590","messageId":"591","endLine":131,"endColumn":38},{"ruleId":"588","severity":1,"message":"662","line":131,"column":40,"nodeType":"590","messageId":"591","endLine":131,"endColumn":44},{"ruleId":"588","severity":1,"message":"663","line":216,"column":9,"nodeType":"590","messageId":"591","endLine":216,"endColumn":28},{"ruleId":"588","severity":1,"message":"664","line":220,"column":9,"nodeType":"590","messageId":"591","endLine":220,"endColumn":19},{"ruleId":"585","severity":1,"message":"586","line":23,"column":1,"nodeType":"587","endLine":146,"endColumn":2},{"ruleId":"588","severity":1,"message":"665","line":35,"column":11,"nodeType":"590","messageId":"591","endLine":35,"endColumn":30},{"ruleId":"666","severity":1,"message":"667","line":95,"column":5,"nodeType":"668","messageId":"669","endLine":111,"endColumn":6},{"ruleId":"585","severity":1,"message":"586","line":16,"column":1,"nodeType":"587","endLine":46,"endColumn":2},{"ruleId":"588","severity":1,"message":"670","line":4,"column":8,"nodeType":"590","messageId":"591","endLine":4,"endColumn":19},{"ruleId":"588","severity":1,"message":"617","line":16,"column":3,"nodeType":"590","messageId":"591","endLine":16,"endColumn":9},{"ruleId":"588","severity":1,"message":"671","line":118,"column":12,"nodeType":"590","messageId":"591","endLine":118,"endColumn":39},{"ruleId":"588","severity":1,"message":"672","line":2,"column":8,"nodeType":"590","messageId":"591","endLine":2,"endColumn":17},{"ruleId":"588","severity":1,"message":"673","line":3,"column":8,"nodeType":"590","messageId":"591","endLine":3,"endColumn":24},{"ruleId":"588","severity":1,"message":"674","line":4,"column":8,"nodeType":"590","messageId":"591","endLine":4,"endColumn":24},{"ruleId":"588","severity":1,"message":"675","line":5,"column":8,"nodeType":"590","messageId":"591","endLine":5,"endColumn":22},{"ruleId":"588","severity":1,"message":"628","line":6,"column":10,"nodeType":"590","messageId":"591","endLine":6,"endColumn":20},{"ruleId":"588","severity":1,"message":"613","line":6,"column":22,"nodeType":"590","messageId":"591","endLine":6,"endColumn":36},{"ruleId":"588","severity":1,"message":"655","line":6,"column":46,"nodeType":"590","messageId":"591","endLine":6,"endColumn":49},{"ruleId":"588","severity":1,"message":"619","line":7,"column":30,"nodeType":"590","messageId":"591","endLine":7,"endColumn":40},{"ruleId":"588","severity":1,"message":"676","line":8,"column":10,"nodeType":"590","messageId":"591","endLine":8,"endColumn":22},{"ruleId":"588","severity":1,"message":"677","line":9,"column":10,"nodeType":"590","messageId":"591","endLine":9,"endColumn":31},{"ruleId":"588","severity":1,"message":"670","line":6,"column":8,"nodeType":"590","messageId":"591","endLine":6,"endColumn":19},{"ruleId":"588","severity":1,"message":"678","line":7,"column":10,"nodeType":"590","messageId":"591","endLine":7,"endColumn":23},{"ruleId":"588","severity":1,"message":"679","line":3,"column":8,"nodeType":"590","messageId":"591","endLine":3,"endColumn":16},{"ruleId":"588","severity":1,"message":"680","line":3,"column":31,"nodeType":"590","messageId":"591","endLine":3,"endColumn":43},{"ruleId":"588","severity":1,"message":"655","line":11,"column":3,"nodeType":"590","messageId":"591","endLine":11,"endColumn":6},{"ruleId":"588","severity":1,"message":"681","line":20,"column":3,"nodeType":"590","messageId":"591","endLine":20,"endColumn":13},{"ruleId":"588","severity":1,"message":"614","line":79,"column":28,"nodeType":"590","messageId":"591","endLine":79,"endColumn":41},{"ruleId":"585","severity":1,"message":"586","line":46,"column":1,"nodeType":"587","endLine":118,"endColumn":2},{"ruleId":"585","severity":1,"message":"682","line":1,"column":1,"nodeType":"587","endLine":29,"endColumn":2},{"ruleId":"585","severity":1,"message":"586","line":33,"column":3,"nodeType":"587","endLine":59,"endColumn":2},{"ruleId":"588","severity":1,"message":"683","line":4,"column":10,"nodeType":"590","messageId":"591","endLine":4,"endColumn":21},{"ruleId":"588","severity":1,"message":"684","line":5,"column":8,"nodeType":"590","messageId":"591","endLine":5,"endColumn":17},{"ruleId":"588","severity":1,"message":"685","line":127,"column":12,"nodeType":"590","messageId":"591","endLine":127,"endColumn":28},{"ruleId":"588","severity":1,"message":"686","line":166,"column":12,"nodeType":"590","messageId":"591","endLine":166,"endColumn":21},{"ruleId":"588","severity":1,"message":"687","line":3,"column":3,"nodeType":"590","messageId":"591","endLine":3,"endColumn":6},{"ruleId":"588","severity":1,"message":"688","line":11,"column":8,"nodeType":"590","messageId":"591","endLine":11,"endColumn":15},{"ruleId":"588","severity":1,"message":"689","line":16,"column":10,"nodeType":"590","messageId":"591","endLine":16,"endColumn":19},{"ruleId":"588","severity":1,"message":"687","line":3,"column":5,"nodeType":"590","messageId":"591","endLine":3,"endColumn":8},{"ruleId":"588","severity":1,"message":"688","line":8,"column":8,"nodeType":"590","messageId":"591","endLine":8,"endColumn":15},{"ruleId":"588","severity":1,"message":"690","line":13,"column":8,"nodeType":"590","messageId":"591","endLine":13,"endColumn":28},{"ruleId":"588","severity":1,"message":"691","line":47,"column":12,"nodeType":"590","messageId":"591","endLine":47,"endColumn":20},{"ruleId":"588","severity":1,"message":"687","line":3,"column":5,"nodeType":"590","messageId":"591","endLine":3,"endColumn":8},{"ruleId":"588","severity":1,"message":"692","line":4,"column":5,"nodeType":"590","messageId":"591","endLine":4,"endColumn":9},{"ruleId":"588","severity":1,"message":"609","line":13,"column":17,"nodeType":"590","messageId":"591","endLine":13,"endColumn":25},{"ruleId":"588","severity":1,"message":"688","line":14,"column":8,"nodeType":"590","messageId":"591","endLine":14,"endColumn":15},{"ruleId":"588","severity":1,"message":"693","line":17,"column":10,"nodeType":"590","messageId":"591","endLine":17,"endColumn":14},{"ruleId":"588","severity":1,"message":"694","line":9,"column":11,"nodeType":"590","messageId":"591","endLine":9,"endColumn":15},{"ruleId":"585","severity":1,"message":"586","line":64,"column":1,"nodeType":"587","endLine":336,"endColumn":3},{"ruleId":"695","severity":1,"message":"696","line":139,"column":5,"nodeType":"697","messageId":"698","endLine":307,"endColumn":6},{"ruleId":"585","severity":1,"message":"586","line":20,"column":1,"nodeType":"587","endLine":87,"endColumn":2},{"ruleId":"588","severity":1,"message":"617","line":2,"column":3,"nodeType":"590","messageId":"591","endLine":2,"endColumn":9},{"ruleId":"588","severity":1,"message":"699","line":4,"column":3,"nodeType":"590","messageId":"591","endLine":4,"endColumn":9},{"ruleId":"588","severity":1,"message":"689","line":6,"column":3,"nodeType":"590","messageId":"591","endLine":6,"endColumn":12},{"ruleId":"588","severity":1,"message":"700","line":15,"column":8,"nodeType":"590","messageId":"591","endLine":15,"endColumn":16},{"ruleId":"588","severity":1,"message":"701","line":16,"column":8,"nodeType":"590","messageId":"591","endLine":16,"endColumn":18},{"ruleId":"588","severity":1,"message":"614","line":58,"column":28,"nodeType":"590","messageId":"591","endLine":58,"endColumn":41},{"ruleId":"588","severity":1,"message":"702","line":93,"column":9,"nodeType":"590","messageId":"591","endLine":93,"endColumn":31},{"ruleId":"666","severity":1,"message":"667","line":101,"column":5,"nodeType":"668","messageId":"669","endLine":123,"endColumn":6},{"ruleId":"588","severity":1,"message":"703","line":85,"column":12,"nodeType":"590","messageId":"591","endLine":85,"endColumn":27},{"ruleId":"588","severity":1,"message":"704","line":86,"column":12,"nodeType":"590","messageId":"591","endLine":86,"endColumn":33},{"ruleId":"588","severity":1,"message":"705","line":86,"column":35,"nodeType":"590","messageId":"591","endLine":86,"endColumn":59},{"ruleId":"588","severity":1,"message":"700","line":21,"column":8,"nodeType":"590","messageId":"591","endLine":21,"endColumn":16},{"ruleId":"588","severity":1,"message":"703","line":127,"column":10,"nodeType":"590","messageId":"591","endLine":127,"endColumn":25},{"ruleId":"588","severity":1,"message":"706","line":130,"column":10,"nodeType":"590","messageId":"591","endLine":130,"endColumn":37},{"ruleId":"588","severity":1,"message":"707","line":218,"column":12,"nodeType":"590","messageId":"591","endLine":218,"endColumn":24},{"ruleId":"588","severity":1,"message":"699","line":2,"column":25,"nodeType":"590","messageId":"591","endLine":2,"endColumn":31},{"ruleId":"588","severity":1,"message":"700","line":5,"column":8,"nodeType":"590","messageId":"591","endLine":5,"endColumn":16},{"ruleId":"588","severity":1,"message":"653","line":10,"column":27,"nodeType":"590","messageId":"591","endLine":10,"endColumn":36},{"ruleId":"588","severity":1,"message":"708","line":15,"column":10,"nodeType":"590","messageId":"591","endLine":15,"endColumn":28},{"ruleId":"588","severity":1,"message":"709","line":75,"column":43,"nodeType":"590","messageId":"591","endLine":75,"endColumn":51},{"ruleId":"588","severity":1,"message":"710","line":79,"column":27,"nodeType":"590","messageId":"591","endLine":79,"endColumn":43},{"ruleId":"588","severity":1,"message":"711","line":80,"column":12,"nodeType":"590","messageId":"591","endLine":80,"endColumn":20},{"ruleId":"588","severity":1,"message":"712","line":83,"column":14,"nodeType":"590","messageId":"591","endLine":83,"endColumn":34},{"ruleId":"588","severity":1,"message":"713","line":83,"column":36,"nodeType":"590","messageId":"591","endLine":83,"endColumn":59},{"ruleId":"588","severity":1,"message":"707","line":157,"column":14,"nodeType":"590","messageId":"591","endLine":157,"endColumn":26},{"ruleId":"588","severity":1,"message":"714","line":5,"column":3,"nodeType":"590","messageId":"591","endLine":5,"endColumn":19},{"ruleId":"588","severity":1,"message":"699","line":12,"column":3,"nodeType":"590","messageId":"591","endLine":12,"endColumn":9},{"ruleId":"588","severity":1,"message":"715","line":13,"column":3,"nodeType":"590","messageId":"591","endLine":13,"endColumn":12},{"ruleId":"588","severity":1,"message":"628","line":14,"column":3,"nodeType":"590","messageId":"591","endLine":14,"endColumn":13},{"ruleId":"588","severity":1,"message":"619","line":19,"column":10,"nodeType":"590","messageId":"591","endLine":19,"endColumn":20},{"ruleId":"588","severity":1,"message":"716","line":21,"column":8,"nodeType":"590","messageId":"591","endLine":21,"endColumn":14},{"ruleId":"588","severity":1,"message":"717","line":29,"column":10,"nodeType":"590","messageId":"591","endLine":29,"endColumn":28},{"ruleId":"588","severity":1,"message":"709","line":86,"column":5,"nodeType":"590","messageId":"591","endLine":86,"endColumn":13},{"ruleId":"588","severity":1,"message":"718","line":90,"column":5,"nodeType":"590","messageId":"591","endLine":90,"endColumn":13},{"ruleId":"588","severity":1,"message":"719","line":91,"column":5,"nodeType":"590","messageId":"591","endLine":91,"endColumn":14},{"ruleId":"588","severity":1,"message":"720","line":101,"column":10,"nodeType":"590","messageId":"591","endLine":101,"endColumn":23},{"ruleId":"721","severity":1,"message":"722","line":165,"column":41,"nodeType":"723","messageId":"724","endLine":165,"endColumn":74,"fix":"725"},{"ruleId":"726","severity":1,"message":"727","line":196,"column":77,"nodeType":"728","messageId":"643","endLine":196,"endColumn":79},{"ruleId":"726","severity":1,"message":"727","line":207,"column":89,"nodeType":"728","messageId":"643","endLine":207,"endColumn":91},{"ruleId":"585","severity":1,"message":"586","line":23,"column":1,"nodeType":"587","endLine":147,"endColumn":2},{"ruleId":"588","severity":1,"message":"665","line":35,"column":11,"nodeType":"590","messageId":"591","endLine":35,"endColumn":30},{"ruleId":"588","severity":1,"message":"670","line":4,"column":8,"nodeType":"590","messageId":"591","endLine":4,"endColumn":19},{"ruleId":"588","severity":1,"message":"729","line":26,"column":8,"nodeType":"590","messageId":"591","endLine":26,"endColumn":20},{"ruleId":"588","severity":1,"message":"730","line":27,"column":8,"nodeType":"590","messageId":"591","endLine":27,"endColumn":18},{"ruleId":"588","severity":1,"message":"731","line":28,"column":8,"nodeType":"590","messageId":"591","endLine":28,"endColumn":14},{"ruleId":"588","severity":1,"message":"732","line":29,"column":16,"nodeType":"590","messageId":"591","endLine":29,"endColumn":23},{"ruleId":"588","severity":1,"message":"589","line":33,"column":7,"nodeType":"590","messageId":"591","endLine":33,"endColumn":14},{"ruleId":"588","severity":1,"message":"733","line":80,"column":10,"nodeType":"590","messageId":"591","endLine":80,"endColumn":18},{"ruleId":"588","severity":1,"message":"734","line":80,"column":20,"nodeType":"590","messageId":"591","endLine":80,"endColumn":31},"no-native-reassign",["735"],"no-negated-in-lhs",["736"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'_logger' is assigned a value but never used.","Identifier","unusedVar","'AppBar' is defined but never used.","'url' is assigned a value but never used.","'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","'state' is assigned a value but never used.","'R2D_LOGOUT_REQUESTED' is defined but never used.","'isNewUser' is assigned a value but never used.","'useState' is defined but never used.","'children' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: '_logger', 'dispatch', and 'struttura'. Either include them or remove the dependency array.","ArrayExpression",["737"],"'log' is defined but never used.","'locationsIsLoading' is assigned a value but never used.","'setLocationsIsLoading' is assigned a value but never used.","'qs' is defined but never used.","'Fragment' is defined but never used.","'Grid' is defined but never used.","'IconButton' is defined but never used.","'FieldArray' is defined but never used.","'InputAdornment' is defined but never used.","'closeSnackbar' is assigned a value but never used.","'CircularProgress' is defined but never used.","'Field' is defined but never used.","'Button' is defined but never used.","'DateTimePicker' is defined but never used.","'DatePicker' is defined but never used.","'Paper' is defined but never used.","'addYears' is defined but never used.","'serverSideFilterList' is assigned a value but never used.","'setServerSideFilterList' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'appuntamenti' is assigned a value but never used.","'setTotalRows' is assigned a value but never used.","'Typography' is defined but never used.","'Card' is defined but never used.","'FormHelperText' is defined but never used.","'pl' is defined but never used.","'MIN_NOME_STRUTTURA_LENGTH' is assigned a value but never used.","'MIN_DESCRIZIONE_LENGTH' is assigned a value but never used.","'loadError' is assigned a value but never used.","'indirizzoErrorMsg' is assigned a value but never used.","'Redirect' is defined but never used.","'getUserInfo' is assigned a value but never used.","'utenteStrutturaIsLoading' is assigned a value but never used.","'utenteAssociazioneIsLoading' is assigned a value but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"738","text":"739"},"'useDispatch' is defined but never used.","'fade' is defined but never used.","'Badge' is defined but never used.","'MoreIcon' is defined but never used.","'drawerWidth' is assigned a value but never used.","'isMenuOpen' is assigned a value but never used.","'handleProfileMenuOpen' is defined but never used.","'setCoordinate' is assigned a value but never used.","'useEffect' is defined but never used.","'parseISO' is defined but never used.","'Box' is defined but never used.","'UploadIcon' is defined but never used.","'Brightness1RoundedIcon' is defined but never used.","'isMediumScreen' is assigned a value but never used.","'isLargeScreen' is assigned a value but never used.","'getRootProps' is assigned a value but never used.","'getInputProps' is assigned a value but never used.","'open' is assigned a value but never used.","'dropzoneInlineStyle' is assigned a value but never used.","'getNumCols' is assigned a value but never used.","'DEFAULT_EVENT_COLOR' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'appInsights' is defined but never used.","'renderAbbonamentoForCliente' is defined but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.","'FilterListIcon' is defined but never used.","'ParsableDate' is defined but never used.","'MaterialUiPickersDate' is defined but never used.","'SeverityLevel' is defined but never used.","'buildUrl' is defined but never used.","'ErrorMessage' is defined but never used.","'RadioGroup' is defined but never used.","Assign object to a variable before exporting as module default","'useSelector' is defined but never used.","'PropTypes' is defined but never used.","'decodeTipoOrario' is defined but never used.","'parseTime' is defined but never used.","'Fab' is defined but never used.","'AddIcon' is defined but never used.","'Container' is defined but never used.","'CertificatiUtenteAdd' is defined but never used.","'editMode' is assigned a value but never used.","'Fade' is defined but never used.","'grey' is defined but never used.","'flex' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Switch' is defined but never used.","'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'handleEditPrenotazione' is assigned a value but never used.","'tipoAbbonamento' is assigned a value but never used.","'minDataInizioValidita' is assigned a value but never used.","'setMinDataInizioValidita' is assigned a value but never used.","'tipologieAbbonamentiLoading' is assigned a value but never used.","'renderNoData' is defined but never used.","'StruttureEventiAPI' is defined but never used.","'register' is assigned a value but never used.","'setTipologieCert' is assigned a value but never used.","'tipoCert' is assigned a value but never used.","'tipologieCertLoading' is assigned a value but never used.","'setTipologieCertLoading' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'TextField' is defined but never used.","'isDate' is defined but never used.","'StruttureUtentiAPI' is defined but never used.","'setValue' is assigned a value but never used.","'getValues' is assigned a value but never used.","'eventiLoading' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property idAbbonamento.","MemberExpression","unexpectedWhitespace",{"range":"740","text":"741"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'dfnsITLocale' is defined but never used.","'dfnsFormat' is defined but never used.","'format' is defined but never used.","'itLocal' is defined but never used.","'gridData' is assigned a value but never used.","'setGridData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"742","fix":"743"},[-1,0],"",[4774,4776],".","Update the dependencies array to be: [_logger, dispatch, nomeStruttura, struttura]",{"range":"744","text":"745"},[1449,1464],"[_logger, dispatch, nomeStruttura, struttura]"]